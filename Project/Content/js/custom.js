INIT_DATA();
(function (A, w) {
    function ma() {
        if (!c.isReady) {
            try {
                s.documentElement.doScroll("left")
            } catch (a) {
                setTimeout(ma, 1);
                return
            }
            c.ready()
        }
    }
    function Qa(a, b) {
        b.src ? c.ajax({
            url: b.src,
            async: false,
            dataType: "script"
        }) : c.globalEval(b.text || b.textContent || b.innerHTML || "");
        b.parentNode && b.parentNode.removeChild(b)
    }
    function X(a, b, d, f, e, j) {
        var i = a.length;
        if (typeof b === "object") {
            for (var o in b) X(a, o, b[o], f, e, d);
            return a
        }
        if (d !== w) {
            f = !j && f && c.isFunction(d);
            for (o = 0; o < i; o++) e(a[o], b, f ? d.call(a[o], o, e(a[o], b)) : d, j);
            return a
        }
        return i ? e(a[0], b) : w
    }
    function J() {
        return (new Date).getTime()
    }
    function Y() {
        return false
    }
    function Z() {
        return true
    }
    function na(a, b, d) {
        d[0].type = a;
        return c.event.handle.apply(b, d)
    }
    function oa(a) {
        var b, d = [],
            f = [],
            e = arguments,
            j, i, o, k, n, r;
        i = c.data(this, "events");
        if (!(a.liveFired === this || !i || !i.live || a.button && a.type === "click")) {
            a.liveFired = this;
            var u = i.live.slice(0);
            for (k = 0; k < u.length; k++) {
                i = u[k];
                i.origType.replace(O, "") === a.type ? f.push(i.selector) : u.splice(k--, 1)
            }
            j = c(a.target).closest(f, a.currentTarget);
            n = 0;
            for (r = j.length; n < r; n++) for (k = 0; k < u.length; k++) {
                i = u[k];
                if (j[n].selector === i.selector) {
                    o = j[n].elem;
                    f = null;
                    if (i.preType === "mouseenter" || i.preType === "mouseleave") f = c(a.relatedTarget).closest(i.selector)[0];
                    if (!f || f !== o) d.push({
                        elem: o,
                        handleObj: i
                    })
                }
            }
            n = 0;
            for (r = d.length; n < r; n++) {
                j = d[n];
                a.currentTarget = j.elem;
                a.data = j.handleObj.data;
                a.handleObj = j.handleObj;
                if (j.handleObj.origHandler.apply(j.elem, e) === false) {
                    b = false;
                    break
                }
            }
            return b
        }
    }
    function pa(a, b) {
        return "live." + (a && a !== "*" ? a + "." : "") + b.replace(/\./g, "`").replace(/ /g, "&")
    }
    function qa(a) {
        return !a || !a.parentNode || a.parentNode.nodeType === 11
    }
    function ra(a, b) {
        var d = 0;
        b.each(function () {
            if (this.nodeName === (a[d] && a[d].nodeName)) {
                var f = c.data(a[d++]),
                    e = c.data(this, f);
                if (f = f && f.events) {
                    delete e.handle;
                    e.events = {};
                    for (var j in f) for (var i in f[j]) c.event.add(this, j, f[j][i], f[j][i].data)
                }
            }
        })
    }
    function sa(a, b, d) {
        var f, e, j;
        b = b && b[0] ? b[0].ownerDocument || b[0] : s;
        if (a.length === 1 && typeof a[0] === "string" && a[0].length < 512 && b === s && !ta.test(a[0]) && (c.support.checkClone || !ua.test(a[0]))) {
            e = true;
            if (j = c.fragments[a[0]]) if (j !== 1) f = j
        }
        if (!f) {
            f = b.createDocumentFragment();
            c.clean(a, b, f, d)
        }
        if (e) c.fragments[a[0]] = j ? f : 1;
        return {
            fragment: f,
            cacheable: e
        }
    }
    function K(a, b) {
        var d = {};
        c.each(va.concat.apply([], va.slice(0, b)), function () {
            d[this] = a
        });
        return d
    }
    function wa(a) {
        return "scrollTo" in a && a.document ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : false
    }
    var c = function (a, b) {
            return new c.fn.init(a, b)
        },
        Ra = A.jQuery,
        Sa = A.$,
        s = A.document,
        T, Ta = /^[^<]*(<[\w\W]+>)[^>]*$|^#([\w-]+)$/,
        Ua = /^.[^:#\[\.,]*$/,
        Va = /\S/,
        Wa = /^(\s|\u00A0)+|(\s|\u00A0)+$/g,
        Xa = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
        P = navigator.userAgent,
        xa = false,
        Q = [],
        L, $ = Object.prototype.toString,
        aa = Object.prototype.hasOwnProperty,
        ba = Array.prototype.push,
        R = Array.prototype.slice,
        ya = Array.prototype.indexOf;
    c.fn = c.prototype = {
        init: function (a, b) {
            var d, f;
            if (!a) return this;
            if (a.nodeType) {
                this.context = this[0] = a;
                this.length = 1;
                return this
            }
            if (a === "body" && !b) {
                this.context = s;
                this[0] = s.body;
                this.selector = "body";
                this.length = 1;
                return this
            }
            if (typeof a === "string") if ((d = Ta.exec(a)) && (d[1] || !b)) if (d[1]) {
                f = b ? b.ownerDocument || b : s;
                if (a = Xa.exec(a)) if (c.isPlainObject(b)) {
                    a = [s.createElement(a[1])];
                    c.fn.attr.call(a, b, true)
                } else a = [f.createElement(a[1])];
                else {
                    a = sa([d[1]], [f]);
                    a = (a.cacheable ? a.fragment.cloneNode(true) : a.fragment).childNodes
                }
                return c.merge(this, a)
            } else {
                if (b = s.getElementById(d[2])) {
                    if (b.id !== d[2]) return T.find(a);
                    this.length = 1;
                    this[0] = b
                }
                this.context = s;
                this.selector = a;
                return this
            } else if (!b && /^\w+$/.test(a)) {
                this.selector = a;
                this.context = s;
                a = s.getElementsByTagName(a);
                return c.merge(this, a)
            } else return !b || b.jquery ? (b || T).find(a) : c(b).find(a);
            else if (c.isFunction(a)) return T.ready(a);
            if (a.selector !== w) {
                this.selector = a.selector;
                this.context = a.context
            }
            return c.makeArray(a, this)
        },
        selector: "",
        jquery: "1.4.2",
        length: 0,
        size: function () {
            return this.length
        },
        toArray: function () {
            return R.call(this, 0)
        },
        get: function (a) {
            return a == null ? this.toArray() : a < 0 ? this.slice(a)[0] : this[a]
        },
        pushStack: function (a, b, d) {
            var f = c();
            c.isArray(a) ? ba.apply(f, a) : c.merge(f, a);
            f.prevObject = this;
            f.context = this.context;
            if (b === "find") f.selector = this.selector + (this.selector ? " " : "") + d;
            else if (b) f.selector = this.selector + "." + b + "(" + d + ")";
            return f
        },
        each: function (a, b) {
            return c.each(this, a, b)
        },
        ready: function (a) {
            c.bindReady();
            if (c.isReady) a.call(s, c);
            else Q && Q.push(a);
            return this
        },
        eq: function (a) {
            return a === -1 ? this.slice(a) : this.slice(a, +a + 1)
        },
        first: function () {
            return this.eq(0)
        },
        last: function () {
            return this.eq(-1)
        },
        slice: function () {
            return this.pushStack(R.apply(this, arguments), "slice", R.call(arguments).join(","))
        },
        map: function (a) {
            return this.pushStack(c.map(this, function (b, d) {
                return a.call(b, d, b)
            }))
        },
        end: function () {
            return this.prevObject || c(null)
        },
        push: ba,
        sort: [].sort,
        splice: [].splice
    };
    c.fn.init.prototype = c.fn;
    c.extend = c.fn.extend = function () {
        var a = arguments[0] || {},
            b = 1,
            d = arguments.length,
            f = false,
            e, j, i, o;
        if (typeof a === "boolean") {
            f = a;
            a = arguments[1] || {};
            b = 2
        }
        if (typeof a !== "object" && !c.isFunction(a)) a = {};
        if (d === b) {
            a = this;
            --b
        }
        for (; b < d; b++) if ((e = arguments[b]) != null) for (j in e) {
            i = a[j];
            o = e[j];
            if (a !== o) if (f && o && (c.isPlainObject(o) || c.isArray(o))) {
                i = i && (c.isPlainObject(i) || c.isArray(i)) ? i : c.isArray(o) ? [] : {};
                a[j] = c.extend(f, i, o)
            } else if (o !== w) a[j] = o
        }
        return a
    };
    c.extend({
        noConflict: function (a) {
            A.$ = Sa;
            if (a) A.jQuery = Ra;
            return c
        },
        isReady: false,
        ready: function () {
            if (!c.isReady) {
                if (!s.body) return setTimeout(c.ready, 13);
                c.isReady = true;
                if (Q) {
                    for (var a, b = 0; a = Q[b++];) a.call(s, c);
                    Q = null
                }
                c.fn.triggerHandler && c(s).triggerHandler("ready")
            }
        },
        bindReady: function () {
            if (!xa) {
                xa = true;
                if (s.readyState === "complete") return c.ready();
                if (s.addEventListener) {
                    s.addEventListener("DOMContentLoaded", L, false);
                    A.addEventListener("load", c.ready, false)
                } else if (s.attachEvent) {
                    s.attachEvent("onreadystatechange", L);
                    A.attachEvent("onload", c.ready);
                    var a = false;
                    try {
                        a = A.frameElement == null
                    } catch (b) {}
                    s.documentElement.doScroll && a && ma()
                }
            }
        },
        isFunction: function (a) {
            return $.call(a) === "[object Function]"
        },
        isArray: function (a) {
            return $.call(a) === "[object Array]"
        },
        isPlainObject: function (a) {
            if (!a || $.call(a) !== "[object Object]" || a.nodeType || a.setInterval) return false;
            if (a.constructor && !aa.call(a, "constructor") && !aa.call(a.constructor.prototype, "isPrototypeOf")) return false;
            var b;
            for (b in a);
            return b === w || aa.call(a, b)
        },
        isEmptyObject: function (a) {
            for (var b in a) return false;
            return true
        },
        error: function (a) {
            throw a;
        },
        parseJSON: function (a) {
            if (typeof a !== "string" || !a) return null;
            a = c.trim(a);
            if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return A.JSON && A.JSON.parse ? A.JSON.parse(a) : (new Function("return " + a))();
            else c.error("Invalid JSON: " + a)
        },
        noop: function () {},
        globalEval: function (a) {
            if (a && Va.test(a)) {
                var b = s.getElementsByTagName("head")[0] || s.documentElement,
                    d = s.createElement("script");
                d.type = "text/javascript";
                if (c.support.scriptEval) d.appendChild(s.createTextNode(a));
                else d.text = a;
                b.insertBefore(d, b.firstChild);
                b.removeChild(d)
            }
        },
        nodeName: function (a, b) {
            return a.nodeName && a.nodeName.toUpperCase() === b.toUpperCase()
        },
        each: function (a, b, d) {
            var f, e = 0,
                j = a.length,
                i = j === w || c.isFunction(a);
            if (d) if (i) for (f in a) {
                if (b.apply(a[f], d) === false) break
            } else for (; e < j;) {
                if (b.apply(a[e++], d) === false) break
            } else if (i) for (f in a) {
                if (b.call(a[f], f, a[f]) === false) break
            } else for (d = a[0]; e < j && b.call(d, e, d) !== false; d = a[++e]);
            return a
        },
        trim: function (a) {
            return (a || "").replace(Wa, "")
        },
        makeArray: function (a, b) {
            b = b || [];
            if (a != null) a.length == null || typeof a === "string" || c.isFunction(a) || typeof a !== "function" && a.setInterval ? ba.call(b, a) : c.merge(b, a);
            return b
        },
        inArray: function (a, b) {
            if (b.indexOf) return b.indexOf(a);
            for (var d = 0, f = b.length; d < f; d++) if (b[d] === a) return d;
            return -1
        },
        merge: function (a, b) {
            var d = a.length,
                f = 0;
            if (typeof b.length === "number") for (var e = b.length; f < e; f++) a[d++] = b[f];
            else for (; b[f] !== w;) a[d++] = b[f++];
            a.length = d;
            return a
        },
        grep: function (a, b, d) {
            for (var f = [], e = 0, j = a.length; e < j; e++)!d !== !b(a[e], e) && f.push(a[e]);
            return f
        },
        map: function (a, b, d) {
            for (var f = [], e, j = 0, i = a.length; j < i; j++) {
                e = b(a[j], j, d);
                if (e != null) f[f.length] = e
            }
            return f.concat.apply([], f)
        },
        guid: 1,
        proxy: function (a, b, d) {
            if (arguments.length === 2) if (typeof b === "string") {
                d = a;
                a = d[b];
                b = w
            } else if (b && !c.isFunction(b)) {
                d = b;
                b = w
            }
            if (!b && a) b = function () {
                return a.apply(d || this, arguments)
            };
            if (a) b.guid = a.guid = a.guid || b.guid || c.guid++;
            return b
        },
        uaMatch: function (a) {
            a = a.toLowerCase();
            a = /(webkit)[ \/]([\w.]+)/.exec(a) || /(opera)(?:.*version)?[ \/]([\w.]+)/.exec(a) || /(msie) ([\w.]+)/.exec(a) || !/compatible/.test(a) && /(mozilla)(?:.*? rv:([\w.]+))?/.exec(a) || [];
            return {
                browser: a[1] || "",
                version: a[2] || "0"
            }
        },
        browser: {}
    });
    P = c.uaMatch(P);
    if (P.browser) {
        c.browser[P.browser] = true;
        c.browser.version = P.version
    }
    if (c.browser.webkit) c.browser.safari = true;
    if (ya) c.inArray = function (a, b) {
        return ya.call(b, a)
    };
    T = c(s);
    if (s.addEventListener) L = function () {
        s.removeEventListener("DOMContentLoaded", L, false);
        c.ready()
    };
    else if (s.attachEvent) L = function () {
        if (s.readyState === "complete") {
            s.detachEvent("onreadystatechange", L);
            c.ready()
        }
    };
    (function () {
        c.support = {};
        var a = s.documentElement,
            b = s.createElement("script"),
            d = s.createElement("div"),
            f = "script" + J();
        d.style.display = "none";
        d.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        var e = d.getElementsByTagName("*"),
            j = d.getElementsByTagName("a")[0];
        if (!(!e || !e.length || !j)) {
            c.support = {
                leadingWhitespace: d.firstChild.nodeType === 3,
                tbody: !d.getElementsByTagName("tbody").length,
                htmlSerialize: !! d.getElementsByTagName("link").length,
                style: /red/.test(j.getAttribute("style")),
                hrefNormalized: j.getAttribute("href") === "/a",
                opacity: /^0.55$/.test(j.style.opacity),
                cssFloat: !! j.style.cssFloat,
                checkOn: d.getElementsByTagName("input")[0].value === "on",
                optSelected: s.createElement("select").appendChild(s.createElement("option")).selected,
                parentNode: d.removeChild(d.appendChild(s.createElement("div"))).parentNode === null,
                deleteExpando: true,
                checkClone: false,
                scriptEval: false,
                noCloneEvent: true,
                boxModel: null
            };
            b.type = "text/javascript";
            try {
                b.appendChild(s.createTextNode("window." + f + "=1;"))
            } catch (i) {}
            a.insertBefore(b, a.firstChild);
            if (A[f]) {
                c.support.scriptEval = true;
                delete A[f]
            }
            try {
                delete b.test
            } catch (o) {
                c.support.deleteExpando = false
            }
            a.removeChild(b);
            if (d.attachEvent && d.fireEvent) {
                d.attachEvent("onclick", function k() {
                    c.support.noCloneEvent = false;
                    d.detachEvent("onclick", k)
                });
                d.cloneNode(true).fireEvent("onclick")
            }
            d = s.createElement("div");
            d.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";
            a = s.createDocumentFragment();
            a.appendChild(d.firstChild);
            c.support.checkClone = a.cloneNode(true).cloneNode(true).lastChild.checked;
            c(function () {
                var k = s.createElement("div");
                k.style.width = k.style.paddingLeft = "1px";
                s.body.appendChild(k);
                c.boxModel = c.support.boxModel = k.offsetWidth === 2;
                s.body.removeChild(k).style.display = "none"
            });
            a = function (k) {
                var n = s.createElement("div");
                k = "on" + k;
                var r = k in n;
                if (!r) {
                    n.setAttribute(k, "return;");
                    r = typeof n[k] === "function"
                }
                return r
            };
            c.support.submitBubbles = a("submit");
            c.support.changeBubbles = a("change");
            a = b = d = e = j = null
        }
    })();
    c.props = {
        "for": "htmlFor",
        "class": "className",
        readonly: "readOnly",
        maxlength: "maxLength",
        cellspacing: "cellSpacing",
        rowspan: "rowSpan",
        colspan: "colSpan",
        tabindex: "tabIndex",
        usemap: "useMap",
        frameborder: "frameBorder"
    };
    var G = "jQuery" + J(),
        Ya = 0,
        za = {};
    c.extend({
        cache: {},
        expando: G,
        noData: {
            embed: true,
            object: true,
            applet: true
        },
        data: function (a, b, d) {
            if (!(a.nodeName && c.noData[a.nodeName.toLowerCase()])) {
                a = a == A ? za : a;
                var f = a[G],
                    e = c.cache;
                if (!f && typeof b === "string" && d === w) return null;
                f || (f = ++Ya);
                if (typeof b === "object") {
                    a[G] = f;
                    e[f] = c.extend(true, {}, b)
                } else if (!e[f]) {
                    a[G] = f;
                    e[f] = {}
                }
                a = e[f];
                if (d !== w) a[b] = d;
                return typeof b === "string" ? a[b] : a
            }
        },
        removeData: function (a, b) {
            if (!(a.nodeName && c.noData[a.nodeName.toLowerCase()])) {
                a = a == A ? za : a;
                var d = a[G],
                    f = c.cache,
                    e = f[d];
                if (b) {
                    if (e) {
                        delete e[b];
                        c.isEmptyObject(e) && c.removeData(a)
                    }
                } else {
                    if (c.support.deleteExpando) delete a[c.expando];
                    else a.removeAttribute && a.removeAttribute(c.expando);
                    delete f[d]
                }
            }
        }
    });
    c.fn.extend({
        data: function (a, b) {
            if (typeof a === "undefined" && this.length) return c.data(this[0]);
            else if (typeof a === "object") return this.each(function () {
                c.data(this, a)
            });
            var d = a.split(".");
            d[1] = d[1] ? "." + d[1] : "";
            if (b === w) {
                var f = this.triggerHandler("getData" + d[1] + "!", [d[0]]);
                if (f === w && this.length) f = c.data(this[0], a);
                return f === w && d[1] ? this.data(d[0]) : f
            } else return this.trigger("setData" + d[1] + "!", [d[0], b]).each(function () {
                c.data(this, a, b)
            })
        },
        removeData: function (a) {
            return this.each(function () {
                c.removeData(this, a)
            })
        }
    });
    c.extend({
        queue: function (a, b, d) {
            if (a) {
                b = (b || "fx") + "queue";
                var f = c.data(a, b);
                if (!d) return f || [];
                if (!f || c.isArray(d)) f = c.data(a, b, c.makeArray(d));
                else f.push(d);
                return f
            }
        },
        dequeue: function (a, b) {
            b = b || "fx";
            var d = c.queue(a, b),
                f = d.shift();
            if (f === "inprogress") f = d.shift();
            if (f) {
                b === "fx" && d.unshift("inprogress");
                f.call(a, function () {
                    c.dequeue(a, b)
                })
            }
        }
    });
    c.fn.extend({
        queue: function (a, b) {
            if (typeof a !== "string") {
                b = a;
                a = "fx"
            }
            if (b === w) return c.queue(this[0], a);
            return this.each(function () {
                var d = c.queue(this, a, b);
                a === "fx" && d[0] !== "inprogress" && c.dequeue(this, a)
            })
        },
        dequeue: function (a) {
            return this.each(function () {
                c.dequeue(this, a)
            })
        },
        delay: function (a, b) {
            a = c.fx ? c.fx.speeds[a] || a : a;
            b = b || "fx";
            return this.queue(b, function () {
                var d = this;
                setTimeout(function () {
                    c.dequeue(d, b)
                }, a)
            })
        },
        clearQueue: function (a) {
            return this.queue(a || "fx", [])
        }
    });
    var Aa = /[\n\t]/g,
        ca = /\s+/,
        Za = /\r/g,
        $a = /href|src|style/,
        ab = /(button|input)/i,
        bb = /(button|input|object|select|textarea)/i,
        cb = /^(a|area)$/i,
        Ba = /radio|checkbox/;
    c.fn.extend({
        attr: function (a, b) {
            return X(this, a, b, true, c.attr)
        },
        removeAttr: function (a) {
            return this.each(function () {


                c.attr(this, a, "");
                this.nodeType === 1 && this.removeAttribute(a)
            })
        },
        addClass: function (a) {
            if (c.isFunction(a)) return this.each(function (n) {
                var r = c(this);
                r.addClass(a.call(this, n, r.attr("class")))
            });
            if (a && typeof a === "string") for (var b = (a || "").split(ca), d = 0, f = this.length; d < f; d++) {
                var e = this[d];
                if (e.nodeType === 1) if (e.className) {
                    for (var j = " " + e.className + " ", i = e.className, o = 0, k = b.length; o < k; o++) if (j.indexOf(" " + b[o] + " ") < 0) i += " " + b[o];
                    e.className = c.trim(i)
                } else e.className = a
            }
            return this
        },
        removeClass: function (a) {
            if (c.isFunction(a)) return this.each(function (k) {
                var n = c(this);
                n.removeClass(a.call(this, k, n.attr("class")))
            });
            if (a && typeof a === "string" || a === w) for (var b = (a || "").split(ca), d = 0, f = this.length; d < f; d++) {
                var e = this[d];
                if (e.nodeType === 1 && e.className) if (a) {
                    for (var j = (" " + e.className + " ").replace(Aa, " "), i = 0, o = b.length; i < o; i++) j = j.replace(" " + b[i] + " ", " ");
                    e.className = c.trim(j)
                } else e.className = ""
            }
            return this
        },
        toggleClass: function (a, b) {
            var d = typeof a,
                f = typeof b === "boolean";
            if (c.isFunction(a)) return this.each(function (e) {
                var j = c(this);
                j.toggleClass(a.call(this, e, j.attr("class"), b), b)
            });
            return this.each(function () {
                if (d === "string") for (var e, j = 0, i = c(this), o = b, k = a.split(ca); e = k[j++];) {
                    o = f ? o : !i.hasClass(e);
                    i[o ? "addClass" : "removeClass"](e)
                } else if (d === "undefined" || d === "boolean") {
                    this.className && c.data(this, "__className__", this.className);
                    this.className = this.className || a === false ? "" : c.data(this, "__className__") || ""
                }
            })
        },
        hasClass: function (a) {
            a = " " + a + " ";
            for (var b = 0, d = this.length; b < d; b++) if ((" " + this[b].className + " ").replace(Aa, " ").indexOf(a) > -1) return true;
            return false
        },
        val: function (a) {
            if (a === w) {
                var b = this[0];
                if (b) {
                    if (c.nodeName(b, "option")) return (b.attributes.value || {}).specified ? b.value : b.text;
                    if (c.nodeName(b, "select")) {
                        var d = b.selectedIndex,
                            f = [],
                            e = b.options;
                        b = b.type === "select-one";
                        if (d < 0) return null;
                        var j = b ? d : 0;
                        for (d = b ? d + 1 : e.length; j < d; j++) {
                            var i = e[j];
                            if (i.selected) {
                                a = c(i).val();
                                if (b) return a;
                                f.push(a)
                            }
                        }
                        return f
                    }
                    if (Ba.test(b.type) && !c.support.checkOn) return b.getAttribute("value") === null ? "on" : b.value;
                    return (b.value || "").replace(Za, "")
                }
                return w
            }
            var o = c.isFunction(a);
            return this.each(function (k) {
                var n = c(this),
                    r = a;
                if (this.nodeType === 1) {
                    if (o) r = a.call(this, k, n.val());
                    if (typeof r === "number") r += "";
                    if (c.isArray(r) && Ba.test(this.type)) this.checked = c.inArray(n.val(), r) >= 0;
                    else if (c.nodeName(this, "select")) {
                        var u = c.makeArray(r);
                        c("option", this).each(function () {
                            this.selected = c.inArray(c(this).val(), u) >= 0
                        });
                        if (!u.length) this.selectedIndex = -1
                    } else this.value = r
                }
            })
        }
    });
    c.extend({
        attrFn: {
            val: true,
            css: true,
            html: true,
            text: true,
            data: true,
            width: true,
            height: true,
            offset: true
        },
        attr: function (a, b, d, f) {
            if (!a || a.nodeType === 3 || a.nodeType === 8) return w;
            if (f && b in c.attrFn) return c(a)[b](d);
            f = a.nodeType !== 1 || !c.isXMLDoc(a);
            var e = d !== w;
            b = f && c.props[b] || b;
            if (a.nodeType === 1) {
                var j = $a.test(b);
                if (b in a && f && !j) {
                    if (e) {
                        b === "type" && ab.test(a.nodeName) && a.parentNode && c.error("type property can't be changed");
                        a[b] = d
                    }
                    if (c.nodeName(a, "form") && a.getAttributeNode(b)) return a.getAttributeNode(b).nodeValue;
                    if (b === "tabIndex") return (b = a.getAttributeNode("tabIndex")) && b.specified ? b.value : bb.test(a.nodeName) || cb.test(a.nodeName) && a.href ? 0 : w;
                    return a[b]
                }
                if (!c.support.style && f && b === "style") {
                    if (e) a.style.cssText = "" + d;
                    return a.style.cssText
                }
                e && a.setAttribute(b, "" + d);
                a = !c.support.hrefNormalized && f && j ? a.getAttribute(b, 2) : a.getAttribute(b);
                return a === null ? w : a
            }
            return c.style(a, b, d)
        }
    });
    var O = /\.(.*)$/,
        db = function (a) {
            return a.replace(/[^\w\s\.\|`]/g, function (b) {
                return "\\" + b
            })
        };
    c.event = {
        add: function (a, b, d, f) {
            if (!(a.nodeType === 3 || a.nodeType === 8)) {
                if (a.setInterval && a !== A && !a.frameElement) a = A;
                var e, j;
                if (d.handler) {
                    e = d;
                    d = e.handler
                }
                if (!d.guid) d.guid = c.guid++;
                if (j = c.data(a)) {
                    var i = j.events = j.events || {},
                        o = j.handle;
                    if (!o) j.handle = o = function () {
                        return typeof c !== "undefined" && !c.event.triggered ? c.event.handle.apply(o.elem, arguments) : w
                    };
                    o.elem = a;
                    b = b.split(" ");
                    for (var k, n = 0, r; k = b[n++];) {
                        j = e ? c.extend({}, e) : {
                            handler: d,
                            data: f
                        };
                        if (k.indexOf(".") > -1) {
                            r = k.split(".");
                            k = r.shift();
                            j.namespace = r.slice(0).sort().join(".")
                        } else {
                            r = [];
                            j.namespace = ""
                        }
                        j.type = k;
                        j.guid = d.guid;
                        var u = i[k],
                            z = c.event.special[k] || {};
                        if (!u) {
                            u = i[k] = [];
                            if (!z.setup || z.setup.call(a, f, r, o) === false) if (a.addEventListener) a.addEventListener(k, o, false);
                            else a.attachEvent && a.attachEvent("on" + k, o)
                        }
                        if (z.add) {
                            z.add.call(a, j);
                            if (!j.handler.guid) j.handler.guid = d.guid
                        }
                        u.push(j);
                        c.event.global[k] = true
                    }
                    a = null
                }
            }
        },
        global: {},
        remove: function (a, b, d, f) {
            if (!(a.nodeType === 3 || a.nodeType === 8)) {
                var e, j = 0,
                    i, o, k, n, r, u, z = c.data(a),
                    C = z && z.events;
                if (z && C) {
                    if (b && b.type) {
                        d = b.handler;
                        b = b.type
                    }
                    if (!b || typeof b === "string" && b.charAt(0) === ".") {
                        b = b || "";
                        for (e in C) c.event.remove(a, e + b)
                    } else {
                        for (b = b.split(" "); e = b[j++];) {
                            n = e;
                            i = e.indexOf(".") < 0;
                            o = [];
                            if (!i) {
                                o = e.split(".");
                                e = o.shift();
                                k = new RegExp("(^|\\.)" + c.map(o.slice(0).sort(), db).join("\\.(?:.*\\.)?") + "(\\.|$)")
                            }
                            if (r = C[e]) if (d) {
                                n = c.event.special[e] || {};
                                for (B = f || 0; B < r.length; B++) {
                                    u = r[B];
                                    if (d.guid === u.guid) {
                                        if (i || k.test(u.namespace)) {
                                            f == null && r.splice(B--, 1);
                                            n.remove && n.remove.call(a, u)
                                        }
                                        if (f != null) break
                                    }
                                }
                                if (r.length === 0 || f != null && r.length === 1) {
                                    if (!n.teardown || n.teardown.call(a, o) === false) Ca(a, e, z.handle);
                                    delete C[e]
                                }
                            } else for (var B = 0; B < r.length; B++) {
                                u = r[B];
                                if (i || k.test(u.namespace)) {
                                    c.event.remove(a, n, u.handler, B);
                                    r.splice(B--, 1)
                                }
                            }
                        }
                        if (c.isEmptyObject(C)) {
                            if (b = z.handle) b.elem = null;
                            delete z.events;
                            delete z.handle;
                            c.isEmptyObject(z) && c.removeData(a)
                        }
                    }
                }
            }
        },
        trigger: function (a, b, d, f) {
            var e = a.type || a;
            if (!f) {
                a = typeof a === "object" ? a[G] ? a : c.extend(c.Event(e), a) : c.Event(e);
                if (e.indexOf("!") >= 0) {
                    a.type = e = e.slice(0, -1);
                    a.exclusive = true
                }
                if (!d) {
                    a.stopPropagation();
                    c.event.global[e] && c.each(c.cache, function () {
                        this.events && this.events[e] && c.event.trigger(a, b, this.handle.elem)
                    })
                }
                if (!d || d.nodeType === 3 || d.nodeType === 8) return w;
                a.result = w;
                a.target = d;
                b = c.makeArray(b);
                b.unshift(a)
            }
            a.currentTarget = d;
            (f = c.data(d, "handle")) && f.apply(d, b);
            f = d.parentNode || d.ownerDocument;
            try {
                if (!(d && d.nodeName && c.noData[d.nodeName.toLowerCase()])) if (d["on" + e] && d["on" + e].apply(d, b) === false) a.result = false
            } catch (j) {}
            if (!a.isPropagationStopped() && f) c.event.trigger(a, b, f, true);
            else if (!a.isDefaultPrevented()) {
                f = a.target;
                var i, o = c.nodeName(f, "a") && e === "click",
                    k = c.event.special[e] || {};
                if ((!k._default || k._default.call(d, a) === false) && !o && !(f && f.nodeName && c.noData[f.nodeName.toLowerCase()])) {
                    try {
                        if (f[e]) {
                            if (i = f["on" + e]) f["on" + e] = null;
                            c.event.triggered = true;
                            f[e]()
                        }
                    } catch (n) {}
                    if (i) f["on" + e] = i;
                    c.event.triggered = false
                }
            }
        },
        handle: function (a) {
            var b, d, f, e;
            a = arguments[0] = c.event.fix(a || A.event);
            a.currentTarget = this;
            b = a.type.indexOf(".") < 0 && !a.exclusive;
            if (!b) {
                d = a.type.split(".");
                a.type = d.shift();
                f = new RegExp("(^|\\.)" + d.slice(0).sort().join("\\.(?:.*\\.)?") + "(\\.|$)")
            }
            e = c.data(this, "events");
            d = e[a.type];
            if (e && d) {
                d = d.slice(0);
                e = 0;
                for (var j = d.length; e < j; e++) {
                    var i = d[e];
                    if (b || f.test(i.namespace)) {
                        a.handler = i.handler;
                        a.data = i.data;
                        a.handleObj = i;
                        i = i.handler.apply(this, arguments);
                        if (i !== w) {
                            a.result = i;
                            if (i === false) {
                                a.preventDefault();
                                a.stopPropagation()
                            }
                        }
                        if (a.isImmediatePropagationStopped()) break
                    }
                }
            }
            return a.result
        },
        props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
        fix: function (a) {
            if (a[G]) return a;
            var b = a;
            a = c.Event(b);
            for (var d = this.props.length, f; d;) {
                f = this.props[--d];
                a[f] = b[f]
            }
            if (!a.target) a.target = a.srcElement || s;
            if (a.target.nodeType === 3) a.target = a.target.parentNode;
            if (!a.relatedTarget && a.fromElement) a.relatedTarget = a.fromElement === a.target ? a.toElement : a.fromElement;
            if (a.pageX == null && a.clientX != null) {
                b = s.documentElement;
                d = s.body;
                a.pageX = a.clientX + (b && b.scrollLeft || d && d.scrollLeft || 0) - (b && b.clientLeft || d && d.clientLeft || 0);
                a.pageY = a.clientY + (b && b.scrollTop || d && d.scrollTop || 0) - (b && b.clientTop || d && d.clientTop || 0)
            }
            if (!a.which && (a.charCode || a.charCode === 0 ? a.charCode : a.keyCode)) a.which = a.charCode || a.keyCode;
            if (!a.metaKey && a.ctrlKey) a.metaKey = a.ctrlKey;
            if (!a.which && a.button !== w) a.which = a.button & 1 ? 1 : a.button & 2 ? 3 : a.button & 4 ? 2 : 0;
            return a
        },
        guid: 1E8,
        proxy: c.proxy,
        special: {
            ready: {
                setup: c.bindReady,
                teardown: c.noop
            },
            live: {
                add: function (a) {
                    c.event.add(this, a.origType, c.extend({}, a, {
                        handler: oa
                    }))
                },
                remove: function (a) {
                    var b = true,
                        d = a.origType.replace(O, "");
                    c.each(c.data(this, "events").live || [], function () {
                        if (d === this.origType.replace(O, "")) return b = false
                    });
                    b && c.event.remove(this, a.origType, oa)
                }
            },
            beforeunload: {
                setup: function (a, b, d) {
                    if (this.setInterval) this.onbeforeunload = d;
                    return false
                },
                teardown: function (a, b) {
                    if (this.onbeforeunload === b) this.onbeforeunload = null
                }
            }
        }
    };
    var Ca = s.removeEventListener ?
    function (a, b, d) {
        a.removeEventListener(b, d, false)
    } : function (a, b, d) {
        a.detachEvent("on" + b, d)
    };
    c.Event = function (a) {
        if (!this.preventDefault) return new c.Event(a);
        if (a && a.type) {
            this.originalEvent = a;
            this.type = a.type
        } else this.type = a;
        this.timeStamp = J();
        this[G] = true
    };
    c.Event.prototype = {
        preventDefault: function () {
            this.isDefaultPrevented = Z;
            var a = this.originalEvent;
            if (a) {
                a.preventDefault && a.preventDefault();
                a.returnValue = false
            }
        },
        stopPropagation: function () {
            this.isPropagationStopped = Z;
            var a = this.originalEvent;
            if (a) {
                a.stopPropagation && a.stopPropagation();
                a.cancelBubble = true
            }
        },
        stopImmediatePropagation: function () {
            this.isImmediatePropagationStopped = Z;
            this.stopPropagation()
        },
        isDefaultPrevented: Y,
        isPropagationStopped: Y,
        isImmediatePropagationStopped: Y
    };
    var Da = function (a) {
            var b = a.relatedTarget;
            try {
                for (; b && b !== this;) b = b.parentNode;
                if (b !== this) {
                    a.type = a.data;
                    c.event.handle.apply(this, arguments)
                }
            } catch (d) {}
        },
        Ea = function (a) {
            a.type = a.data;
            c.event.handle.apply(this, arguments)
        };
    c.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function (a, b) {
        c.event.special[a] = {
            setup: function (d) {
                c.event.add(this, b, d && d.selector ? Ea : Da, a)
            },
            teardown: function (d) {
                c.event.remove(this, b, d && d.selector ? Ea : Da)
            }
        }
    });
    if (!c.support.submitBubbles) c.event.special.submit = {
        setup: function () {
            if (this.nodeName.toLowerCase() !== "form") {
                c.event.add(this, "click.specialSubmit", function (a) {
                    var b = a.target,
                        d = b.type;
                    if ((d === "submit" || d === "image") && c(b).closest("form").length) return na("submit", this, arguments)
                });
                c.event.add(this, "keypress.specialSubmit", function (a) {
                    var b = a.target,
                        d = b.type;
                    if ((d === "text" || d === "password") && c(b).closest("form").length && a.keyCode === 13) return na("submit", this, arguments)
                })
            } else return false
        },
        teardown: function () {
            c.event.remove(this, ".specialSubmit")
        }
    };
    if (!c.support.changeBubbles) {
        var da = /textarea|input|select/i,
            ea, Fa = function (a) {
                var b = a.type,
                    d = a.value;
                if (b === "radio" || b === "checkbox") d = a.checked;
                else if (b === "select-multiple") d = a.selectedIndex > -1 ? c.map(a.options, function (f) {
                    return f.selected
                }).join("-") : "";
                else if (a.nodeName.toLowerCase() === "select") d = a.selectedIndex;
                return d
            },
            fa = function (a, b) {
                var d = a.target,
                    f, e;
                if (!(!da.test(d.nodeName) || d.readOnly)) {
                    f = c.data(d, "_change_data");
                    e = Fa(d);
                    if (a.type !== "focusout" || d.type !== "radio") c.data(d, "_change_data", e);
                    if (!(f === w || e === f)) if (f != null || e) {
                        a.type = "change";
                        return c.event.trigger(a, b, d)
                    }
                }
            };
        c.event.special.change = {
            filters: {
                focusout: fa,
                click: function (a) {
                    var b = a.target,
                        d = b.type;
                    if (d === "radio" || d === "checkbox" || b.nodeName.toLowerCase() === "select") return fa.call(this, a)
                },
                keydown: function (a) {
                    var b = a.target,
                        d = b.type;
                    if (a.keyCode === 13 && b.nodeName.toLowerCase() !== "textarea" || a.keyCode === 32 && (d === "checkbox" || d === "radio") || d === "select-multiple") return fa.call(this, a)
                },
                beforeactivate: function (a) {
                    a = a.target;
                    c.data(a, "_change_data", Fa(a))
                }
            },
            setup: function () {
                if (this.type === "file") return false;
                for (var a in ea) c.event.add(this, a + ".specialChange", ea[a]);
                return da.test(this.nodeName)
            },
            teardown: function () {
                c.event.remove(this, ".specialChange");
                return da.test(this.nodeName)
            }
        };
        ea = c.event.special.change.filters
    }
    s.addEventListener && c.each({
        focus: "focusin",
        blur: "focusout"
    }, function (a, b) {
        function d(f) {
            f = c.event.fix(f);
            f.type = b;
            return c.event.handle.call(this, f)
        }
        c.event.special[b] = {
            setup: function () {
                this.addEventListener(a, d, true)
            },
            teardown: function () {
                this.removeEventListener(a, d, true)
            }
        }
    });
    c.each(["bind", "one"], function (a, b) {
        c.fn[b] = function (d, f, e) {
            if (typeof d === "object") {
                for (var j in d) this[b](j, f, d[j], e);
                return this
            }
            if (c.isFunction(f)) {
                e = f;
                f = w
            }
            var i = b === "one" ? c.proxy(e, function (k) {
                c(this).unbind(k, i);
                return e.apply(this, arguments)
            }) : e;
            if (d === "unload" && b !== "one") this.one(d, f, e);
            else {
                j = 0;
                for (var o = this.length; j < o; j++) c.event.add(this[j], d, i, f)
            }
            return this
        }
    });
    c.fn.extend({
        unbind: function (a, b) {
            if (typeof a === "object" && !a.preventDefault) for (var d in a) this.unbind(d, a[d]);
            else {
                d = 0;
                for (var f = this.length; d < f; d++) c.event.remove(this[d], a, b)
            }
            return this
        },
        delegate: function (a, b, d, f) {
            return this.live(b, d, f, a)
        },
        undelegate: function (a, b, d) {
            return arguments.length === 0 ? this.unbind("live") : this.die(b, null, d, a)
        },
        trigger: function (a, b) {
            return this.each(function () {
                c.event.trigger(a, b, this)
            })
        },
        triggerHandler: function (a, b) {
            if (this[0]) {
                a = c.Event(a);
                a.preventDefault();
                a.stopPropagation();
                c.event.trigger(a, b, this[0]);
                return a.result
            }
        },
        toggle: function (a) {
            for (var b = arguments, d = 1; d < b.length;) c.proxy(a, b[d++]);
            return this.click(c.proxy(a, function (f) {
                var e = (c.data(this, "lastToggle" + a.guid) || 0) % d;
                c.data(this, "lastToggle" + a.guid, e + 1);
                f.preventDefault();
                return b[e].apply(this, arguments) || false
            }))
        },
        hover: function (a, b) {
            return this.mouseenter(a).mouseleave(b || a)
        }
    });
    var Ga = {
        focus: "focusin",
        blur: "focusout",
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    };
    c.each(["live", "die"], function (a, b) {
        c.fn[b] = function (d, f, e, j) {
            var i, o = 0,
                k, n, r = j || this.selector,
                u = j ? this : c(this.context);
            if (c.isFunction(f)) {
                e = f;
                f = w
            }
            for (d = (d || "").split(" ");
            (i = d[o++]) != null;) {
                j = O.exec(i);
                k = "";
                if (j) {
                    k = j[0];
                    i = i.replace(O, "")
                }
                if (i === "hover") d.push("mouseenter" + k, "mouseleave" + k);
                else {
                    n = i;
                    if (i === "focus" || i === "blur") {
                        d.push(Ga[i] + k);
                        i += k
                    } else i = (Ga[i] || i) + k;
                    b === "live" ? u.each(function () {
                        c.event.add(this, pa(i, r), {
                            data: f,
                            selector: r,
                            handler: e,
                            origType: i,
                            origHandler: e,
                            preType: n
                        })
                    }) : u.unbind(pa(i, r), e)
                }
            }
            return this
        }
    });
    c.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "), function (a, b) {
        c.fn[b] = function (d) {
            return d ? this.bind(b, d) : this.trigger(b)
        };
        if (c.attrFn) c.attrFn[b] = true
    });
    A.attachEvent && !A.addEventListener && A.attachEvent("onunload", function () {
        for (var a in c.cache) if (c.cache[a].handle) try {
            c.event.remove(c.cache[a].handle.elem)
        } catch (b) {}
    });
    (function () {
        function a(g) {
            for (var h = "", l, m = 0; g[m]; m++) {
                l = g[m];
                if (l.nodeType === 3 || l.nodeType === 4) h += l.nodeValue;
                else if (l.nodeType !== 8) h += a(l.childNodes)
            }
            return h
        }
        function b(g, h, l, m, q, p) {
            q = 0;
            for (var v = m.length; q < v; q++) {
                var t = m[q];
                if (t) {
                    t = t[g];
                    for (var y = false; t;) {
                        if (t.sizcache === l) {
                            y = m[t.sizset];
                            break
                        }
                        if (t.nodeType === 1 && !p) {
                            t.sizcache = l;
                            t.sizset = q
                        }
                        if (t.nodeName.toLowerCase() === h) {
                            y = t;
                            break
                        }
                        t = t[g]
                    }
                    m[q] = y
                }
            }
        }
        function d(g, h, l, m, q, p) {
            q = 0;
            for (var v = m.length; q < v; q++) {
                var t = m[q];
                if (t) {
                    t = t[g];
                    for (var y = false; t;) {
                        if (t.sizcache === l) {
                            y = m[t.sizset];
                            break
                        }
                        if (t.nodeType === 1) {
                            if (!p) {
                                t.sizcache = l;
                                t.sizset = q
                            }
                            if (typeof h !== "string") {
                                if (t === h) {
                                    y = true;
                                    break
                                }
                            } else if (k.filter(h, [t]).length > 0) {
                                y = t;
                                break
                            }
                        }
                        t = t[g]
                    }
                    m[q] = y
                }
            }
        }
        var f = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
            e = 0,
            j = Object.prototype.toString,
            i = false,
            o = true;
        [0, 0].sort(function () {
            o = false;
            return 0
        });
        var k = function (g, h, l, m) {
                l = l || [];
                var q = h = h || s;
                if (h.nodeType !== 1 && h.nodeType !== 9) return [];
                if (!g || typeof g !== "string") return l;
                for (var p = [], v, t, y, S, H = true, M = x(h), I = g;
                (f.exec(""), v = f.exec(I)) !== null;) {
                    I = v[3];
                    p.push(v[1]);
                    if (v[2]) {
                        S = v[3];
                        break
                    }
                }
                if (p.length > 1 && r.exec(g)) if (p.length === 2 && n.relative[p[0]]) t = ga(p[0] + p[1], h);
                else for (t = n.relative[p[0]] ? [h] : k(p.shift(), h); p.length;) {
                    g = p.shift();
                    if (n.relative[g]) g += p.shift();
                    t = ga(g, t)
                } else {
                    if (!m && p.length > 1 && h.nodeType === 9 && !M && n.match.ID.test(p[0]) && !n.match.ID.test(p[p.length - 1])) {
                        v = k.find(p.shift(), h, M);
                        h = v.expr ? k.filter(v.expr, v.set)[0] : v.set[0]
                    }
                    if (h) {
                        v = m ? {
                            expr: p.pop(),
                            set: z(m)
                        } : k.find(p.pop(), p.length === 1 && (p[0] === "~" || p[0] === "+") && h.parentNode ? h.parentNode : h, M);
                        t = v.expr ? k.filter(v.expr, v.set) : v.set;
                        if (p.length > 0) y = z(t);
                        else H = false;
                        for (; p.length;) {
                            var D = p.pop();
                            v = D;
                            if (n.relative[D]) v = p.pop();
                            else D = "";
                            if (v == null) v = h;
                            n.relative[D](y, v, M)
                        }
                    } else y = []
                }
                y || (y = t);
                y || k.error(D || g);
                if (j.call(y) === "[object Array]") if (H) if (h && h.nodeType === 1) for (g = 0; y[g] != null; g++) {
                    if (y[g] && (y[g] === true || y[g].nodeType === 1 && E(h, y[g]))) l.push(t[g])
                } else for (g = 0; y[g] != null; g++) y[g] && y[g].nodeType === 1 && l.push(t[g]);
                else l.push.apply(l, y);
                else z(y, l);
                if (S) {
                    k(S, q, l, m);
                    k.uniqueSort(l)
                }
                return l
            };
        k.uniqueSort = function (g) {
            if (B) {
                i = o;
                g.sort(B);
                if (i) for (var h = 1; h < g.length; h++) g[h] === g[h - 1] && g.splice(h--, 1)
            }
            return g
        };
        k.matches = function (g, h) {
            return k(g, null, null, h)
        };
        k.find = function (g, h, l) {
            var m, q;
            if (!g) return [];
            for (var p = 0, v = n.order.length; p < v; p++) {
                var t = n.order[p];
                if (q = n.leftMatch[t].exec(g)) {
                    var y = q[1];
                    q.splice(1, 1);
                    if (y.substr(y.length - 1) !== "\\") {
                        q[1] = (q[1] || "").replace(/\\/g, "");
                        m = n.find[t](q, h, l);
                        if (m != null) {
                            g = g.replace(n.match[t], "");
                            break
                        }
                    }
                }
            }
            m || (m = h.getElementsByTagName("*"));
            return {
                set: m,
                expr: g
            }
        };
        k.filter = function (g, h, l, m) {
            for (var q = g, p = [], v = h, t, y, S = h && h[0] && x(h[0]); g && h.length;) {
                for (var H in n.filter) if ((t = n.leftMatch[H].exec(g)) != null && t[2]) {
                    var M = n.filter[H],
                        I, D;
                    D = t[1];
                    y = false;
                    t.splice(1, 1);
                    if (D.substr(D.length - 1) !== "\\") {
                        if (v === p) p = [];
                        if (n.preFilter[H]) if (t = n.preFilter[H](t, v, l, p, m, S)) {
                            if (t === true) continue
                        } else y = I = true;
                        if (t) for (var U = 0;
                        (D = v[U]) != null; U++) if (D) {
                            I = M(D, t, U, v);
                            var Ha = m ^ !! I;
                            if (l && I != null) if (Ha) y = true;
                            else v[U] = false;
                            else if (Ha) {
                                p.push(D);
                                y = true
                            }
                        }
                        if (I !== w) {
                            l || (v = p);
                            g = g.replace(n.match[H], "");
                            if (!y) return [];
                            break
                        }
                    }
                }
                if (g === q) if (y == null) k.error(g);
                else break;
                q = g
            }
            return v
        };
        k.error = function (g) {
            throw "Syntax error, unrecognized expression: " + g;
        };
        var n = k.selectors = {
            order: ["ID", "NAME", "TAG"],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                "class": "className",
                "for": "htmlFor"
            },
            attrHandle: {
                href: function (g) {
                    return g.getAttribute("href")
                }
            },
            relative: {
                "+": function (g, h) {
                    var l = typeof h === "string",
                        m = l && !/\W/.test(h);
                    l = l && !m;
                    if (m) h = h.toLowerCase();
                    m = 0;
                    for (var q = g.length, p; m < q; m++) if (p = g[m]) {
                        for (;
                        (p = p.previousSibling) && p.nodeType !== 1;);
                        g[m] = l || p && p.nodeName.toLowerCase() === h ? p || false : p === h
                    }
                    l && k.filter(h, g, true)
                },
                ">": function (g, h) {
                    var l = typeof h === "string";
                    if (l && !/\W/.test(h)) {
                        h = h.toLowerCase();
                        for (var m = 0, q = g.length; m < q; m++) {
                            var p = g[m];
                            if (p) {
                                l = p.parentNode;
                                g[m] = l.nodeName.toLowerCase() === h ? l : false
                            }
                        }
                    } else {
                        m = 0;
                        for (q = g.length; m < q; m++) if (p = g[m]) g[m] = l ? p.parentNode : p.parentNode === h;
                        l && k.filter(h, g, true)
                    }
                },
                "": function (g, h, l) {
                    var m = e++,
                        q = d;
                    if (typeof h === "string" && !/\W/.test(h)) {
                        var p = h = h.toLowerCase();
                        q = b
                    }
                    q("parentNode", h, m, g, p, l)
                },
                "~": function (g, h, l) {
                    var m = e++,
                        q = d;
                    if (typeof h === "string" && !/\W/.test(h)) {
                        var p = h = h.toLowerCase();
                        q = b
                    }
                    q("previousSibling", h, m, g, p, l)
                }
            },
            find: {
                ID: function (g, h, l) {
                    if (typeof h.getElementById !== "undefined" && !l) return (g = h.getElementById(g[1])) ? [g] : []
                },
                NAME: function (g, h) {
                    if (typeof h.getElementsByName !== "undefined") {
                        var l = [];
                        h = h.getElementsByName(g[1]);
                        for (var m = 0, q = h.length; m < q; m++) h[m].getAttribute("name") === g[1] && l.push(h[m]);
                        return l.length === 0 ? null : l
                    }
                },
                TAG: function (g, h) {
                    return h.getElementsByTagName(g[1])
                }
            },
            preFilter: {
                CLASS: function (g, h, l, m, q, p) {
                    g = " " + g[1].replace(/\\/g, "") + " ";
                    if (p) return g;
                    p = 0;
                    for (var v;
                    (v = h[p]) != null; p++) if (v) if (q ^ (v.className && (" " + v.className + " ").replace(/[\t\n]/g, " ").indexOf(g) >= 0)) l || m.push(v);
                    else if (l) h[p] = false;
                    return false
                },
                ID: function (g) {
                    return g[1].replace(/\\/g, "")
                },
                TAG: function (g) {
                    return g[1].toLowerCase()
                },
                CHILD: function (g) {
                    if (g[1] === "nth") {
                        var h = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(g[2] === "even" && "2n" || g[2] === "odd" && "2n+1" || !/\D/.test(g[2]) && "0n+" + g[2] || g[2]);
                        g[2] = h[1] + (h[2] || 1) - 0;
                        g[3] = h[3] - 0
                    }
                    g[0] = e++;
                    return g
                },
                ATTR: function (g, h, l, m, q, p) {
                    h = g[1].replace(/\\/g, "");
                    if (!p && n.attrMap[h]) g[1] = n.attrMap[h];
                    if (g[2] === "~=") g[4] = " " + g[4] + " ";
                    return g
                },
                PSEUDO: function (g, h, l, m, q) {
                    if (g[1] === "not") if ((f.exec(g[3]) || "").length > 1 || /^\w/.test(g[3])) g[3] = k(g[3], null, null, h);
                    else {
                        g = k.filter(g[3], h, l, true ^ q);
                        l || m.push.apply(m, g);
                        return false
                    } else if (n.match.POS.test(g[0]) || n.match.CHILD.test(g[0])) return true;
                    return g
                },
                POS: function (g) {
                    g.unshift(true);
                    return g
                }
            },
            filters: {
                enabled: function (g) {
                    return g.disabled === false && g.type !== "hidden"
                },
                disabled: function (g) {
                    return g.disabled === true
                },
                checked: function (g) {
                    return g.checked === true
                },
                selected: function (g) {
                    return g.selected === true
                },
                parent: function (g) {
                    return !!g.firstChild
                },
                empty: function (g) {
                    return !g.firstChild
                },
                has: function (g, h, l) {
                    return !!k(l[3], g).length
                },
                header: function (g) {
                    return /h\d/i.test(g.nodeName)
                },
                text: function (g) {
                    return "text" === g.type
                },
                radio: function (g) {
                    return "radio" === g.type
                },
                checkbox: function (g) {
                    return "checkbox" === g.type
                },
                file: function (g) {
                    return "file" === g.type
                },
                password: function (g) {
                    return "password" === g.type
                },
                submit: function (g) {
                    return "submit" === g.type
                },
                image: function (g) {
                    return "image" === g.type
                },
                reset: function (g) {
                    return "reset" === g.type
                },
                button: function (g) {
                    return "button" === g.type || g.nodeName.toLowerCase() === "button"
                },
                input: function (g) {
                    return /input|select|textarea|button/i.test(g.nodeName)
                }
            },
            setFilters: {
                first: function (g, h) {
                    return h === 0
                },
                last: function (g, h, l, m) {
                    return h === m.length - 1
                },
                even: function (g, h) {
                    return h % 2 === 0
                },
                odd: function (g, h) {
                    return h % 2 === 1
                },
                lt: function (g, h, l) {
                    return h < l[3] - 0
                },
                gt: function (g, h, l) {
                    return h > l[3] - 0
                },
                nth: function (g, h, l) {
                    return l[3] - 0 === h
                },
                eq: function (g, h, l) {
                    return l[3] - 0 === h
                }
            },
            filter: {
                PSEUDO: function (g, h, l, m) {
                    var q = h[1],
                        p = n.filters[q];
                    if (p) return p(g, l, h, m);
                    else if (q === "contains") return (g.textContent || g.innerText || a([g]) || "").indexOf(h[3]) >= 0;
                    else if (q === "not") {
                        h = h[3];
                        l = 0;
                        for (m = h.length; l < m; l++) if (h[l] === g) return false;
                        return true
                    } else k.error("Syntax error, unrecognized expression: " + q)
                },
                CHILD: function (g, h) {
                    var l = h[1],
                        m = g;
                    switch (l) {
                    case "only":
                    case "first":
                        for (; m = m.previousSibling;) if (m.nodeType === 1) return false;
                        if (l === "first") return true;
                        m = g;
                    case "last":
                        for (; m = m.nextSibling;) if (m.nodeType === 1) return false;
                        return true;
                    case "nth":
                        l = h[2];
                        var q = h[3];
                        if (l === 1 && q === 0) return true;
                        h = h[0];
                        var p = g.parentNode;
                        if (p && (p.sizcache !== h || !g.nodeIndex)) {
                            var v = 0;
                            for (m = p.firstChild; m; m = m.nextSibling) if (m.nodeType === 1) m.nodeIndex = ++v;
                            p.sizcache = h
                        }
                        g = g.nodeIndex - q;
                        return l === 0 ? g === 0 : g % l === 0 && g / l >= 0
                    }
                },
                ID: function (g, h) {
                    return g.nodeType === 1 && g.getAttribute("id") === h
                },
                TAG: function (g, h) {
                    return h === "*" && g.nodeType === 1 || g.nodeName.toLowerCase() === h
                },
                CLASS: function (g, h) {
                    return (" " + (g.className || g.getAttribute("class")) + " ").indexOf(h) > -1
                },
                ATTR: function (g, h) {
                    var l = h[1];
                    g = n.attrHandle[l] ? n.attrHandle[l](g) : g[l] != null ? g[l] : g.getAttribute(l);
                    l = g + "";
                    var m = h[2];
                    h = h[4];
                    return g == null ? m === "!=" : m === "=" ? l === h : m === "*=" ? l.indexOf(h) >= 0 : m === "~=" ? (" " + l + " ").indexOf(h) >= 0 : !h ? l && g !== false : m === "!=" ? l !== h : m === "^=" ? l.indexOf(h) === 0 : m === "$=" ? l.substr(l.length - h.length) === h : m === "|=" ? l === h || l.substr(0, h.length + 1) === h + "-" : false
                },
                POS: function (g, h, l, m) {
                    var q = n.setFilters[h[2]];
                    if (q) return q(g, l, h, m)
                }
            }
        },
            r = n.match.POS;
        for (var u in n.match) {
            n.match[u] = new RegExp(n.match[u].source + /(?![^\[]*\])(?![^\(]*\))/.source);
            n.leftMatch[u] = new RegExp(/(^(?:.|\r|\n)*?)/.source + n.match[u].source.replace(/\\(\d+)/g, function (g, h) {
                return "\\" + (h - 0 + 1)
            }))
        }
        var z = function (g, h) {
                g = Array.prototype.slice.call(g, 0);
                if (h) {
                    h.push.apply(h, g);
                    return h
                }
                return g
            };
        try {
            Array.prototype.slice.call(s.documentElement.childNodes, 0)
        } catch (C) {
            z = function (g, h) {
                h = h || [];
                if (j.call(g) === "[object Array]") Array.prototype.push.apply(h, g);
                else if (typeof g.length === "number") for (var l = 0, m = g.length; l < m; l++) h.push(g[l]);
                else for (l = 0; g[l]; l++) h.push(g[l]);
                return h
            }
        }
        var B;
        if (s.documentElement.compareDocumentPosition) B = function (g, h) {
            if (!g.compareDocumentPosition || !h.compareDocumentPosition) {
                if (g == h) i = true;
                return g.compareDocumentPosition ? -1 : 1
            }
            g = g.compareDocumentPosition(h) & 4 ? -1 : g === h ? 0 : 1;
            if (g === 0) i = true;
            return g
        };
        else if ("sourceIndex" in s.documentElement) B = function (g, h) {
            if (!g.sourceIndex || !h.sourceIndex) {
                if (g == h) i = true;
                return g.sourceIndex ? -1 : 1
            }
            g = g.sourceIndex - h.sourceIndex;
            if (g === 0) i = true;
            return g
        };
        else if (s.createRange) B = function (g, h) {
            if (!g.ownerDocument || !h.ownerDocument) {
                if (g == h) i = true;
                return g.ownerDocument ? -1 : 1
            }
            var l = g.ownerDocument.createRange(),
                m = h.ownerDocument.createRange();
            l.setStart(g, 0);
            l.setEnd(g, 0);
            m.setStart(h, 0);
            m.setEnd(h, 0);
            g = l.compareBoundaryPoints(Range.START_TO_END, m);
            if (g === 0) i = true;
            return g
        };
        (function () {
            var g = s.createElement("div"),
                h = "script" + (new Date).getTime();
            g.innerHTML = "<a name='" + h + "'/>";
            var l = s.documentElement;
            l.insertBefore(g, l.firstChild);
            if (s.getElementById(h)) {
                n.find.ID = function (m, q, p) {
                    if (typeof q.getElementById !== "undefined" && !p) return (q = q.getElementById(m[1])) ? q.id === m[1] || typeof q.getAttributeNode !== "undefined" && q.getAttributeNode("id").nodeValue === m[1] ? [q] : w : []
                };
                n.filter.ID = function (m, q) {
                    var p = typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id");
                    return m.nodeType === 1 && p && p.nodeValue === q
                }
            }
            l.removeChild(g);
            l = g = null
        })();
        (function () {
            var g = s.createElement("div");
            g.appendChild(s.createComment(""));
            if (g.getElementsByTagName("*").length > 0) n.find.TAG = function (h, l) {
                l = l.getElementsByTagName(h[1]);
                if (h[1] === "*") {
                    h = [];
                    for (var m = 0; l[m]; m++) l[m].nodeType === 1 && h.push(l[m]);
                    l = h
                }
                return l
            };
            g.innerHTML = "<a href='#'></a>";
            if (g.firstChild && typeof g.firstChild.getAttribute !== "undefined" && g.firstChild.getAttribute("href") !== "#") n.attrHandle.href = function (h) {
                return h.getAttribute("href", 2)
            };
            g = null
        })();
        s.querySelectorAll &&
        function () {
            var g = k,
                h = s.createElement("div");
            h.innerHTML = "<p class='TEST'></p>";
            if (!(h.querySelectorAll && h.querySelectorAll(".TEST").length === 0)) {
                k = function (m, q, p, v) {
                    q = q || s;
                    if (!v && q.nodeType === 9 && !x(q)) try {
                        return z(q.querySelectorAll(m), p)
                    } catch (t) {}
                    return g(m, q, p, v)
                };
                for (var l in g) k[l] = g[l];
                h = null
            }
        }();
        (function () {
            var g = s.createElement("div");
            g.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!(!g.getElementsByClassName || g.getElementsByClassName("e").length === 0)) {
                g.lastChild.className = "e";
                if (g.getElementsByClassName("e").length !== 1) {
                    n.order.splice(1, 0, "CLASS");
                    n.find.CLASS = function (h, l, m) {
                        if (typeof l.getElementsByClassName !== "undefined" && !m) return l.getElementsByClassName(h[1])
                    };
                    g = null
                }
            }
        })();
        var E = s.compareDocumentPosition ?
        function (g, h) {
            return !!(g.compareDocumentPosition(h) & 16)
        } : function (g, h) {
            return g !== h && (g.contains ? g.contains(h) : true)
        }, x = function (g) {
            return (g = (g ? g.ownerDocument || g : 0).documentElement) ? g.nodeName !== "HTML" : false
        }, ga = function (g, h) {
            var l = [],
                m = "",
                q;
            for (h = h.nodeType ? [h] : h; q = n.match.PSEUDO.exec(g);) {
                m += q[0];
                g = g.replace(n.match.PSEUDO, "")
            }
            g = n.relative[g] ? g + "*" : g;
            q = 0;
            for (var p = h.length; q < p; q++) k(g, h[q], l);
            return k.filter(m, l)
        };
        c.find = k;
        c.expr = k.selectors;
        c.expr[":"] = c.expr.filters;
        c.unique = k.uniqueSort;
        c.text = a;
        c.isXMLDoc = x;
        c.contains = E
    })();
    var eb = /Until$/,
        fb = /^(?:parents|prevUntil|prevAll)/,
        gb = /,/;
    R = Array.prototype.slice;
    var Ia = function (a, b, d) {
            if (c.isFunction(b)) return c.grep(a, function (e, j) {
                return !!b.call(e, j, e) === d
            });
            else if (b.nodeType) return c.grep(a, function (e) {
                return e === b === d
            });
            else if (typeof b === "string") {
                var f = c.grep(a, function (e) {
                    return e.nodeType === 1
                });
                if (Ua.test(b)) return c.filter(b, f, !d);
                else b = c.filter(b, f)
            }
            return c.grep(a, function (e) {
                return c.inArray(e, b) >= 0 === d
            })
        };
    c.fn.extend({
        find: function (a) {
            for (var b = this.pushStack("", "find", a), d = 0, f = 0, e = this.length; f < e; f++) {
                d = b.length;
                c.find(a, this[f], b);
                if (f > 0) for (var j = d; j < b.length; j++) for (var i = 0; i < d; i++) if (b[i] === b[j]) {
                    b.splice(j--, 1);
                    break
                }
            }
            return b
        },
        has: function (a) {
            var b = c(a);
            return this.filter(function () {
                for (var d = 0, f = b.length; d < f; d++) if (c.contains(this, b[d])) return true
            })
        },
        not: function (a) {
            return this.pushStack(Ia(this, a, false), "not", a)
        },
        filter: function (a) {
            return this.pushStack(Ia(this, a, true), "filter", a)
        },
        is: function (a) {
            return !!a && c.filter(a, this).length > 0
        },
        closest: function (a, b) {
            if (c.isArray(a)) {
                var d = [],
                    f = this[0],
                    e, j = {},
                    i;
                if (f && a.length) {
                    e = 0;
                    for (var o = a.length; e < o; e++) {
                        i = a[e];
                        j[i] || (j[i] = c.expr.match.POS.test(i) ? c(i, b || this.context) : i)
                    }
                    for (; f && f.ownerDocument && f !== b;) {
                        for (i in j) {
                            e = j[i];
                            if (e.jquery ? e.index(f) > -1 : c(f).is(e)) {
                                d.push({
                                    selector: i,
                                    elem: f
                                });
                                delete j[i]
                            }
                        }
                        f = f.parentNode
                    }
                }
                return d
            }
            var k = c.expr.match.POS.test(a) ? c(a, b || this.context) : null;
            return this.map(function (n, r) {
                for (; r && r.ownerDocument && r !== b;) {
                    if (k ? k.index(r) > -1 : c(r).is(a)) return r;
                    r = r.parentNode
                }
                return null
            })
        },
        index: function (a) {
            if (!a || typeof a === "string") return c.inArray(this[0], a ? c(a) : this.parent().children());
            return c.inArray(a.jquery ? a[0] : a, this)
        },
        add: function (a, b) {
            a = typeof a === "string" ? c(a, b || this.context) : c.makeArray(a);
            b = c.merge(this.get(), a);
            return this.pushStack(qa(a[0]) || qa(b[0]) ? b : c.unique(b))
        },
        andSelf: function () {
            return this.add(this.prevObject)
        }
    });
    c.each({
        parent: function (a) {
            return (a = a.parentNode) && a.nodeType !== 11 ? a : null
        },
        parents: function (a) {
            return c.dir(a, "parentNode")
        },
        parentsUntil: function (a, b, d) {
            return c.dir(a, "parentNode", d)
        },
        next: function (a) {
            return c.nth(a, 2, "nextSibling")
        },
        prev: function (a) {
            return c.nth(a, 2, "previousSibling")
        },
        nextAll: function (a) {
            return c.dir(a, "nextSibling")
        },
        prevAll: function (a) {
            return c.dir(a, "previousSibling")
        },
        nextUntil: function (a, b, d) {
            return c.dir(a, "nextSibling", d)
        },
        prevUntil: function (a, b, d) {
            return c.dir(a, "previousSibling", d)
        },
        siblings: function (a) {
            return c.sibling(a.parentNode.firstChild, a)
        },
        children: function (a) {
            return c.sibling(a.firstChild)
        },
        contents: function (a) {
            return c.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : c.makeArray(a.childNodes)
        }
    }, function (a, b) {
        c.fn[a] = function (d, f) {
            var e = c.map(this, b, d);
            eb.test(a) || (f = d);
            if (f && typeof f === "string") e = c.filter(f, e);
            e = this.length > 1 ? c.unique(e) : e;
            if ((this.length > 1 || gb.test(f)) && fb.test(a)) e = e.reverse();
            return this.pushStack(e, a, R.call(arguments).join(","))
        }
    });
    c.extend({
        filter: function (a, b, d) {
            if (d) a = ":not(" + a + ")";
            return c.find.matches(a, b)
        },
        dir: function (a, b, d) {
            var f = [];
            for (a = a[b]; a && a.nodeType !== 9 && (d === w || a.nodeType !== 1 || !c(a).is(d));) {
                a.nodeType === 1 && f.push(a);
                a = a[b]
            }
            return f
        },
        nth: function (a, b, d) {
            b = b || 1;
            for (var f = 0; a; a = a[d]) if (a.nodeType === 1 && ++f === b) break;
            return a
        },
        sibling: function (a, b) {
            for (var d = []; a; a = a.nextSibling) a.nodeType === 1 && a !== b && d.push(a);
            return d
        }
    });
    var Ja = / jQuery\d+="(?:\d+|null)"/g,
        V = /^\s+/,
        Ka = /(<([\w:]+)[^>]*?)\/>/g,
        hb = /^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i,
        La = /<([\w:]+)/,
        ib = /<tbody/i,
        jb = /<|&#?\w+;/,
        ta = /<script|<object|<embed|<option|<style/i,
        ua = /checked\s*(?:[^=]|=\s*.checked.)/i,
        Ma = function (a, b, d) {
            return hb.test(d) ? a : b + "></" + d + ">"
        },
        F = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            area: [1, "<map>", "</map>"],
            _default: [0, "", ""]
        };
    F.optgroup = F.option;
    F.tbody = F.tfoot = F.colgroup = F.caption = F.thead;
    F.th = F.td;
    if (!c.support.htmlSerialize) F._default = [1, "div<div>", "</div>"];
    c.fn.extend({
        text: function (a) {
            if (c.isFunction(a)) return this.each(function (b) {
                var d = c(this);
                d.text(a.call(this, b, d.text()))
            });
            if (typeof a !== "object" && a !== w) return this.empty().append((this[0] && this[0].ownerDocument || s).createTextNode(a));
            return c.text(this)
        },
        wrapAll: function (a) {
            if (c.isFunction(a)) return this.each(function (d) {
                c(this).wrapAll(a.call(this, d))
            });
            if (this[0]) {
                var b = c(a, this[0].ownerDocument).eq(0).clone(true);
                this[0].parentNode && b.insertBefore(this[0]);
                b.map(function () {
                    for (var d = this; d.firstChild && d.firstChild.nodeType === 1;) d = d.firstChild;
                    return d
                }).append(this)
            }
            return this
        },
        wrapInner: function (a) {
            if (c.isFunction(a)) return this.each(function (b) {
                c(this).wrapInner(a.call(this, b))
            });
            return this.each(function () {
                var b = c(this),
                    d = b.contents();
                d.length ? d.wrapAll(a) : b.append(a)
            })
        },
        wrap: function (a) {
            return this.each(function () {
                c(this).wrapAll(a)
            })
        },
        unwrap: function () {
            return this.parent().each(function () {
                c.nodeName(this, "body") || c(this).replaceWith(this.childNodes)
            }).end()
        },
        append: function () {
            return this.domManip(arguments, true, function (a) {
                this.nodeType === 1 && this.appendChild(a)
            })
        },
        prepend: function () {
            return this.domManip(arguments, true, function (a) {
                this.nodeType === 1 && this.insertBefore(a, this.firstChild)
            })
        },
        before: function () {
            if (this[0] && this[0].parentNode) return this.domManip(arguments, false, function (b) {
                this.parentNode.insertBefore(b, this)
            });
            else if (arguments.length) {
                var a = c(arguments[0]);
                a.push.apply(a, this.toArray());
                return this.pushStack(a, "before", arguments)
            }
        },
        after: function () {
            if (this[0] && this[0].parentNode) return this.domManip(arguments, false, function (b) {
                this.parentNode.insertBefore(b, this.nextSibling)
            });
            else if (arguments.length) {
                var a = this.pushStack(this, "after", arguments);
                a.push.apply(a, c(arguments[0]).toArray());
                return a
            }
        },
        remove: function (a, b) {
            for (var d = 0, f;
            (f = this[d]) != null; d++) if (!a || c.filter(a, [f]).length) {
                if (!b && f.nodeType === 1) {
                    c.cleanData(f.getElementsByTagName("*"));
                    c.cleanData([f])
                }
                f.parentNode && f.parentNode.removeChild(f)
            }
            return this
        },
        empty: function () {
            for (var a = 0, b;
            (b = this[a]) != null; a++) for (b.nodeType === 1 && c.cleanData(b.getElementsByTagName("*")); b.firstChild;) b.removeChild(b.firstChild);
            return this
        },
        clone: function (a) {
            var b = this.map(function () {
                if (!c.support.noCloneEvent && !c.isXMLDoc(this)) {
                    var d = this.outerHTML,
                        f = this.ownerDocument;
                    if (!d) {
                        d = f.createElement("div");
                        d.appendChild(this.cloneNode(true));
                        d = d.innerHTML
                    }
                    return c.clean([d.replace(Ja, "").replace(/=([^="'>\s]+\/)>/g, '="$1">').replace(V, "")], f)[0]
                } else return this.cloneNode(true)
            });
            if (a === true) {
                ra(this, b);
                ra(this.find("*"), b.find("*"))
            }
            return b
        },
        html: function (a) {
            if (a === w) return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(Ja, "") : null;
            else if (typeof a === "string" && !ta.test(a) && (c.support.leadingWhitespace || !V.test(a)) && !F[(La.exec(a) || ["", ""])[1].toLowerCase()]) {
                a = a.replace(Ka, Ma);
                try {
                    for (var b = 0, d = this.length; b < d; b++) if (this[b].nodeType === 1) {
                        c.cleanData(this[b].getElementsByTagName("*"));
                        this[b].innerHTML = a
                    }
                } catch (f) {
                    this.empty().append(a)
                }
            } else c.isFunction(a) ? this.each(function (e) {
                var j = c(this),
                    i = j.html();
                j.empty().append(function () {
                    return a.call(this, e, i)
                })
            }) : this.empty().append(a);
            return this
        },
        replaceWith: function (a) {
            if (this[0] && this[0].parentNode) {
                if (c.isFunction(a)) return this.each(function (b) {
                    var d = c(this),
                        f = d.html();
                    d.replaceWith(a.call(this, b, f))
                });
                if (typeof a !== "string") a = c(a).detach();
                return this.each(function () {
                    var b = this.nextSibling,
                        d = this.parentNode;
                    c(this).remove();
                    b ? c(b).before(a) : c(d).append(a)
                })
            } else return this.pushStack(c(c.isFunction(a) ? a() : a), "replaceWith", a)
        },
        detach: function (a) {
            return this.remove(a, true)
        },
        domManip: function (a, b, d) {
            function f(u) {
                return c.nodeName(u, "table") ? u.getElementsByTagName("tbody")[0] || u.appendChild(u.ownerDocument.createElement("tbody")) : u
            }
            var e, j, i = a[0],
                o = [],
                k;
            if (!c.support.checkClone && arguments.length === 3 && typeof i === "string" && ua.test(i)) return this.each(function () {
                c(this).domManip(a, b, d, true)
            });
            if (c.isFunction(i)) return this.each(function (u) {
                var z = c(this);
                a[0] = i.call(this, u, b ? z.html() : w);
                z.domManip(a, b, d)
            });
            if (this[0]) {
                e = i && i.parentNode;
                e = c.support.parentNode && e && e.nodeType === 11 && e.childNodes.length === this.length ? {
                    fragment: e
                } : sa(a, this, o);
                k = e.fragment;
                if (j = k.childNodes.length === 1 ? (k = k.firstChild) : k.firstChild) {
                    b = b && c.nodeName(j, "tr");
                    for (var n = 0, r = this.length; n < r; n++) d.call(b ? f(this[n], j) : this[n], n > 0 || e.cacheable || this.length > 1 ? k.cloneNode(true) : k)
                }
                o.length && c.each(o, Qa)
            }
            return this
        }
    });
    c.fragments = {};
    c.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (a, b) {
        c.fn[a] = function (d) {
            var f = [];
            d = c(d);
            var e = this.length === 1 && this[0].parentNode;
            if (e && e.nodeType === 11 && e.childNodes.length === 1 && d.length === 1) {
                d[b](this[0]);
                return this
            } else {
                e = 0;
                for (var j = d.length; e < j; e++) {
                    var i = (e > 0 ? this.clone(true) : this).get();
                    c.fn[b].apply(c(d[e]), i);
                    f = f.concat(i)
                }
                return this.pushStack(f, a, d.selector)
            }
        }
    });
    c.extend({
        clean: function (a, b, d, f) {
            b = b || s;
            if (typeof b.createElement === "undefined") b = b.ownerDocument || b[0] && b[0].ownerDocument || s;
            for (var e = [], j = 0, i;
            (i = a[j]) != null; j++) {
                if (typeof i === "number") i += "";
                if (i) {
                    if (typeof i === "string" && !jb.test(i)) i = b.createTextNode(i);
                    else if (typeof i === "string") {
                        i = i.replace(Ka, Ma);
                        var o = (La.exec(i) || ["", ""])[1].toLowerCase(),
                            k = F[o] || F._default,
                            n = k[0],
                            r = b.createElement("div");
                        for (r.innerHTML = k[1] + i + k[2]; n--;) r = r.lastChild;
                        if (!c.support.tbody) {
                            n = ib.test(i);
                            o = o === "table" && !n ? r.firstChild && r.firstChild.childNodes : k[1] === "<table>" && !n ? r.childNodes : [];
                            for (k = o.length - 1; k >= 0; --k) c.nodeName(o[k], "tbody") && !o[k].childNodes.length && o[k].parentNode.removeChild(o[k])
                        }!c.support.leadingWhitespace && V.test(i) && r.insertBefore(b.createTextNode(V.exec(i)[0]), r.firstChild);
                        i = r.childNodes
                    }
                    if (i.nodeType) e.push(i);
                    else e = c.merge(e, i)
                }
            }
            if (d) for (j = 0; e[j]; j++) if (f && c.nodeName(e[j], "script") && (!e[j].type || e[j].type.toLowerCase() === "text/javascript")) f.push(e[j].parentNode ? e[j].parentNode.removeChild(e[j]) : e[j]);
            else {
                e[j].nodeType === 1 && e.splice.apply(e, [j + 1, 0].concat(c.makeArray(e[j].getElementsByTagName("script"))));
                d.appendChild(e[j])
            }
            return e
        },
        cleanData: function (a) {
            for (var b, d, f = c.cache, e = c.event.special, j = c.support.deleteExpando, i = 0, o;
            (o = a[i]) != null; i++) if (d = o[c.expando]) {
                b = f[d];
                if (b.events) for (var k in b.events) e[k] ? c.event.remove(o, k) : Ca(o, k, b.handle);
                if (j) delete o[c.expando];
                else o.removeAttribute && o.removeAttribute(c.expando);
                delete f[d]
            }
        }
    });
    var kb = /z-?index|font-?weight|opacity|zoom|line-?height/i,
        Na = /alpha\([^)]*\)/,
        Oa = /opacity=([^)]*)/,
        ha = /float/i,
        ia = /-([a-z])/ig,
        lb = /([A-Z])/g,
        mb = /^-?\d+(?:px)?$/i,
        nb = /^-?\d/,
        ob = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        pb = ["Left", "Right"],
        qb = ["Top", "Bottom"],
        rb = s.defaultView && s.defaultView.getComputedStyle,
        Pa = c.support.cssFloat ? "cssFloat" : "styleFloat",
        ja = function (a, b) {
            return b.toUpperCase()
        };
    c.fn.css = function (a, b) {
        return X(this, a, b, true, function (d, f, e) {
            if (e === w) return c.curCSS(d, f);
            if (typeof e === "number" && !kb.test(f)) e += "px";
            c.style(d, f, e)
        })
    };
    c.extend({
        style: function (a, b, d) {
            if (!a || a.nodeType === 3 || a.nodeType === 8) return w;
            if ((b === "width" || b === "height") && parseFloat(d) < 0) d = w;
            var f = a.style || a,
                e = d !== w;
            if (!c.support.opacity && b === "opacity") {
                if (e) {
                    f.zoom = 1;
                    b = parseInt(d, 10) + "" === "NaN" ? "" : "alpha(opacity=" + d * 100 + ")";
                    a = f.filter || c.curCSS(a, "filter") || "";
                    f.filter = Na.test(a) ? a.replace(Na, b) : b
                }
                return f.filter && f.filter.indexOf("opacity=") >= 0 ? parseFloat(Oa.exec(f.filter)[1]) / 100 + "" : ""
            }
            if (ha.test(b)) b = Pa;
            b = b.replace(ia, ja);
            if (e) f[b] = d;
            return f[b]
        },
        css: function (a, b, d, f) {
            if (b === "width" || b === "height") {
                var e, j = b === "width" ? pb : qb;

                function i() {
                    e = b === "width" ? a.offsetWidth : a.offsetHeight;
                    f !== "border" && c.each(j, function () {
                        f || (e -= parseFloat(c.curCSS(a, "padding" + this, true)) || 0);
                        if (f === "margin") e += parseFloat(c.curCSS(a, "margin" + this, true)) || 0;
                        else e -= parseFloat(c.curCSS(a, "border" + this + "Width", true)) || 0
                    })
                }
                a.offsetWidth !== 0 ? i() : c.swap(a, ob, i);
                return Math.max(0, Math.round(e))
            }
            return c.curCSS(a, b, d)
        },
        curCSS: function (a, b, d) {
            var f, e = a.style;
            if (!c.support.opacity && b === "opacity" && a.currentStyle) {
                f = Oa.test(a.currentStyle.filter || "") ? parseFloat(RegExp.$1) / 100 + "" : "";
                return f === "" ? "1" : f
            }
            if (ha.test(b)) b = Pa;
            if (!d && e && e[b]) f = e[b];
            else if (rb) {
                if (ha.test(b)) b = "float";
                b = b.replace(lb, "-$1").toLowerCase();
                e = a.ownerDocument.defaultView;
                if (!e) return null;
                if (a = e.getComputedStyle(a, null)) f = a.getPropertyValue(b);
                if (b === "opacity" && f === "") f = "1"
            } else if (a.currentStyle) {
                d = b.replace(ia, ja);
                f = a.currentStyle[b] || a.currentStyle[d];
                if (!mb.test(f) && nb.test(f)) {
                    b = e.left;
                    var j = a.runtimeStyle.left;
                    a.runtimeStyle.left = a.currentStyle.left;
                    e.left = d === "fontSize" ? "1em" : f || 0;
                    f = e.pixelLeft + "px";
                    e.left = b;
                    a.runtimeStyle.left = j
                }
            }
            return f
        },
        swap: function (a, b, d) {
            var f = {};
            for (var e in b) {
                f[e] = a.style[e];
                a.style[e] = b[e]
            }
            d.call(a);
            for (e in b) a.style[e] = f[e]
        }
    });
    if (c.expr && c.expr.filters) {
        c.expr.filters.hidden = function (a) {
            var b = a.offsetWidth,
                d = a.offsetHeight,
                f = a.nodeName.toLowerCase() === "tr";
            return b === 0 && d === 0 && !f ? true : b > 0 && d > 0 && !f ? false : c.curCSS(a, "display") === "none"
        };
        c.expr.filters.visible = function (a) {
            return !c.expr.filters.hidden(a)
        }
    }
    var sb = J(),
        tb = /<script(.|\s)*?\/script>/gi,
        ub = /select|textarea/i,
        vb = /color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,
        N = /=\?(&|$)/,
        ka = /\?/,
        wb = /(\?|&)_=.*?(&|$)/,
        xb = /^(\w+:)?\/\/([^\/?#]+)/,
        yb = /%20/g,
        zb = c.fn.load;
    c.fn.extend({
        load: function (a, b, d) {
            if (typeof a !== "string") return zb.call(this, a);
            else if (!this.length) return this;
            var f = a.indexOf(" ");
            if (f >= 0) {
                var e = a.slice(f, a.length);
                a = a.slice(0, f)
            }
            f = "GET";
            if (b) if (c.isFunction(b)) {
                d = b;
                b = null
            } else if (typeof b === "object") {
                b = c.param(b, c.ajaxSettings.traditional);
                f = "POST"
            }
            var j = this;
            c.ajax({
                url: a,
                type: f,
                dataType: "html",
                data: b,
                complete: function (i, o) {
                    if (o === "success" || o === "notmodified") j.html(e ? c("<div />").append(i.responseText.replace(tb, "")).find(e) : i.responseText);
                    d && j.each(d, [i.responseText, o, i])
                }
            });
            return this
        },
        serialize: function () {
            return c.param(this.serializeArray())
        },
        serializeArray: function () {
            return this.map(function () {
                return this.elements ? c.makeArray(this.elements) : this
            }).filter(function () {
                return this.name && !this.disabled && (this.checked || ub.test(this.nodeName) || vb.test(this.type))
            }).map(function (a, b) {
                a = c(this).val();
                return a == null ? null : c.isArray(a) ? c.map(a, function (d) {
                    return {
                        name: b.name,
                        value: d
                    }
                }) : {
                    name: b.name,
                    value: a
                }
            }).get()
        }
    });
    c.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (a, b) {
        c.fn[b] = function (d) {
            return this.bind(b, d)
        }
    });
    c.extend({
        get: function (a, b, d, f) {
            if (c.isFunction(b)) {
                f = f || d;
                d = b;
                b = null
            }
            return c.ajax({
                type: "GET",
                url: a,
                data: b,
                success: d,
                dataType: f
            })
        },
        getScript: function (a, b) {
            return c.get(a, null, b, "script")
        },
        getJSON: function (a, b, d) {
            return c.get(a, b, d, "json")
        },
        post: function (a, b, d, f) {
            if (c.isFunction(b)) {
                f = f || d;
                d = b;
                b = {}
            }
            return c.ajax({
                type: "POST",
                url: a,
                data: b,
                success: d,
                dataType: f
            })
        },
        ajaxSetup: function (a) {
            c.extend(c.ajaxSettings, a)
        },
        ajaxSettings: {
            url: location.href,
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded",
            processData: true,
            async: true,
            xhr: A.XMLHttpRequest && (A.location.protocol !== "file:" || !A.ActiveXObject) ?
            function () {
                return new A.XMLHttpRequest
            } : function () {
                try {
                    return new A.ActiveXObject("Microsoft.XMLHTTP")
                } catch (a) {}
            },
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                script: "text/javascript, application/javascript",
                json: "application/json, text/javascript",
                text: "text/plain",
                _default: "*/*"
            }
        },
        lastModified: {},
        etag: {},
        ajax: function (a) {
            function b() {
                e.success && e.success.call(k, o, i, x);
                e.global && f("ajaxSuccess", [x, e])
            }
            function d() {
                e.complete && e.complete.call(k, x, i);
                e.global && f("ajaxComplete", [x, e]);
                e.global && !--c.active && c.event.trigger("ajaxStop")
            }
            function f(q, p) {
                (e.context ? c(e.context) : c.event).trigger(q, p)
            }
            var e = c.extend(true, {}, c.ajaxSettings, a),
                j, i, o, k = a && a.context || e,
                n = e.type.toUpperCase();
            if (e.data && e.processData && typeof e.data !== "string") e.data = c.param(e.data, e.traditional);
            if (e.dataType === "jsonp") {
                if (n === "GET") N.test(e.url) || (e.url += (ka.test(e.url) ? "&" : "?") + (e.jsonp || "callback") + "=?");
                else if (!e.data || !N.test(e.data)) e.data = (e.data ? e.data + "&" : "") + (e.jsonp || "callback") + "=?";
                e.dataType = "json"
            }
            if (e.dataType === "json" && (e.data && N.test(e.data) || N.test(e.url))) {
                j = e.jsonpCallback || "jsonp" + sb++;
                if (e.data) e.data = (e.data + "").replace(N, "=" + j + "$1");
                e.url = e.url.replace(N, "=" + j + "$1");
                e.dataType = "script";
                A[j] = A[j] ||
                function (q) {
                    o = q;
                    b();
                    d();
                    A[j] = w;
                    try {
                        delete A[j]
                    } catch (p) {}
                    z && z.removeChild(C)
                }
            }
            if (e.dataType === "script" && e.cache === null) e.cache = false;
            if (e.cache === false && n === "GET") {
                var r = J(),
                    u = e.url.replace(wb, "$1_=" + r + "$2");
                e.url = u + (u === e.url ? (ka.test(e.url) ? "&" : "?") + "_=" + r : "")
            }
            if (e.data && n === "GET") e.url += (ka.test(e.url) ? "&" : "?") + e.data;
            e.global && !c.active++ && c.event.trigger("ajaxStart");
            r = (r = xb.exec(e.url)) && (r[1] && r[1] !== location.protocol || r[2] !== location.host);
            if (e.dataType === "script" && n === "GET" && r) {
                var z = s.getElementsByTagName("head")[0] || s.documentElement,
                    C = s.createElement("script");
                C.src = e.url;
                if (e.scriptCharset) C.charset = e.scriptCharset;
                if (!j) {
                    var B = false;
                    C.onload = C.onreadystatechange = function () {
                        if (!B && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                            B = true;
                            b();
                            d();
                            C.onload = C.onreadystatechange = null;
                            z && C.parentNode && z.removeChild(C)
                        }
                    }
                }
                z.insertBefore(C, z.firstChild);
                return w
            }
            var E = false,
                x = e.xhr();
            if (x) {
                e.username ? x.open(n, e.url, e.async, e.username, e.password) : x.open(n, e.url, e.async);
                try {
                    if (e.data || a && a.contentType) x.setRequestHeader("Content-Type", e.contentType);
                    if (e.ifModified) {
                        c.lastModified[e.url] && x.setRequestHeader("If-Modified-Since", c.lastModified[e.url]);
                        c.etag[e.url] && x.setRequestHeader("If-None-Match", c.etag[e.url])
                    }
                    r || x.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                    x.setRequestHeader("Accept", e.dataType && e.accepts[e.dataType] ? e.accepts[e.dataType] + ", */*" : e.accepts._default)
                } catch (ga) {}
                if (e.beforeSend && e.beforeSend.call(k, x, e) === false) {
                    e.global && !--c.active && c.event.trigger("ajaxStop");
                    x.abort();
                    return false
                }
                e.global && f("ajaxSend", [x, e]);
                var g = x.onreadystatechange = function (q) {
                        if (!x || x.readyState === 0 || q === "abort") {
                            E || d();
                            E = true;
                            if (x) x.onreadystatechange = c.noop
                        } else if (!E && x && (x.readyState === 4 || q === "timeout")) {
                            E = true;
                            x.onreadystatechange = c.noop;
                            i = q === "timeout" ? "timeout" : !c.httpSuccess(x) ? "error" : e.ifModified && c.httpNotModified(x, e.url) ? "notmodified" : "success";
                            var p;
                            if (i === "success") try {
                                o = c.httpData(x, e.dataType, e)
                            } catch (v) {
                                i = "parsererror";
                                p = v
                            }
                            if (i === "success" || i === "notmodified") j || b();
                            else c.handleError(e, x, i, p);
                            d();
                            q === "timeout" && x.abort();
                            if (e.async) x = null
                        }
                    };
                try {
                    var h = x.abort;
                    x.abort = function () {
                        x && h.call(x);
                        g("abort")
                    }
                } catch (l) {}
                e.async && e.timeout > 0 && setTimeout(function () {
                    x && !E && g("timeout")
                }, e.timeout);
                try {
                    x.send(n === "POST" || n === "PUT" || n === "DELETE" ? e.data : null)
                } catch (m) {
                    c.handleError(e, x, null, m);
                    d()
                }
                e.async || g();
                return x
            }
        },
        handleError: function (a, b, d, f) {
            if (a.error) a.error.call(a.context || a, b, d, f);
            if (a.global)(a.context ? c(a.context) : c.event).trigger("ajaxError", [b, a, f])
        },
        active: 0,
        httpSuccess: function (a) {
            try {
                return !a.status && location.protocol === "file:" || a.status >= 200 && a.status < 300 || a.status === 304 || a.status === 1223 || a.status === 0
            } catch (b) {}
            return false
        },
        httpNotModified: function (a, b) {
            var d = a.getResponseHeader("Last-Modified"),
                f = a.getResponseHeader("Etag");
            if (d) c.lastModified[b] = d;
            if (f) c.etag[b] = f;
            return a.status === 304 || a.status === 0
        },
        httpData: function (a, b, d) {
            var f = a.getResponseHeader("content-type") || "",
                e = b === "xml" || !b && f.indexOf("xml") >= 0;
            a = e ? a.responseXML : a.responseText;
            e && a.documentElement.nodeName === "parsererror" && c.error("parsererror");
            if (d && d.dataFilter) a = d.dataFilter(a, b);
            if (typeof a === "string") if (b === "json" || !b && f.indexOf("json") >= 0) a = c.parseJSON(a);
            else if (b === "script" || !b && f.indexOf("javascript") >= 0) c.globalEval(a);
            return a
        },
        param: function (a, b) {
            function d(i, o) {
                if (c.isArray(o)) c.each(o, function (k, n) {
                    b || /\[\]$/.test(i) ? f(i, n) : d(i + "[" + (typeof n === "object" || c.isArray(n) ? k : "") + "]", n)
                });
                else!b && o != null && typeof o === "object" ? c.each(o, function (k, n) {
                    d(i + "[" + k + "]", n)
                }) : f(i, o)
            }
            function f(i, o) {
                o = c.isFunction(o) ? o() : o;
                e[e.length] = encodeURIComponent(i) + "=" + encodeURIComponent(o)
            }
            var e = [];
            if (b === w) b = c.ajaxSettings.traditional;
            if (c.isArray(a) || a.jquery) c.each(a, function () {
                f(this.name, this.value)
            });
            else for (var j in a) d(j, a[j]);
            return e.join("&").replace(yb, "+")
        }
    });
    var la = {},
        Ab = /toggle|show|hide/,
        Bb = /^([+-]=)?([\d+-.]+)(.*)$/,
        W, va = [
            ["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"],
            ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"],
            ["opacity"]
        ];
    c.fn.extend({
        show: function (a, b) {
            if (a || a === 0) return this.animate(K("show", 3), a, b);
            else {
                a = 0;
                for (b = this.length; a < b; a++) {
                    var d = c.data(this[a], "olddisplay");
                    this[a].style.display = d || "";
                    if (c.css(this[a], "display") === "none") {
                        d = this[a].nodeName;
                        var f;
                        if (la[d]) f = la[d];
                        else {
                            var e = c("<" + d + " />").appendTo("body");
                            f = e.css("display");
                            if (f === "none") f = "block";
                            e.remove();
                            la[d] = f
                        }
                        c.data(this[a], "olddisplay", f)
                    }
                }
                a = 0;
                for (b = this.length; a < b; a++) this[a].style.display = c.data(this[a], "olddisplay") || "";
                return this
            }
        },
        hide: function (a, b) {
            if (a || a === 0) return this.animate(K("hide", 3), a, b);
            else {
                a = 0;
                for (b = this.length; a < b; a++) {
                    var d = c.data(this[a], "olddisplay");
                    !d && d !== "none" && c.data(this[a], "olddisplay", c.css(this[a], "display"))
                }
                a = 0;
                for (b = this.length; a < b; a++) this[a].style.display = "none";
                return this
            }
        },
        _toggle: c.fn.toggle,
        toggle: function (a, b) {
            var d = typeof a === "boolean";
            if (c.isFunction(a) && c.isFunction(b)) this._toggle.apply(this, arguments);
            else a == null || d ? this.each(function () {
                var f = d ? a : c(this).is(":hidden");
                c(this)[f ? "show" : "hide"]()
            }) : this.animate(K("toggle", 3), a, b);
            return this
        },
        fadeTo: function (a, b, d) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({
                opacity: b
            }, a, d)
        },
        animate: function (a, b, d, f) {
            var e = c.speed(b, d, f);
            if (c.isEmptyObject(a)) return this.each(e.complete);
            return this[e.queue === false ? "each" : "queue"](function () {
                var j = c.extend({}, e),
                    i, o = this.nodeType === 1 && c(this).is(":hidden"),
                    k = this;
                for (i in a) {
                    var n = i.replace(ia, ja);
                    if (i !== n) {
                        a[n] = a[i];
                        delete a[i];
                        i = n
                    }
                    if (a[i] === "hide" && o || a[i] === "show" && !o) return j.complete.call(this);
                    if ((i === "height" || i === "width") && this.style) {
                        j.display = c.css(this, "display");
                        j.overflow = this.style.overflow
                    }
                    if (c.isArray(a[i])) {
                        (j.specialEasing = j.specialEasing || {})[i] = a[i][1];
                        a[i] = a[i][0]
                    }
                }
                if (j.overflow != null) this.style.overflow = "hidden";
                j.curAnim = c.extend({}, a);
                c.each(a, function (r, u) {
                    var z = new c.fx(k, j, r);
                    if (Ab.test(u)) z[u === "toggle" ? o ? "show" : "hide" : u](a);
                    else {
                        var C = Bb.exec(u),
                            B = z.cur(true) || 0;
                        if (C) {
                            u = parseFloat(C[2]);
                            var E = C[3] || "px";
                            if (E !== "px") {
                                k.style[r] = (u || 1) + E;
                                B = (u || 1) / z.cur(true) * B;
                                k.style[r] = B + E
                            }
                            if (C[1]) u = (C[1] === "-=" ? -1 : 1) * u + B;
                            z.custom(B, u, E)
                        } else z.custom(B, u, "")
                    }
                });
                return true
            })
        },
        stop: function (a, b) {
            var d = c.timers;
            a && this.queue([]);
            this.each(function () {
                for (var f = d.length - 1; f >= 0; f--) if (d[f].elem === this) {
                    b && d[f](true);
                    d.splice(f, 1)
                }
            });
            b || this.dequeue();
            return this
        }
    });
    c.each({
        slideDown: K("show", 1),
        slideUp: K("hide", 1),
        slideToggle: K("toggle", 1),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        }
    }, function (a, b) {
        c.fn[a] = function (d, f) {
            return this.animate(b, d, f)
        }
    });
    c.extend({
        speed: function (a, b, d) {
            var f = a && typeof a === "object" ? a : {
                complete: d || !d && b || c.isFunction(a) && a,
                duration: a,
                easing: d && b || b && !c.isFunction(b) && b
            };
            f.duration = c.fx.off ? 0 : typeof f.duration === "number" ? f.duration : c.fx.speeds[f.duration] || c.fx.speeds._default;
            f.old = f.complete;
            f.complete = function () {
                f.queue !== false && c(this).dequeue();
                c.isFunction(f.old) && f.old.call(this)
            };
            return f
        },
        easing: {
            linear: function (a, b, d, f) {
                return d + f * a
            },
            swing: function (a, b, d, f) {
                return (-Math.cos(a * Math.PI) / 2 + 0.5) * f + d
            }
        },
        timers: [],
        fx: function (a, b, d) {
            this.options = b;
            this.elem = a;
            this.prop = d;
            if (!b.orig) b.orig = {}
        }
    });
    c.fx.prototype = {
        update: function () {
            this.options.step && this.options.step.call(this.elem, this.now, this);
            (c.fx.step[this.prop] || c.fx.step._default)(this);
            if ((this.prop === "height" || this.prop === "width") && this.elem.style) this.elem.style.display = "block"
        },
        cur: function (a) {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) return this.elem[this.prop];
            return (a = parseFloat(c.css(this.elem, this.prop, a))) && a > -10000 ? a : parseFloat(c.curCSS(this.elem, this.prop)) || 0
        },
        custom: function (a, b, d) {
            function f(j) {
                return e.step(j)
            }
            this.startTime = J();
            this.start = a;
            this.end = b;
            this.unit = d || this.unit || "px";
            this.now = this.start;
            this.pos = this.state = 0;
            var e = this;
            f.elem = this.elem;
            if (f() && c.timers.push(f) && !W) W = setInterval(c.fx.tick, 13)
        },
        show: function () {
            this.options.orig[this.prop] = c.style(this.elem, this.prop);
            this.options.show = true;
            this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
            c(this.elem).show()
        },
        hide: function () {
            this.options.orig[this.prop] = c.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0)
        },
        step: function (a) {
            var b = J(),
                d = true;
            if (a || b >= this.options.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                this.options.curAnim[this.prop] = true;
                for (var f in this.options.curAnim) if (this.options.curAnim[f] !== true) d = false;
                if (d) {
                    if (this.options.display != null) {
                        this.elem.style.overflow = this.options.overflow;
                        a = c.data(this.elem, "olddisplay");
                        this.elem.style.display = a ? a : this.options.display;
                        if (c.css(this.elem, "display") === "none") this.elem.style.display = "block"
                    }
                    this.options.hide && c(this.elem).hide();
                    if (this.options.hide || this.options.show) for (var e in this.options.curAnim) c.style(this.elem, e, this.options.orig[e]);
                    this.options.complete.call(this.elem)
                }
                return false
            } else {
                e = b - this.startTime;
                this.state = e / this.options.duration;
                a = this.options.easing || (c.easing.swing ? "swing" : "linear");
                this.pos = c.easing[this.options.specialEasing && this.options.specialEasing[this.prop] || a](this.state, e, 0, 1, this.options.duration);
                this.now = this.start + (this.end - this.start) * this.pos;
                this.update()
            }
            return true
        }
    };
    c.extend(c.fx, {
        tick: function () {
            for (var a = c.timers, b = 0; b < a.length; b++) a[b]() || a.splice(b--, 1);
            a.length || c.fx.stop()
        },
        stop: function () {
            clearInterval(W);
            W = null
        },
        speeds: {
            slow: 600,
            fast: 200,
            _default: 400
        },
        step: {
            opacity: function (a) {
                c.style(a.elem, "opacity", a.now)
            },
            _default: function (a) {
                if (a.elem.style && a.elem.style[a.prop] != null) a.elem.style[a.prop] = (a.prop === "width" || a.prop === "height" ? Math.max(0, a.now) : a.now) + a.unit;
                else a.elem[a.prop] = a.now
            }
        }
    });
    if (c.expr && c.expr.filters) c.expr.filters.animated = function (a) {
        return c.grep(c.timers, function (b) {
            return a === b.elem
        }).length
    };
    c.fn.offset = "getBoundingClientRect" in s.documentElement ?
    function (a) {
        var b = this[0];
        if (a) return this.each(function (e) {
            c.offset.setOffset(this, a, e)
        });
        if (!b || !b.ownerDocument) return null;
        if (b === b.ownerDocument.body) return c.offset.bodyOffset(b);
        var d = b.getBoundingClientRect(),
            f = b.ownerDocument;
        b = f.body;
        f = f.documentElement;
        return {
            top: d.top + (self.pageYOffset || c.support.boxModel && f.scrollTop || b.scrollTop) - (f.clientTop || b.clientTop || 0),
            left: d.left + (self.pageXOffset || c.support.boxModel && f.scrollLeft || b.scrollLeft) - (f.clientLeft || b.clientLeft || 0)
        }
    } : function (a) {
        var b = this[0];
        if (a) return this.each(function (r) {
            c.offset.setOffset(this, a, r)
        });
        if (!b || !b.ownerDocument) return null;
        if (b === b.ownerDocument.body) return c.offset.bodyOffset(b);
        c.offset.initialize();
        var d = b.offsetParent,
            f = b,
            e = b.ownerDocument,
            j, i = e.documentElement,
            o = e.body;
        f = (e = e.defaultView) ? e.getComputedStyle(b, null) : b.currentStyle;
        for (var k = b.offsetTop, n = b.offsetLeft;
        (b = b.parentNode) && b !== o && b !== i;) {
            if (c.offset.supportsFixedPosition && f.position === "fixed") break;
            j = e ? e.getComputedStyle(b, null) : b.currentStyle;
            k -= b.scrollTop;
            n -= b.scrollLeft;
            if (b === d) {
                k += b.offsetTop;
                n += b.offsetLeft;
                if (c.offset.doesNotAddBorder && !(c.offset.doesAddBorderForTableAndCells && /^t(able|d|h)$/i.test(b.nodeName))) {
                    k += parseFloat(j.borderTopWidth) || 0;
                    n += parseFloat(j.borderLeftWidth) || 0
                }
                f = d;
                d = b.offsetParent
            }
            if (c.offset.subtractsBorderForOverflowNotVisible && j.overflow !== "visible") {
                k += parseFloat(j.borderTopWidth) || 0;
                n += parseFloat(j.borderLeftWidth) || 0
            }
            f = j
        }
        if (f.position === "relative" || f.position === "static") {
            k += o.offsetTop;
            n += o.offsetLeft
        }
        if (c.offset.supportsFixedPosition && f.position === "fixed") {
            k += Math.max(i.scrollTop, o.scrollTop);
            n += Math.max(i.scrollLeft, o.scrollLeft)
        }
        return {
            top: k,
            left: n
        }
    };
    c.offset = {
        initialize: function () {
            var a = s.body,
                b = s.createElement("div"),
                d, f, e, j = parseFloat(c.curCSS(a, "marginTop", true)) || 0;
            c.extend(b.style, {
                position: "absolute",
                top: 0,
                left: 0,
                margin: 0,
                border: 0,
                width: "1px",
                height: "1px",
                visibility: "hidden"
            });
            b.innerHTML = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
            a.insertBefore(b, a.firstChild);
            d = b.firstChild;
            f = d.firstChild;
            e = d.nextSibling.firstChild.firstChild;
            this.doesNotAddBorder = f.offsetTop !== 5;
            this.doesAddBorderForTableAndCells = e.offsetTop === 5;
            f.style.position = "fixed";
            f.style.top = "20px";
            this.supportsFixedPosition = f.offsetTop === 20 || f.offsetTop === 15;
            f.style.position = f.style.top = "";
            d.style.overflow = "hidden";
            d.style.position = "relative";
            this.subtractsBorderForOverflowNotVisible = f.offsetTop === -5;
            this.doesNotIncludeMarginInBodyOffset = a.offsetTop !== j;
            a.removeChild(b);
            c.offset.initialize = c.noop
        },
        bodyOffset: function (a) {
            var b = a.offsetTop,
                d = a.offsetLeft;
            c.offset.initialize();
            if (c.offset.doesNotIncludeMarginInBodyOffset) {
                b += parseFloat(c.curCSS(a, "marginTop", true)) || 0;
                d += parseFloat(c.curCSS(a, "marginLeft", true)) || 0
            }
            return {
                top: b,
                left: d
            }
        },
        setOffset: function (a, b, d) {
            if (/static/.test(c.curCSS(a, "position"))) a.style.position = "relative";
            var f = c(a),
                e = f.offset(),
                j = parseInt(c.curCSS(a, "top", true), 10) || 0,
                i = parseInt(c.curCSS(a, "left", true), 10) || 0;
            if (c.isFunction(b)) b = b.call(a, d, e);
            d = {
                top: b.top - e.top + j,
                left: b.left - e.left + i
            };
            "using" in b ? b.using.call(a, d) : f.css(d)
        }
    };
    c.fn.extend({
        position: function () {
            if (!this[0]) return null;
            var a = this[0],
                b = this.offsetParent(),
                d = this.offset(),
                f = /^body|html$/i.test(b[0].nodeName) ? {
                    top: 0,
                    left: 0
                } : b.offset();
            d.top -= parseFloat(c.curCSS(a, "marginTop", true)) || 0;
            d.left -= parseFloat(c.curCSS(a, "marginLeft", true)) || 0;
            f.top += parseFloat(c.curCSS(b[0], "borderTopWidth", true)) || 0;
            f.left += parseFloat(c.curCSS(b[0], "borderLeftWidth", true)) || 0;
            return {
                top: d.top - f.top,
                left: d.left - f.left
            }
        },
        offsetParent: function () {
            return this.map(function () {
                for (var a = this.offsetParent || s.body; a && !/^body|html$/i.test(a.nodeName) && c.css(a, "position") === "static";) a = a.offsetParent;
                return a
            })
        }
    });
    c.each(["Left", "Top"], function (a, b) {
        var d = "scroll" + b;
        c.fn[d] = function (f) {
            var e = this[0],
                j;
            if (!e) return null;
            if (f !== w) return this.each(function () {
                if (j = wa(this)) j.scrollTo(!a ? f : c(j).scrollLeft(), a ? f : c(j).scrollTop());
                else this[d] = f
            });
            else return (j = wa(e)) ? "pageXOffset" in j ? j[a ? "pageYOffset" : "pageXOffset"] : c.support.boxModel && j.document.documentElement[d] || j.document.body[d] : e[d]
        }
    });
    c.each(["Height", "Width"], function (a, b) {
        var d = b.toLowerCase();
        c.fn["inner" + b] = function () {
            return this[0] ? c.css(this[0], d, false, "padding") : null
        };
        c.fn["outer" + b] = function (f) {
            return this[0] ? c.css(this[0], d, false, f ? "margin" : "border") : null
        };
        c.fn[d] = function (f) {
            var e = this[0];
            if (!e) return f == null ? null : this;
            if (c.isFunction(f)) return this.each(function (j) {
                var i = c(this);
                i[d](f.call(this, j, i[d]()))
            });
            return "scrollTo" in e && e.document ? e.document.compatMode === "CSS1Compat" && e.document.documentElement["client" + b] || e.document.body["client" + b] : e.nodeType === 9 ? Math.max(e.documentElement["client" + b], e.body["scroll" + b], e.documentElement["scroll" + b], e.body["offset" + b], e.documentElement["offset" + b]) : f === w ? c.css(e, d) : this.css(d, typeof f === "string" ? f : f + "px")
        }
    });
    A.jQuery = A.$ = c
})(window);
/*!
 * jQuery UI 1.8
 *
 * Copyright (c) 2010 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI
 */
/*
 * jQuery UI 1.8
 *
 * Copyright (c) 2010 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI
 */
jQuery.ui || (function (a) {
    a.ui = {
        version: "1.8",
        plugin: {
            add: function (c, d, f) {
                var e = a.ui[c].prototype;
                for (var b in f) {
                    e.plugins[b] = e.plugins[b] || [];
                    e.plugins[b].push([d, f[b]])
                }
            },
            call: function (b, d, c) {
                var f = b.plugins[d];
                if (!f || !b.element[0].parentNode) {
                    return
                }
                for (var e = 0; e < f.length; e++) {
                    if (b.options[f[e][0]]) {
                        f[e][1].apply(b.element, c)
                    }
                }
            }
        },
        contains: function (d, c) {
            return document.compareDocumentPosition ? d.compareDocumentPosition(c) & 16 : d !== c && d.contains(c)
        },
        hasScroll: function (e, c) {
            if (a(e).css("overflow") == "hidden") {
                return false
            }
            var b = (c && c == "left") ? "scrollLeft" : "scrollTop",
                d = false;
            if (e[b] > 0) {
                return true
            }
            e[b] = 1;
            d = (e[b] > 0);
            e[b] = 0;
            return d
        },
        isOverAxis: function (c, b, d) {
            return (c > b) && (c < (b + d))
        },
        isOver: function (g, c, f, e, b, d) {
            return a.ui.isOverAxis(g, f, b) && a.ui.isOverAxis(c, e, d)
        },
        keyCode: {
            BACKSPACE: 8,
            CAPS_LOCK: 20,
            COMMA: 188,
            CONTROL: 17,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            INSERT: 45,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SHIFT: 16,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    };
    a.fn.extend({
        _focus: a.fn.focus,
        focus: function (b, c) {
            return typeof b === "number" ? this.each(function () {
                var d = this;
                setTimeout(function () {
                    a(d).focus();
                    (c && c.call(d))
                }, b)
            }) : this._focus.apply(this, arguments)
        },
        enableSelection: function () {
            return this.attr("unselectable", "off").css("MozUserSelect", "").unbind("selectstart.ui")
        },
        disableSelection: function () {
            return this.attr("unselectable", "on").css("MozUserSelect", "none").bind("selectstart.ui", function () {
                return false
            })
        },
        scrollParent: function () {
            var b;
            if ((a.browser.msie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
                b = this.parents().filter(function () {
                    return (/(relative|absolute|fixed)/).test(a.curCSS(this, "position", 1)) && (/(auto|scroll)/).test(a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1))
                }).eq(0)
            } else {
                b = this.parents().filter(function () {
                    return (/(auto|scroll)/).test(a.curCSS(this, "overflow", 1) + a.curCSS(this, "overflow-y", 1) + a.curCSS(this, "overflow-x", 1))
                }).eq(0)
            }
            return (/fixed/).test(this.css("position")) || !b.length ? a(document) : b
        },
        zIndex: function (e) {
            if (e !== undefined) {
                return this.css("zIndex", e)
            }
            if (this.length) {
                var c = a(this[0]),
                    b, d;
                while (c.length && c[0] !== document) {
                    b = c.css("position");
                    if (b == "absolute" || b == "relative" || b == "fixed") {
                        d = parseInt(c.css("zIndex"));
                        if (!isNaN(d) && d != 0) {
                            return d
                        }
                    }
                    c = c.parent()
                }
            }
            return 0
        }
    });
    a.extend(a.expr[":"], {
        data: function (d, c, b) {
            return !!a.data(d, b[3])
        },
        focusable: function (c) {
            var d = c.nodeName.toLowerCase(),
                b = a.attr(c, "tabindex");
            return (/input|select|textarea|button|object/.test(d) ? !c.disabled : "a" == d || "area" == d ? c.href || !isNaN(b) : !isNaN(b)) && !a(c)["area" == d ? "parents" : "closest"](":hidden").length
        },
        tabbable: function (c) {
            var b = a.attr(c, "tabindex");
            return (isNaN(b) || b >= 0) && a(c).is(":focusable")
        }
    })
})(jQuery);
/*
 * jQuery UI Widget 1.8
 *
 * Copyright (c) 2010 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI/Widget
 */ (function (b) {
    var a = b.fn.remove;
    b.fn.remove = function (c, d) {
        return this.each(function () {
            if (!d) {
                if (!c || b.filter(c, [this]).length) {
                    b("*", this).add(this).each(function () {
                        b(this).triggerHandler("remove")
                    })
                }
            }
            return a.call(b(this), c, d)
        })
    };
    b.widget = function (d, f, c) {
        var e = d.split(".")[0],
            h;
        d = d.split(".")[1];
        h = e + "-" + d;
        if (!c) {
            c = f;
            f = b.Widget
        }
        b.expr[":"][h] = function (i) {
            return !!b.data(i, d)
        };
        b[e] = b[e] || {};
        b[e][d] = function (i, j) {
            if (arguments.length) {
                this._createWidget(i, j)
            }
        };
        var g = new f();
        g.options = b.extend({}, g.options);
        b[e][d].prototype = b.extend(true, g, {
            namespace: e,
            widgetName: d,
            widgetEventPrefix: b[e][d].prototype.widgetEventPrefix || d,
            widgetBaseClass: h
        }, c);
        b.widget.bridge(d, b[e][d])
    };
    b.widget.bridge = function (d, c) {
        b.fn[d] = function (g) {
            var e = typeof g === "string",
                f = Array.prototype.slice.call(arguments, 1),
                h = this;
            g = !e && f.length ? b.extend.apply(null, [true, g].concat(f)) : g;
            if (e && g.substring(0, 1) === "_") {
                return h
            }
            if (e) {
                this.each(function () {
                    var i = b.data(this, d),
                        j = i && b.isFunction(i[g]) ? i[g].apply(i, f) : i;
                    if (j !== i && j !== undefined) {
                        h = j;
                        return false
                    }
                })
            } else {
                this.each(function () {
                    var i = b.data(this, d);
                    if (i) {
                        if (g) {
                            i.option(g)
                        }
                        i._init()
                    } else {
                        b.data(this, d, new c(g, this))
                    }
                })
            }
            return h
        }
    };
    b.Widget = function (c, d) {
        if (arguments.length) {
            this._createWidget(c, d)
        }
    };
    b.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {
            disabled: false
        },
        _createWidget: function (d, e) {
            this.element = b(e).data(this.widgetName, this);
            this.options = b.extend(true, {}, this.options, b.metadata && b.metadata.get(e)[this.widgetName], d);
            var c = this;
            this.element.bind("remove." + this.widgetName, function () {
                c.destroy()
            });
            this._create();
            this._init()
        },
        _create: function () {},
        _init: function () {},
        destroy: function () {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName);
            this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled")
        },
        widget: function () {
            return this.element
        },
        option: function (e, f) {
            var d = e,
                c = this;
            if (arguments.length === 0) {
                return b.extend({}, c.options)
            }
            if (typeof e === "string") {
                if (f === undefined) {
                    return this.options[e]
                }
                d = {};
                d[e] = f
            }
            b.each(d, function (g, h) {
                c._setOption(g, h)
            });
            return c
        },
        _setOption: function (c, d) {
            this.options[c] = d;
            if (c === "disabled") {
                this.widget()[d ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled").attr("aria-disabled", d)
            }
            return this
        },
        enable: function () {
            return this._setOption("disabled", false)
        },
        disable: function () {
            return this._setOption("disabled", true)
        },
        _trigger: function (d, e, f) {
            var h = this.options[d];
            e = b.Event(e);
            e.type = (d === this.widgetEventPrefix ? d : this.widgetEventPrefix + d).toLowerCase();
            f = f || {};
            if (e.originalEvent) {
                for (var c = b.event.props.length, g; c;) {
                    g = b.event.props[--c];
                    e[g] = e.originalEvent[g]
                }
            }
            this.element.trigger(e, f);
            return !(b.isFunction(h) && h.call(this.element[0], e, f) === false || e.isDefaultPrevented())
        }
    }
})(jQuery);
/*
 * jQuery UI Mouse 1.8
 *
 * Copyright (c) 2010 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */ (function (a) {
    a.widget("ui.mouse", {
        options: {
            cancel: ":input,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function () {
            var b = this;
            this.element.bind("mousedown." + this.widgetName, function (c) {
                return b._mouseDown(c)
            }).bind("click." + this.widgetName, function (c) {
                if (b._preventClickEvent) {
                    b._preventClickEvent = false;
                    c.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        },
        _mouseDestroy: function () {
            this.element.unbind("." + this.widgetName)
        },
        _mouseDown: function (d) {
            d.originalEvent = d.originalEvent || {};
            if (d.originalEvent.mouseHandled) {
                return
            }(this._mouseStarted && this._mouseUp(d));
            this._mouseDownEvent = d;
            var c = this,
                e = (d.which == 1),
                b = (typeof this.options.cancel == "string" ? a(d.target).parents().add(d.target).filter(this.options.cancel).length : false);
            if (!e || b || !this._mouseCapture(d)) {
                return true
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function () {
                    c.mouseDelayMet = true
                }, this.options.delay)
            }
            if (this._mouseDistanceMet(d) && this._mouseDelayMet(d)) {
                this._mouseStarted = (this._mouseStart(d) !== false);
                if (!this._mouseStarted) {
                    d.preventDefault();
                    return true
                }
            }
            this._mouseMoveDelegate = function (f) {
                return c._mouseMove(f)
            };
            this._mouseUpDelegate = function (f) {
                return c._mouseUp(f)
            };
            a(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
            (a.browser.safari || d.preventDefault());
            d.originalEvent.mouseHandled = true;
            return true
        },
        _mouseMove: function (b) {
            if (a.browser.msie && !b.button) {
                return this._mouseUp(b)
            }
            if (this._mouseStarted) {
                this._mouseDrag(b);
                return b.preventDefault()
            }
            if (this._mouseDistanceMet(b) && this._mouseDelayMet(b)) {
                this._mouseStarted = (this._mouseStart(this._mouseDownEvent, b) !== false);
                (this._mouseStarted ? this._mouseDrag(b) : this._mouseUp(b))
            }
            return !this._mouseStarted
        },
        _mouseUp: function (b) {
            a(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                this._preventClickEvent = (b.target == this._mouseDownEvent.target);
                this._mouseStop(b)
            }
            return false
        },
        _mouseDistanceMet: function (b) {
            return (Math.max(Math.abs(this._mouseDownEvent.pageX - b.pageX), Math.abs(this._mouseDownEvent.pageY - b.pageY)) >= this.options.distance)
        },
        _mouseDelayMet: function (b) {
            return this.mouseDelayMet
        },
        _mouseStart: function (b) {},
        _mouseDrag: function (b) {},
        _mouseStop: function (b) {},
        _mouseCapture: function (b) {
            return true
        }
    })
})(jQuery);
(function (a) {
    a.widget("ui.draggable", a.ui.mouse, {
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false
        },
        _create: function () {
            if (this.options.helper == "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
                this.element[0].style.position = "relative"
            }(this.options.addClasses && this.element.addClass("ui-draggable"));
            (this.options.disabled && this.element.addClass("ui-draggable-disabled"));
            this._mouseInit()
        },
        destroy: function () {
            if (!this.element.data("draggable")) {
                return
            }
            this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
            this._mouseDestroy();
            return this
        },
        _mouseCapture: function (b) {
            var c = this.options;
            if (this.helper || c.disabled || a(b.target).is(".ui-resizable-handle")) {
                return false
            }
            this.handle = this._getHandle(b);
            if (!this.handle) {
                return false
            }
            return true
        },
        _mouseStart: function (b) {
            var c = this.options;
            this.helper = this._createHelper(b);
            this._cacheHelperProportions();
            if (a.ui.ddmanager) {
                a.ui.ddmanager.current = this
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            a.extend(this.offset, {
                click: {
                    left: b.pageX - this.offset.left,
                    top: b.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this.position = this._generatePosition(b);
            this.originalPageX = b.pageX;
            this.originalPageY = b.pageY;
            (c.cursorAt && this._adjustOffsetFromHelper(c.cursorAt));
            if (c.containment) {
                this._setContainment()
            }
            if (this._trigger("start", b) === false) {
                this._clear();
                return false
            }
            this._cacheHelperProportions();
            if (a.ui.ddmanager && !c.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(this, b)
            }
            this.helper.addClass("ui-draggable-dragging");
            this._mouseDrag(b, true);
            return true
        },
        _mouseDrag: function (b, d) {
            this.position = this._generatePosition(b);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!d) {
                var c = this._uiHash();
                if (this._trigger("drag", b, c) === false) {
                    this._mouseUp({});
                    return false
                }
                this.position = c.position
            }
            if (!this.options.axis || this.options.axis != "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis != "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            if (a.ui.ddmanager) {
                a.ui.ddmanager.drag(this, b)
            }
            return false
        },
        _mouseStop: function (c) {
            var d = false;
            if (a.ui.ddmanager && !this.options.dropBehaviour) {
                d = a.ui.ddmanager.drop(this, c)
            }
            if (this.dropped) {
                d = this.dropped;
                this.dropped = false
            }
            if (!this.element[0] || !this.element[0].parentNode) {
                return false
            }
            if ((this.options.revert == "invalid" && !d) || (this.options.revert == "valid" && d) || this.options.revert === true || (a.isFunction(this.options.revert) && this.options.revert.call(this.element, d))) {
                var b = this;
                a(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                    if (b._trigger("stop", c) !== false) {
                        b._clear()
                    }
                })
            } else {
                if (this._trigger("stop", c) !== false) {
                    this._clear()
                }
            }
            return false
        },
        cancel: function () {
            if (this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp({})
            } else {
                this._clear()
            }
            return this
        },
        _getHandle: function (b) {
            var c = !this.options.handle || !a(this.options.handle, this.element).length ? true : false;
            a(this.options.handle, this.element).find("*").andSelf().each(function () {
                if (this == b.target) {
                    c = true
                }
            });
            return c
        },
        _createHelper: function (c) {
            var d = this.options;
            var b = a.isFunction(d.helper) ? a(d.helper.apply(this.element[0], [c])) : (d.helper == "clone" ? this.element.clone() : this.element);
            if (!b.parents("body").length) {
                b.appendTo((d.appendTo == "parent" ? this.element[0].parentNode : d.appendTo))
            }
            if (b[0] != this.element[0] && !(/(fixed|absolute)/).test(b.css("position"))) {
                b.css("position", "absolute")
            }
            return b
        },
        _adjustOffsetFromHelper: function (b) {
            if (typeof b == "string") {
                b = b.split(" ")
            }
            if (a.isArray(b)) {
                b = {
                    left: +b[0],
                    top: +b[1] || 0
                }
            }
            if ("left" in b) {
                this.offset.click.left = b.left + this.margins.left
            }
            if ("right" in b) {
                this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
            }
            if ("top" in b) {
                this.offset.click.top = b.top + this.margins.top
            }
            if ("bottom" in b) {
                this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
            }
        },
        _getParentOffset: function () {
            this.offsetParent = this.helper.offsetParent();
            var b = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                b.left += this.scrollParent.scrollLeft();
                b.top += this.scrollParent.scrollTop()
            }
            if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie)) {
                b = {
                    top: 0,
                    left: 0
                }
            }
            return {
                top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function () {
            if (this.cssPosition == "relative") {
                var b = this.element.position();
                return {
                    top: b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else {
                return {
                    top: 0,
                    left: 0
                }
            }
        },
        _cacheMargins: function () {
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0)
            }
        },
        _cacheHelperProportions: function () {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function () {
            var e = this.options;
            if (e.containment == "parent") {
                e.containment = this.helper[0].parentNode
            }
            if (e.containment == "document" || e.containment == "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(e.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(e.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!(/^(document|window|parent)$/).test(e.containment) && e.containment.constructor != Array) {
                var c = a(e.containment)[0];
                if (!c) {
                    return
                }
                var d = a(e.containment).offset();
                var b = (a(c).css("overflow") != "hidden");
                this.containment = [d.left + (parseInt(a(c).css("borderLeftWidth"), 10) || 0) + (parseInt(a(c).css("paddingLeft"), 10) || 0) - this.margins.left, d.top + (parseInt(a(c).css("borderTopWidth"), 10) || 0) + (parseInt(a(c).css("paddingTop"), 10) || 0) - this.margins.top, d.left + (b ? Math.max(c.scrollWidth, c.offsetWidth) : c.offsetWidth) - (parseInt(a(c).css("borderLeftWidth"), 10) || 0) - (parseInt(a(c).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, d.top + (b ? Math.max(c.scrollHeight, c.offsetHeight) : c.offsetHeight) - (parseInt(a(c).css("borderTopWidth"), 10) || 0) - (parseInt(a(c).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            } else {
                if (e.containment.constructor == Array) {
                    this.containment = e.containment
                }
            }
        },
        _convertPositionTo: function (f, h) {
            if (!h) {
                h = this.position
            }
            var c = f == "absolute" ? 1 : -1;
            var e = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                g = (/(html|body)/i).test(b[0].tagName);
            return {
                top: (h.top + this.offset.relative.top * c + this.offset.parent.top * c - (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (g ? 0 : b.scrollTop())) * c)),
                left: (h.left + this.offset.relative.left * c + this.offset.parent.left * c - (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : g ? 0 : b.scrollLeft()) * c))
            }
        },
        _generatePosition: function (e) {
            var h = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                i = (/(html|body)/i).test(b[0].tagName);
            var d = e.pageX;
            var c = e.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (e.pageX - this.offset.click.left < this.containment[0]) {
                        d = this.containment[0] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top < this.containment[1]) {
                        c = this.containment[1] + this.offset.click.top
                    }
                    if (e.pageX - this.offset.click.left > this.containment[2]) {
                        d = this.containment[2] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top > this.containment[3]) {
                        c = this.containment[3] + this.offset.click.top
                    }
                }
                if (h.grid) {
                    var g = this.originalPageY + Math.round((c - this.originalPageY) / h.grid[1]) * h.grid[1];
                    c = this.containment ? (!(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : (!(g - this.offset.click.top < this.containment[1]) ? g - h.grid[1] : g + h.grid[1])) : g;
                    var f = this.originalPageX + Math.round((d - this.originalPageX) / h.grid[0]) * h.grid[0];
                    d = this.containment ? (!(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : (!(f - this.offset.click.left < this.containment[0]) ? f - h.grid[0] : f + h.grid[0])) : f
                }
            }
            return {
                top: (c - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (i ? 0 : b.scrollTop())))),
                left: (d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && a.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : b.scrollLeft())))
            }
        },
        _clear: function () {
            this.helper.removeClass("ui-draggable-dragging");
            if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval) {
                this.helper.remove()
            }
            this.helper = null;
            this.cancelHelperRemoval = false
        },
        _trigger: function (b, c, d) {
            d = d || this._uiHash();
            a.ui.plugin.call(this, b, [c, d]);
            if (b == "drag") {
                this.positionAbs = this._convertPositionTo("absolute")
            }
            return a.Widget.prototype._trigger.call(this, b, c, d)
        },
        plugins: {},
        _uiHash: function (b) {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    });
    a.extend(a.ui.draggable, {
        version: "1.8"
    });
    a.ui.plugin.add("draggable", "connectToSortable", {
        start: function (c, e) {
            var d = a(this).data("draggable"),
                f = d.options,
                b = a.extend({}, e, {
                    item: d.element
                });
            d.sortables = [];
            a(f.connectToSortable).each(function () {
                var g = a.data(this, "sortable");
                if (g && !g.options.disabled) {
                    d.sortables.push({
                        instance: g,
                        shouldRevert: g.options.revert
                    });
                    g._refreshItems();
                    g._trigger("activate", c, b)
                }
            })
        },
        stop: function (c, e) {
            var d = a(this).data("draggable"),
                b = a.extend({}, e, {
                    item: d.element
                });
            a.each(d.sortables, function () {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    d.cancelHelperRemoval = true;
                    this.instance.cancelHelperRemoval = false;
                    if (this.shouldRevert) {
                        this.instance.options.revert = true
                    }
                    this.instance._mouseStop(c);
                    this.instance.options.helper = this.instance.options._helper;
                    if (d.options.helper == "original") {
                        this.instance.currentItem.css({
                            top: "auto",
                            left: "auto"
                        })
                    }
                } else {
                    this.instance.cancelHelperRemoval = false;
                    this.instance._trigger("deactivate", c, b)
                }
            })
        },
        drag: function (c, f) {
            var e = a(this).data("draggable"),
                b = this;
            var d = function (i) {
                    var n = this.offset.click.top,
                        m = this.offset.click.left;
                    var g = this.positionAbs.top,
                        k = this.positionAbs.left;
                    var j = i.height,
                        l = i.width;
                    var p = i.top,
                        h = i.left;
                    return a.ui.isOver(g + n, k + m, p, h, j, l)
                };
            a.each(e.sortables, function (g) {
                this.instance.positionAbs = e.positionAbs;
                this.instance.helperProportions = e.helperProportions;
                this.instance.offset.click = e.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = a(b).clone().appendTo(this.instance.element).data("sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function () {
                            return f.helper[0]
                        };
                        c.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(c, true);
                        this.instance._mouseStart(c, true, true);
                        this.instance.offset.click.top = e.offset.click.top;
                        this.instance.offset.click.left = e.offset.click.left;
                        this.instance.offset.parent.left -= e.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= e.offset.parent.top - this.instance.offset.parent.top;
                        e._trigger("toSortable", c);
                        e.dropped = this.instance.element;
                        e.currentItem = e.element;
                        this.instance.fromOutside = e
                    }
                    if (this.instance.currentItem) {
                        this.instance._mouseDrag(c)
                    }
                } else {
                    if (this.instance.isOver) {
                        this.instance.isOver = 0;
                        this.instance.cancelHelperRemoval = true;
                        this.instance.options.revert = false;
                        this.instance._trigger("out", c, this.instance._uiHash(this.instance));
                        this.instance._mouseStop(c, true);
                        this.instance.options.helper = this.instance.options._helper;
                        this.instance.currentItem.remove();
                        if (this.instance.placeholder) {
                            this.instance.placeholder.remove()
                        }
                        e._trigger("fromSortable", c);
                        e.dropped = false
                    }
                }
            })
        }
    });
    a.ui.plugin.add("draggable", "cursor", {
        start: function (c, d) {
            var b = a("body"),
                e = a(this).data("draggable").options;
            if (b.css("cursor")) {
                e._cursor = b.css("cursor")
            }
            b.css("cursor", e.cursor)
        },
        stop: function (b, c) {
            var d = a(this).data("draggable").options;
            if (d._cursor) {
                a("body").css("cursor", d._cursor)
            }
        }
    });
    a.ui.plugin.add("draggable", "iframeFix", {
        start: function (b, c) {
            var d = a(this).data("draggable").options;
            a(d.iframeFix === true ? "iframe" : d.iframeFix).each(function () {
                a('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
                    width: this.offsetWidth + "px",
                    height: this.offsetHeight + "px",
                    position: "absolute",
                    opacity: "0.001",
                    zIndex: 1000
                }).css(a(this).offset()).appendTo("body")
            })
        },
        stop: function (b, c) {
            a("div.ui-draggable-iframeFix").each(function () {
                this.parentNode.removeChild(this)
            })
        }
    });
    a.ui.plugin.add("draggable", "opacity", {
        start: function (c, d) {
            var b = a(d.helper),
                e = a(this).data("draggable").options;
            if (b.css("opacity")) {
                e._opacity = b.css("opacity")
            }
            b.css("opacity", e.opacity)
        },
        stop: function (b, c) {
            var d = a(this).data("draggable").options;
            if (d._opacity) {
                a(c.helper).css("opacity", d._opacity)
            }
        }
    });
    a.ui.plugin.add("draggable", "scroll", {
        start: function (c, d) {
            var b = a(this).data("draggable");
            if (b.scrollParent[0] != document && b.scrollParent[0].tagName != "HTML") {
                b.overflowOffset = b.scrollParent.offset()
            }
        },
        drag: function (d, e) {
            var c = a(this).data("draggable"),
                f = c.options,
                b = false;
            if (c.scrollParent[0] != document && c.scrollParent[0].tagName != "HTML") {
                if (!f.axis || f.axis != "x") {
                    if ((c.overflowOffset.top + c.scrollParent[0].offsetHeight) - d.pageY < f.scrollSensitivity) {
                        c.scrollParent[0].scrollTop = b = c.scrollParent[0].scrollTop + f.scrollSpeed
                    } else {
                        if (d.pageY - c.overflowOffset.top < f.scrollSensitivity) {
                            c.scrollParent[0].scrollTop = b = c.scrollParent[0].scrollTop - f.scrollSpeed
                        }
                    }
                }
                if (!f.axis || f.axis != "y") {
                    if ((c.overflowOffset.left + c.scrollParent[0].offsetWidth) - d.pageX < f.scrollSensitivity) {
                        c.scrollParent[0].scrollLeft = b = c.scrollParent[0].scrollLeft + f.scrollSpeed
                    } else {
                        if (d.pageX - c.overflowOffset.left < f.scrollSensitivity) {
                            c.scrollParent[0].scrollLeft = b = c.scrollParent[0].scrollLeft - f.scrollSpeed
                        }
                    }
                }
            } else {
                if (!f.axis || f.axis != "x") {
                    if (d.pageY - a(document).scrollTop() < f.scrollSensitivity) {
                        b = a(document).scrollTop(a(document).scrollTop() - f.scrollSpeed)
                    } else {
                        if (a(window).height() - (d.pageY - a(document).scrollTop()) < f.scrollSensitivity) {
                            b = a(document).scrollTop(a(document).scrollTop() + f.scrollSpeed)
                        }
                    }
                }
                if (!f.axis || f.axis != "y") {
                    if (d.pageX - a(document).scrollLeft() < f.scrollSensitivity) {
                        b = a(document).scrollLeft(a(document).scrollLeft() - f.scrollSpeed)
                    } else {
                        if (a(window).width() - (d.pageX - a(document).scrollLeft()) < f.scrollSensitivity) {
                            b = a(document).scrollLeft(a(document).scrollLeft() + f.scrollSpeed)
                        }
                    }
                }
            }
            if (b !== false && a.ui.ddmanager && !f.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(c, d)
            }
        }
    });
    a.ui.plugin.add("draggable", "snap", {
        start: function (c, d) {
            var b = a(this).data("draggable"),
                e = b.options;
            b.snapElements = [];
            a(e.snap.constructor != String ? (e.snap.items || ":data(draggable)") : e.snap).each(function () {
                var g = a(this);
                var f = g.offset();
                if (this != b.element[0]) {
                    b.snapElements.push({
                        item: this,
                        width: g.outerWidth(),
                        height: g.outerHeight(),
                        top: f.top,
                        left: f.left
                    })
                }
            })
        },
        drag: function (u, p) {
            var g = a(this).data("draggable"),
                q = g.options;
            var y = q.snapTolerance;
            var x = p.offset.left,
                w = x + g.helperProportions.width,
                f = p.offset.top,
                e = f + g.helperProportions.height;
            for (var v = g.snapElements.length - 1; v >= 0; v--) {
                var s = g.snapElements[v].left,
                    n = s + g.snapElements[v].width,
                    m = g.snapElements[v].top,
                    A = m + g.snapElements[v].height;
                if (!((s - y < x && x < n + y && m - y < f && f < A + y) || (s - y < x && x < n + y && m - y < e && e < A + y) || (s - y < w && w < n + y && m - y < f && f < A + y) || (s - y < w && w < n + y && m - y < e && e < A + y))) {
                    if (g.snapElements[v].snapping) {
                        (g.options.snap.release && g.options.snap.release.call(g.element, u, a.extend(g._uiHash(), {
                            snapItem: g.snapElements[v].item
                        })))
                    }
                    g.snapElements[v].snapping = false;
                    continue
                }
                if (q.snapMode != "inner") {
                    var c = Math.abs(m - e) <= y;
                    var z = Math.abs(A - f) <= y;
                    var j = Math.abs(s - w) <= y;
                    var k = Math.abs(n - x) <= y;
                    if (c) {
                        p.position.top = g._convertPositionTo("relative", {
                            top: m - g.helperProportions.height,
                            left: 0
                        }).top - g.margins.top
                    }
                    if (z) {
                        p.position.top = g._convertPositionTo("relative", {
                            top: A,
                            left: 0
                        }).top - g.margins.top
                    }
                    if (j) {
                        p.position.left = g._convertPositionTo("relative", {
                            top: 0,
                            left: s - g.helperProportions.width
                        }).left - g.margins.left
                    }
                    if (k) {
                        p.position.left = g._convertPositionTo("relative", {
                            top: 0,
                            left: n
                        }).left - g.margins.left
                    }
                }
                var h = (c || z || j || k);
                if (q.snapMode != "outer") {
                    var c = Math.abs(m - f) <= y;
                    var z = Math.abs(A - e) <= y;
                    var j = Math.abs(s - x) <= y;
                    var k = Math.abs(n - w) <= y;
                    if (c) {
                        p.position.top = g._convertPositionTo("relative", {
                            top: m,
                            left: 0
                        }).top - g.margins.top
                    }
                    if (z) {
                        p.position.top = g._convertPositionTo("relative", {
                            top: A - g.helperProportions.height,
                            left: 0
                        }).top - g.margins.top
                    }
                    if (j) {
                        p.position.left = g._convertPositionTo("relative", {
                            top: 0,
                            left: s
                        }).left - g.margins.left
                    }
                    if (k) {
                        p.position.left = g._convertPositionTo("relative", {
                            top: 0,
                            left: n - g.helperProportions.width
                        }).left - g.margins.left
                    }
                }
                if (!g.snapElements[v].snapping && (c || z || j || k || h)) {
                    (g.options.snap.snap && g.options.snap.snap.call(g.element, u, a.extend(g._uiHash(), {
                        snapItem: g.snapElements[v].item
                    })))
                }
                g.snapElements[v].snapping = (c || z || j || k || h)
            }
        }
    });
    a.ui.plugin.add("draggable", "stack", {
        start: function (c, d) {
            var f = a(this).data("draggable").options;
            var e = a.makeArray(a(f.stack)).sort(function (h, g) {
                return (parseInt(a(h).css("zIndex"), 10) || 0) - (parseInt(a(g).css("zIndex"), 10) || 0)
            });
            if (!e.length) {
                return
            }
            var b = parseInt(e[0].style.zIndex) || 0;
            a(e).each(function (g) {
                this.style.zIndex = b + g
            });
            this[0].style.zIndex = b + e.length
        }
    });
    a.ui.plugin.add("draggable", "zIndex", {
        start: function (c, d) {
            var b = a(d.helper),
                e = a(this).data("draggable").options;
            if (b.css("zIndex")) {
                e._zIndex = b.css("zIndex")
            }
            b.css("zIndex", e.zIndex)
        },
        stop: function (b, c) {
            var d = a(this).data("draggable").options;
            if (d._zIndex) {
                a(c.helper).css("zIndex", d._zIndex)
            }
        }
    })
})(jQuery);
(function (a) {
    a.widget("ui.droppable", {
        widgetEventPrefix: "drop",
        options: {
            accept: "*",
            activeClass: false,
            addClasses: true,
            greedy: false,
            hoverClass: false,
            scope: "default",
            tolerance: "intersect"
        },
        _create: function () {
            var c = this.options,
                b = c.accept;
            this.isover = 0;
            this.isout = 1;
            this.accept = a.isFunction(b) ? b : function (e) {
                return e.is(b)
            };
            this.proportions = {
                width: this.element[0].offsetWidth,
                height: this.element[0].offsetHeight
            };
            a.ui.ddmanager.droppables[c.scope] = a.ui.ddmanager.droppables[c.scope] || [];
            a.ui.ddmanager.droppables[c.scope].push(this);
            (c.addClasses && this.element.addClass("ui-droppable"))
        },
        destroy: function () {
            var b = a.ui.ddmanager.droppables[this.options.scope];
            for (var c = 0; c < b.length; c++) {
                if (b[c] == this) {
                    b.splice(c, 1)
                }
            }
            this.element.removeClass("ui-droppable ui-droppable-disabled").removeData("droppable").unbind(".droppable");
            return this
        },
        _setOption: function (b, c) {
            if (b == "accept") {
                this.accept = a.isFunction(c) ? c : function (e) {
                    return e.is(c)
                }
            }
            a.Widget.prototype._setOption.apply(this, arguments)
        },
        _activate: function (c) {
            var b = a.ui.ddmanager.current;
            if (this.options.activeClass) {
                this.element.addClass(this.options.activeClass)
            }(b && this._trigger("activate", c, this.ui(b)))
        },
        _deactivate: function (c) {
            var b = a.ui.ddmanager.current;
            if (this.options.activeClass) {
                this.element.removeClass(this.options.activeClass)
            }(b && this._trigger("deactivate", c, this.ui(b)))
        },
        _over: function (c) {
            var b = a.ui.ddmanager.current;
            if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
                return
            }
            if (this.accept.call(this.element[0], (b.currentItem || b.element))) {
                if (this.options.hoverClass) {
                    this.element.addClass(this.options.hoverClass)
                }
                this._trigger("over", c, this.ui(b))
            }
        },
        _out: function (c) {
            var b = a.ui.ddmanager.current;
            if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
                return
            }
            if (this.accept.call(this.element[0], (b.currentItem || b.element))) {
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass)
                }
                this._trigger("out", c, this.ui(b))
            }
        },
        _drop: function (c, d) {
            var b = d || a.ui.ddmanager.current;
            if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
                return false
            }
            var e = false;
            this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function () {
                var f = a.data(this, "droppable");
                if (f.options.greedy && !f.options.disabled && f.options.scope == b.options.scope && f.accept.call(f.element[0], (b.currentItem || b.element)) && a.ui.intersect(b, a.extend(f, {
                    offset: f.element.offset()
                }), f.options.tolerance)) {
                    e = true;
                    return false
                }
            });
            if (e) {
                return false
            }
            if (this.accept.call(this.element[0], (b.currentItem || b.element))) {
                if (this.options.activeClass) {
                    this.element.removeClass(this.options.activeClass)
                }
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass)
                }
                this._trigger("drop", c, this.ui(b));
                return this.element
            }
            return false
        },
        ui: function (b) {
            return {
                draggable: (b.currentItem || b.element),
                helper: b.helper,
                position: b.position,
                offset: b.positionAbs
            }
        }
    });
    a.extend(a.ui.droppable, {
        version: "1.8"
    });
    a.ui.intersect = function (q, j, o) {
        if (!j.offset) {
            return false
        }
        var e = (q.positionAbs || q.position.absolute).left,
            d = e + q.helperProportions.width,
            n = (q.positionAbs || q.position.absolute).top,
            m = n + q.helperProportions.height;
        var g = j.offset.left,
            c = g + j.proportions.width,
            p = j.offset.top,
            k = p + j.proportions.height;
        switch (o) {
        case "fit":
            return (g < e && d < c && p < n && m < k);
            break;
        case "intersect":
            return (g < e + (q.helperProportions.width / 2) && d - (q.helperProportions.width / 2) < c && p < n + (q.helperProportions.height / 2) && m - (q.helperProportions.height / 2) < k);
            break;
        case "pointer":
            var h = ((q.positionAbs || q.position.absolute).left + (q.clickOffset || q.offset.click).left),
                i = ((q.positionAbs || q.position.absolute).top + (q.clickOffset || q.offset.click).top),
                f = a.ui.isOver(i, h, p, g, j.proportions.height, j.proportions.width);
            return f;
            break;
        case "touch":
            return ((n >= p && n <= k) || (m >= p && m <= k) || (n < p && m > k)) && ((e >= g && e <= c) || (d >= g && d <= c) || (e < g && d > c));
            break;
        default:
            return false;
            break
        }
    };
    a.ui.ddmanager = {
        current: null,
        droppables: {
            "default": []
        },
        prepareOffsets: function (e, g) {
            var b = a.ui.ddmanager.droppables[e.options.scope] || [];
            var f = g ? g.type : null;
            var h = (e.currentItem || e.element).find(":data(droppable)").andSelf();
            droppablesLoop: for (var d = 0; d < b.length; d++) {
                if (b[d].options.disabled || (e && !b[d].accept.call(b[d].element[0], (e.currentItem || e.element)))) {
                    continue
                }
                for (var c = 0; c < h.length; c++) {
                    if (h[c] == b[d].element[0]) {
                        b[d].proportions.height = 0;
                        continue droppablesLoop
                    }
                }
                b[d].visible = b[d].element.css("display") != "none";
                if (!b[d].visible) {
                    continue
                }
                b[d].offset = b[d].element.offset();
                b[d].proportions = {
                    width: b[d].element[0].offsetWidth,
                    height: b[d].element[0].offsetHeight
                };
                if (f == "mousedown") {
                    b[d]._activate.call(b[d], g)
                }
            }
        },
        drop: function (b, c) {
            var d = false;
            a.each(a.ui.ddmanager.droppables[b.options.scope] || [], function () {
                if (!this.options) {
                    return
                }
                if (!this.options.disabled && this.visible && a.ui.intersect(b, this, this.options.tolerance)) {
                    d = d || this._drop.call(this, c)
                }
                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], (b.currentItem || b.element))) {
                    this.isout = 1;
                    this.isover = 0;
                    this._deactivate.call(this, c)
                }
            });
            return d
        },
        drag: function (b, c) {
            if (b.options.refreshPositions) {
                a.ui.ddmanager.prepareOffsets(b, c)
            }
            a.each(a.ui.ddmanager.droppables[b.options.scope] || [], function () {
                if (this.options.disabled || this.greedyChild || !this.visible) {
                    return
                }
                var e = a.ui.intersect(b, this, this.options.tolerance);
                var g = !e && this.isover == 1 ? "isout" : (e && this.isover == 0 ? "isover" : null);
                if (!g) {
                    return
                }
                var f;
                if (this.options.greedy) {
                    var d = this.element.parents(":data(droppable):eq(0)");
                    if (d.length) {
                        f = a.data(d[0], "droppable");
                        f.greedyChild = (g == "isover" ? 1 : 0)
                    }
                }
                if (f && g == "isover") {
                    f.isover = 0;
                    f.isout = 1;
                    f._out.call(f, c)
                }
                this[g] = 1;
                this[g == "isout" ? "isover" : "isout"] = 0;
                this[g == "isover" ? "_over" : "_out"].call(this, c);
                if (f && g == "isout") {
                    f.isout = 0;
                    f.isover = 1;
                    f._over.call(f, c)
                }
            })
        }
    }
})(jQuery);
(function (c) {
    c.widget("ui.resizable", c.ui.mouse, {
        widgetEventPrefix: "resize",
        options: {
            alsoResize: false,
            animate: false,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: false,
            autoHide: false,
            containment: false,
            ghost: false,
            grid: false,
            handles: "e,s,se",
            helper: false,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 1000
        },
        _create: function () {
            var e = this,
                j = this.options;
            this.element.addClass("ui-resizable");
            c.extend(this, {
                _aspectRatio: !! (j.aspectRatio),
                aspectRatio: j.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: j.helper || j.ghost || j.animate ? j.helper || "ui-resizable-helper" : null
            });
            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                if (/relative/.test(this.element.css("position")) && c.browser.opera) {
                    this.element.css({
                        position: "relative",
                        top: "auto",
                        left: "auto"
                    })
                }
                this.element.wrap(c('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                    position: this.element.css("position"),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css("top"),
                    left: this.element.css("left")
                }));
                this.element = this.element.parent().data("resizable", this.element.data("resizable"));
                this.elementIsWrapper = true;
                this.element.css({
                    marginLeft: this.originalElement.css("marginLeft"),
                    marginTop: this.originalElement.css("marginTop"),
                    marginRight: this.originalElement.css("marginRight"),
                    marginBottom: this.originalElement.css("marginBottom")
                });
                this.originalElement.css({
                    marginLeft: 0,
                    marginTop: 0,
                    marginRight: 0,
                    marginBottom: 0
                });
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position: "static",
                    zoom: 1,
                    display: "block"
                }));
                this.originalElement.css({
                    margin: this.originalElement.css("margin")
                });
                this._proportionallyResize()
            }
            this.handles = j.handles || (!c(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            });
            if (this.handles.constructor == String) {
                if (this.handles == "all") {
                    this.handles = "n,e,s,w,se,sw,ne,nw"
                }
                var k = this.handles.split(",");
                this.handles = {};
                for (var f = 0; f < k.length; f++) {
                    var h = c.trim(k[f]),
                        d = "ui-resizable-" + h;
                    var g = c('<div class="ui-resizable-handle ' + d + '"></div>');
                    if (/sw|se|ne|nw/.test(h)) {
                        g.css({
                            zIndex: ++j.zIndex
                        })
                    }
                    if ("se" == h) {
                        g.addClass("ui-icon ui-icon-gripsmall-diagonal-se")
                    }
                    this.handles[h] = ".ui-resizable-" + h;
                    this.element.append(g)
                }
            }
            this._renderAxis = function (p) {
                p = p || this.element;
                for (var m in this.handles) {
                    if (this.handles[m].constructor == String) {
                        this.handles[m] = c(this.handles[m], this.element).show()
                    }
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                        var n = c(this.handles[m], this.element),
                            o = 0;
                        o = /sw|ne|nw|se|n|s/.test(m) ? n.outerHeight() : n.outerWidth();
                        var l = ["padding", /ne|nw|n/.test(m) ? "Top" : /se|sw|s/.test(m) ? "Bottom" : /^e$/.test(m) ? "Right" : "Left"].join("");
                        p.css(l, o);
                        this._proportionallyResize()
                    }
                    if (!c(this.handles[m]).length) {
                        continue
                    }
                }
            };
            this._renderAxis(this.element);
            this._handles = c(".ui-resizable-handle", this.element).disableSelection();
            this._handles.mouseover(function () {
                if (!e.resizing) {
                    if (this.className) {
                        var i = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)
                    }
                    e.axis = i && i[1] ? i[1] : "se"
                }
            });
            if (j.autoHide) {
                this._handles.hide();
                c(this.element).addClass("ui-resizable-autohide").hover(function () {
                    c(this).removeClass("ui-resizable-autohide");
                    e._handles.show()
                }, function () {
                    if (!e.resizing) {
                        c(this).addClass("ui-resizable-autohide");
                        e._handles.hide()
                    }
                })
            }
            this._mouseInit()
        },
        destroy: function () {
            this._mouseDestroy();
            var d = function (f) {
                    c(f).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").unbind(".resizable").find(".ui-resizable-handle").remove()
                };
            if (this.elementIsWrapper) {
                d(this.element);
                var e = this.element;
                e.after(this.originalElement.css({
                    position: e.css("position"),
                    width: e.outerWidth(),
                    height: e.outerHeight(),
                    top: e.css("top"),
                    left: e.css("left")
                })).remove()
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            d(this.originalElement);
            return this
        },
        _mouseCapture: function (e) {
            var f = false;
            for (var d in this.handles) {
                if (c(this.handles[d])[0] == e.target) {
                    f = true
                }
            }
            return !this.options.disabled && f
        },
        _mouseStart: function (f) {
            var i = this.options,
                e = this.element.position(),
                d = this.element;
            this.resizing = true;
            this.documentScroll = {
                top: c(document).scrollTop(),
                left: c(document).scrollLeft()
            };
            if (d.is(".ui-draggable") || (/absolute/).test(d.css("position"))) {
                d.css({
                    position: "absolute",
                    top: e.top,
                    left: e.left
                })
            }
            if (c.browser.opera && (/relative/).test(d.css("position"))) {
                d.css({
                    position: "relative",
                    top: "auto",
                    left: "auto"
                })
            }
            this._renderProxy();
            var j = b(this.helper.css("left")),
                g = b(this.helper.css("top"));
            if (i.containment) {
                j += c(i.containment).scrollLeft() || 0;
                g += c(i.containment).scrollTop() || 0
            }
            this.offset = this.helper.offset();
            this.position = {
                left: j,
                top: g
            };
            this.size = this._helper ? {
                width: d.outerWidth(),
                height: d.outerHeight()
            } : {
                width: d.width(),
                height: d.height()
            };
            this.originalSize = this._helper ? {
                width: d.outerWidth(),
                height: d.outerHeight()
            } : {
                width: d.width(),
                height: d.height()
            };
            this.originalPosition = {
                left: j,
                top: g
            };
            this.sizeDiff = {
                width: d.outerWidth() - d.width(),
                height: d.outerHeight() - d.height()
            };
            this.originalMousePosition = {
                left: f.pageX,
                top: f.pageY
            };
            this.aspectRatio = (typeof i.aspectRatio == "number") ? i.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);
            var h = c(".ui-resizable-" + this.axis).css("cursor");
            c("body").css("cursor", h == "auto" ? this.axis + "-resize" : h);
            d.addClass("ui-resizable-resizing");
            this._propagate("start", f);
            return true
        },
        _mouseDrag: function (d) {
            var g = this.helper,
                f = this.options,
                l = {},
                p = this,
                i = this.originalMousePosition,
                m = this.axis;
            var q = (d.pageX - i.left) || 0,
                n = (d.pageY - i.top) || 0;
            var h = this._change[m];
            if (!h) {
                return false
            }
            var k = h.apply(this, [d, q, n]),
                j = c.browser.msie && c.browser.version < 7,
                e = this.sizeDiff;
            if (this._aspectRatio || d.shiftKey) {
                k = this._updateRatio(k, d)
            }
            k = this._respectSize(k, d);
            this._propagate("resize", d);
            g.css({
                top: this.position.top + "px",
                left: this.position.left + "px",
                width: this.size.width + "px",
                height: this.size.height + "px"
            });
            if (!this._helper && this._proportionallyResizeElements.length) {
                this._proportionallyResize()
            }
            this._updateCache(k);
            this._trigger("resize", d, this.ui());
            return false
        },
        _mouseStop: function (g) {
            this.resizing = false;
            var h = this.options,
                l = this;
            if (this._helper) {
                var f = this._proportionallyResizeElements,
                    d = f.length && (/textarea/i).test(f[0].nodeName),
                    e = d && c.ui.hasScroll(f[0], "left") ? 0 : l.sizeDiff.height,
                    j = d ? 0 : l.sizeDiff.width;
                var m = {
                    width: (l.size.width - j),
                    height: (l.size.height - e)
                },
                    i = (parseInt(l.element.css("left"), 10) + (l.position.left - l.originalPosition.left)) || null,
                    k = (parseInt(l.element.css("top"), 10) + (l.position.top - l.originalPosition.top)) || null;
                if (!h.animate) {
                    this.element.css(c.extend(m, {
                        top: k,
                        left: i
                    }))
                }
                l.helper.height(l.size.height);
                l.helper.width(l.size.width);
                if (this._helper && !h.animate) {
                    this._proportionallyResize()
                }
            }
            c("body").css("cursor", "auto");
            this.element.removeClass("ui-resizable-resizing");
            this._propagate("stop", g);
            if (this._helper) {
                this.helper.remove()
            }
            return false
        },
        _updateCache: function (d) {
            var e = this.options;
            this.offset = this.helper.offset();
            if (a(d.left)) {
                this.position.left = d.left
            }
            if (a(d.top)) {
                this.position.top = d.top
            }
            if (a(d.height)) {
                this.size.height = d.height
            }
            if (a(d.width)) {
                this.size.width = d.width
            }
        },
        _updateRatio: function (g, f) {
            var h = this.options,
                i = this.position,
                e = this.size,
                d = this.axis;
            if (g.height) {
                g.width = (e.height * this.aspectRatio)
            } else {
                if (g.width) {
                    g.height = (e.width / this.aspectRatio)
                }
            }
            if (d == "sw") {
                g.left = i.left + (e.width - g.width);
                g.top = null
            }
            if (d == "nw") {
                g.top = i.top + (e.height - g.height);
                g.left = i.left + (e.width - g.width)
            }
            return g
        },
        _respectSize: function (k, f) {
            var i = this.helper,
                h = this.options,
                q = this._aspectRatio || f.shiftKey,
                p = this.axis,
                s = a(k.width) && h.maxWidth && (h.maxWidth < k.width),
                l = a(k.height) && h.maxHeight && (h.maxHeight < k.height),
                g = a(k.width) && h.minWidth && (h.minWidth > k.width),
                r = a(k.height) && h.minHeight && (h.minHeight > k.height);
            if (g) {
                k.width = h.minWidth
            }
            if (r) {
                k.height = h.minHeight
            }
            if (s) {
                k.width = h.maxWidth
            }
            if (l) {
                k.height = h.maxHeight
            }
            var e = this.originalPosition.left + this.originalSize.width,
                n = this.position.top + this.size.height;
            var j = /sw|nw|w/.test(p),
                d = /nw|ne|n/.test(p);
            if (g && j) {
                k.left = e - h.minWidth
            }
            if (s && j) {
                k.left = e - h.maxWidth
            }
            if (r && d) {
                k.top = n - h.minHeight
            }
            if (l && d) {
                k.top = n - h.maxHeight
            }
            var m = !k.width && !k.height;
            if (m && !k.left && k.top) {
                k.top = null
            } else {
                if (m && !k.top && k.left) {
                    k.left = null
                }
            }
            return k
        },
        _proportionallyResize: function () {
            var j = this.options;
            if (!this._proportionallyResizeElements.length) {
                return
            }
            var f = this.helper || this.element;
            for (var e = 0; e < this._proportionallyResizeElements.length; e++) {
                var g = this._proportionallyResizeElements[e];
                if (!this.borderDif) {
                    var d = [g.css("borderTopWidth"), g.css("borderRightWidth"), g.css("borderBottomWidth"), g.css("borderLeftWidth")],
                        h = [g.css("paddingTop"), g.css("paddingRight"), g.css("paddingBottom"), g.css("paddingLeft")];
                    this.borderDif = c.map(d, function (k, m) {
                        var l = parseInt(k, 10) || 0,
                            n = parseInt(h[m], 10) || 0;
                        return l + n
                    })
                }
                if (c.browser.msie && !(!(c(f).is(":hidden") || c(f).parents(":hidden").length))) {
                    continue
                }
                g.css({
                    height: (f.height() - this.borderDif[0] - this.borderDif[2]) || 0,
                    width: (f.width() - this.borderDif[1] - this.borderDif[3]) || 0
                })
            }
        },
        _renderProxy: function () {
            var e = this.element,
                h = this.options;
            this.elementOffset = e.offset();
            if (this._helper) {
                this.helper = this.helper || c('<div style="overflow:hidden;"></div>');
                var d = c.browser.msie && c.browser.version < 7,
                    f = (d ? 1 : 0),
                    g = (d ? 2 : -1);
                this.helper.addClass(this._helper).css({
                    width: this.element.outerWidth() + g,
                    height: this.element.outerHeight() + g,
                    position: "absolute",
                    left: this.elementOffset.left - f + "px",
                    top: this.elementOffset.top - f + "px",
                    zIndex: ++h.zIndex
                });
                this.helper.appendTo("body").disableSelection()
            } else {
                this.helper = this.element
            }
        },
        _change: {
            e: function (f, e, d) {
                return {
                    width: this.originalSize.width + e
                }
            },
            w: function (g, e, d) {
                var i = this.options,
                    f = this.originalSize,
                    h = this.originalPosition;
                return {
                    left: h.left + e,
                    width: f.width - e
                }
            },
            n: function (g, e, d) {
                var i = this.options,
                    f = this.originalSize,
                    h = this.originalPosition;
                return {
                    top: h.top + d,
                    height: f.height - d
                }
            },
            s: function (f, e, d) {
                return {
                    height: this.originalSize.height + d
                }
            },
            se: function (f, e, d) {
                return c.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [f, e, d]))
            },
            sw: function (f, e, d) {
                return c.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [f, e, d]))
            },
            ne: function (f, e, d) {
                return c.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [f, e, d]))
            },
            nw: function (f, e, d) {
                return c.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [f, e, d]))
            }
        },
        _propagate: function (e, d) {
            c.ui.plugin.call(this, e, [d, this.ui()]);
            (e != "resize" && this._trigger(e, d, this.ui()))
        },
        plugins: {},
        ui: function () {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            }
        }
    });
    c.extend(c.ui.resizable, {
        version: "1.8"
    });
    c.ui.plugin.add("resizable", "alsoResize", {
        start: function (e, f) {
            var d = c(this).data("resizable"),
                h = d.options;
            var g = function (i) {
                    c(i).each(function () {
                        c(this).data("resizable-alsoresize", {
                            width: parseInt(c(this).width(), 10),
                            height: parseInt(c(this).height(), 10),
                            left: parseInt(c(this).css("left"), 10),
                            top: parseInt(c(this).css("top"), 10)
                        })
                    })
                };
            if (typeof (h.alsoResize) == "object" && !h.alsoResize.parentNode) {
                if (h.alsoResize.length) {
                    h.alsoResize = h.alsoResize[0];
                    g(h.alsoResize)
                } else {
                    c.each(h.alsoResize, function (i, j) {
                        g(i)
                    })
                }
            } else {
                g(h.alsoResize)
            }
        },
        resize: function (f, h) {
            var e = c(this).data("resizable"),
                i = e.options,
                g = e.originalSize,
                k = e.originalPosition;
            var j = {
                height: (e.size.height - g.height) || 0,
                width: (e.size.width - g.width) || 0,
                top: (e.position.top - k.top) || 0,
                left: (e.position.left - k.left) || 0
            },
                d = function (l, m) {
                    c(l).each(function () {
                        var p = c(this),
                            q = c(this).data("resizable-alsoresize"),
                            o = {},
                            n = m && m.length ? m : ["width", "height", "top", "left"];
                        c.each(n || ["width", "height", "top", "left"], function (r, u) {
                            var s = (q[u] || 0) + (j[u] || 0);
                            if (s && s >= 0) {
                                o[u] = s || null
                            }
                        });
                        if (/relative/.test(p.css("position")) && c.browser.opera) {
                            e._revertToRelativePosition = true;
                            p.css({
                                position: "absolute",
                                top: "auto",
                                left: "auto"
                            })
                        }
                        p.css(o)
                    })
                };
            if (typeof (i.alsoResize) == "object" && !i.alsoResize.nodeType) {
                c.each(i.alsoResize, function (l, m) {
                    d(l, m)
                })
            } else {
                d(i.alsoResize)
            }
        },
        stop: function (e, f) {
            var d = c(this).data("resizable");
            if (d._revertToRelativePosition && c.browser.opera) {
                d._revertToRelativePosition = false;
                el.css({
                    position: "relative"
                })
            }
            c(this).removeData("resizable-alsoresize-start")
        }
    });
    c.ui.plugin.add("resizable", "animate", {
        stop: function (h, m) {
            var n = c(this).data("resizable"),
                i = n.options;
            var g = n._proportionallyResizeElements,
                d = g.length && (/textarea/i).test(g[0].nodeName),
                e = d && c.ui.hasScroll(g[0], "left") ? 0 : n.sizeDiff.height,
                k = d ? 0 : n.sizeDiff.width;
            var f = {
                width: (n.size.width - k),
                height: (n.size.height - e)
            },
                j = (parseInt(n.element.css("left"), 10) + (n.position.left - n.originalPosition.left)) || null,
                l = (parseInt(n.element.css("top"), 10) + (n.position.top - n.originalPosition.top)) || null;
            n.element.animate(c.extend(f, l && j ? {
                top: l,
                left: j
            } : {}), {
                duration: i.animateDuration,
                easing: i.animateEasing,
                step: function () {
                    var o = {
                        width: parseInt(n.element.css("width"), 10),
                        height: parseInt(n.element.css("height"), 10),
                        top: parseInt(n.element.css("top"), 10),
                        left: parseInt(n.element.css("left"), 10)
                    };
                    if (g && g.length) {
                        c(g[0]).css({
                            width: o.width,
                            height: o.height
                        })
                    }
                    n._updateCache(o);
                    n._propagate("resize", h)
                }
            })
        }
    });
    c.ui.plugin.add("resizable", "containment", {
        start: function (e, q) {
            var s = c(this).data("resizable"),
                i = s.options,
                k = s.element;
            var f = i.containment,
                j = (f instanceof c) ? f.get(0) : (/parent/.test(f)) ? k.parent().get(0) : f;
            if (!j) {
                return
            }
            s.containerElement = c(j);
            if (/document/.test(f) || f == document) {
                s.containerOffset = {
                    left: 0,
                    top: 0
                };
                s.containerPosition = {
                    left: 0,
                    top: 0
                };
                s.parentData = {
                    element: c(document),
                    left: 0,
                    top: 0,
                    width: c(document).width(),
                    height: c(document).height() || document.body.parentNode.scrollHeight
                }
            } else {
                var m = c(j),
                    h = [];
                c(["Top", "Right", "Left", "Bottom"]).each(function (p, o) {
                    h[p] = b(m.css("padding" + o))
                });
                s.containerOffset = m.offset();
                s.containerPosition = m.position();
                s.containerSize = {
                    height: (m.innerHeight() - h[3]),
                    width: (m.innerWidth() - h[1])
                };
                var n = s.containerOffset,
                    d = s.containerSize.height,
                    l = s.containerSize.width,
                    g = (c.ui.hasScroll(j, "left") ? j.scrollWidth : l),
                    r = (c.ui.hasScroll(j) ? j.scrollHeight : d);
                s.parentData = {
                    element: j,
                    left: n.left,
                    top: n.top,
                    width: g,
                    height: r
                }
            }
        },
        resize: function (f, p) {
            var s = c(this).data("resizable"),
                h = s.options,
                e = s.containerSize,
                n = s.containerOffset,
                l = s.size,
                m = s.position,
                q = s._aspectRatio || f.shiftKey,
                d = {
                    top: 0,
                    left: 0
                },
                g = s.containerElement;
            if (g[0] != document && (/static/).test(g.css("position"))) {
                d = n
            }
            if (m.left < (s._helper ? n.left : 0)) {
                s.size.width = s.size.width + (s._helper ? (s.position.left - n.left) : (s.position.left - d.left));
                if (q) {
                    s.size.height = s.size.width / h.aspectRatio
                }
                s.position.left = h.helper ? n.left : 0
            }
            if (m.top < (s._helper ? n.top : 0)) {
                s.size.height = s.size.height + (s._helper ? (s.position.top - n.top) : s.position.top);
                if (q) {
                    s.size.width = s.size.height * h.aspectRatio
                }
                s.position.top = s._helper ? n.top : 0
            }
            s.offset.left = s.parentData.left + s.position.left;
            s.offset.top = s.parentData.top + s.position.top;
            var k = Math.abs((s._helper ? s.offset.left - d.left : (s.offset.left - d.left)) + s.sizeDiff.width),
                r = Math.abs((s._helper ? s.offset.top - d.top : (s.offset.top - n.top)) + s.sizeDiff.height);
            var j = s.containerElement.get(0) == s.element.parent().get(0),
                i = /relative|absolute/.test(s.containerElement.css("position"));
            if (j && i) {
                k -= s.parentData.left
            }
            if (k + s.size.width >= s.parentData.width) {
                s.size.width = s.parentData.width - k;
                if (q) {
                    s.size.height = s.size.width / s.aspectRatio
                }
            }
            if (r + s.size.height >= s.parentData.height) {
                s.size.height = s.parentData.height - r;
                if (q) {
                    s.size.width = s.size.height * s.aspectRatio
                }
            }
        },
        stop: function (e, m) {
            var p = c(this).data("resizable"),
                f = p.options,
                k = p.position,
                l = p.containerOffset,
                d = p.containerPosition,
                g = p.containerElement;
            var i = c(p.helper),
                q = i.offset(),
                n = i.outerWidth() - p.sizeDiff.width,
                j = i.outerHeight() - p.sizeDiff.height;
            if (p._helper && !f.animate && (/relative/).test(g.css("position"))) {
                c(this).css({
                    left: q.left - d.left - l.left,
                    width: n,
                    height: j
                })
            }
            if (p._helper && !f.animate && (/static/).test(g.css("position"))) {
                c(this).css({
                    left: q.left - d.left - l.left,
                    width: n,
                    height: j
                })
            }
        }
    });
    c.ui.plugin.add("resizable", "ghost", {
        start: function (f, g) {
            var d = c(this).data("resizable"),
                h = d.options,
                e = d.size;
            d.ghost = d.originalElement.clone();
            d.ghost.css({
                opacity: 0.25,
                display: "block",
                position: "relative",
                height: e.height,
                width: e.width,
                margin: 0,
                left: 0,
                top: 0
            }).addClass("ui-resizable-ghost").addClass(typeof h.ghost == "string" ? h.ghost : "");
            d.ghost.appendTo(d.helper)
        },
        resize: function (e, f) {
            var d = c(this).data("resizable"),
                g = d.options;
            if (d.ghost) {
                d.ghost.css({
                    position: "relative",
                    height: d.size.height,
                    width: d.size.width
                })
            }
        },
        stop: function (e, f) {
            var d = c(this).data("resizable"),
                g = d.options;
            if (d.ghost && d.helper) {
                d.helper.get(0).removeChild(d.ghost.get(0))
            }
        }
    });
    c.ui.plugin.add("resizable", "grid", {
        resize: function (d, l) {
            var n = c(this).data("resizable"),
                g = n.options,
                j = n.size,
                h = n.originalSize,
                i = n.originalPosition,
                m = n.axis,
                k = g._aspectRatio || d.shiftKey;
            g.grid = typeof g.grid == "number" ? [g.grid, g.grid] : g.grid;
            var f = Math.round((j.width - h.width) / (g.grid[0] || 1)) * (g.grid[0] || 1),
                e = Math.round((j.height - h.height) / (g.grid[1] || 1)) * (g.grid[1] || 1);
            if (/^(se|s|e)$/.test(m)) {
                n.size.width = h.width + f;
                n.size.height = h.height + e
            } else {
                if (/^(ne)$/.test(m)) {
                    n.size.width = h.width + f;
                    n.size.height = h.height + e;
                    n.position.top = i.top - e
                } else {
                    if (/^(sw)$/.test(m)) {
                        n.size.width = h.width + f;
                        n.size.height = h.height + e;
                        n.position.left = i.left - f
                    } else {
                        n.size.width = h.width + f;
                        n.size.height = h.height + e;
                        n.position.top = i.top - e;
                        n.position.left = i.left - f
                    }
                }
            }
        }
    });
    var b = function (d) {
            return parseInt(d, 10) || 0
        };
    var a = function (d) {
            return !isNaN(parseInt(d, 10))
        }
})(jQuery);
(function (a) {
    a.widget("ui.selectable", a.ui.mouse, {
        options: {
            appendTo: "body",
            autoRefresh: true,
            distance: 0,
            filter: "*",
            tolerance: "touch"
        },
        _create: function () {
            var b = this;
            this.element.addClass("ui-selectable");
            this.dragged = false;
            var c;
            this.refresh = function () {
                c = a(b.options.filter, b.element[0]);
                c.each(function () {
                    var d = a(this);
                    var e = d.offset();
                    a.data(this, "selectable-item", {
                        element: this,
                        $element: d,
                        left: e.left,
                        top: e.top,
                        right: e.left + d.outerWidth(),
                        bottom: e.top + d.outerHeight(),
                        startselected: false,
                        selected: d.hasClass("ui-selected"),
                        selecting: d.hasClass("ui-selecting"),
                        unselecting: d.hasClass("ui-unselecting")
                    })
                })
            };
            this.refresh();
            this.selectees = c.addClass("ui-selectee");
            this._mouseInit();
            this.helper = a(document.createElement("div")).css({
                border: "1px dotted black"
            }).addClass("ui-selectable-helper")
        },
        destroy: function () {
            this.selectees.removeClass("ui-selectee").removeData("selectable-item");
            this.element.removeClass("ui-selectable ui-selectable-disabled").removeData("selectable").unbind(".selectable");
            this._mouseDestroy();
            return this
        },
        _mouseStart: function (d) {
            var b = this;
            this.opos = [d.pageX, d.pageY];
            if (this.options.disabled) {
                return
            }
            var c = this.options;
            this.selectees = a(c.filter, this.element[0]);
            this._trigger("start", d);
            a(c.appendTo).append(this.helper);
            this.helper.css({
                "z-index": 100,
                position: "absolute",
                left: d.clientX,
                top: d.clientY,
                width: 0,
                height: 0
            });
            if (c.autoRefresh) {
                this.refresh()
            }
            this.selectees.filter(".ui-selected").each(function () {
                var e = a.data(this, "selectable-item");
                e.startselected = true;
                if (!d.metaKey) {
                    e.$element.removeClass("ui-selected");
                    e.selected = false;
                    e.$element.addClass("ui-unselecting");
                    e.unselecting = true;
                    b._trigger("unselecting", d, {
                        unselecting: e.element
                    })
                }
            });
            a(d.target).parents().andSelf().each(function () {
                var e = a.data(this, "selectable-item");
                if (e) {
                    e.$element.removeClass("ui-unselecting").addClass("ui-selecting");
                    e.unselecting = false;
                    e.selecting = true;
                    e.selected = true;
                    b._trigger("selecting", d, {
                        selecting: e.element
                    });
                    return false
                }
            })
        },
        _mouseDrag: function (i) {
            var c = this;
            this.dragged = true;
            if (this.options.disabled) {
                return
            }
            var e = this.options;
            var d = this.opos[0],
                h = this.opos[1],
                b = i.pageX,
                g = i.pageY;
            if (d > b) {
                var f = b;
                b = d;
                d = f
            }
            if (h > g) {
                var f = g;
                g = h;
                h = f
            }
            this.helper.css({
                left: d,
                top: h,
                width: b - d,
                height: g - h
            });
            this.selectees.each(function () {
                var j = a.data(this, "selectable-item");
                if (!j || j.element == c.element[0]) {
                    return
                }
                var k = false;
                if (e.tolerance == "touch") {
                    k = (!(j.left > b || j.right < d || j.top > g || j.bottom < h))
                } else {
                    if (e.tolerance == "fit") {
                        k = (j.left > d && j.right < b && j.top > h && j.bottom < g)
                    }
                }
                if (k) {
                    if (j.selected) {
                        j.$element.removeClass("ui-selected");
                        j.selected = false
                    }
                    if (j.unselecting) {
                        j.$element.removeClass("ui-unselecting");
                        j.unselecting = false
                    }
                    if (!j.selecting) {
                        j.$element.addClass("ui-selecting");
                        j.selecting = true;
                        c._trigger("selecting", i, {
                            selecting: j.element
                        })
                    }
                } else {
                    if (j.selecting) {
                        if (i.metaKey && j.startselected) {
                            j.$element.removeClass("ui-selecting");
                            j.selecting = false;
                            j.$element.addClass("ui-selected");
                            j.selected = true
                        } else {
                            j.$element.removeClass("ui-selecting");
                            j.selecting = false;
                            if (j.startselected) {
                                j.$element.addClass("ui-unselecting");
                                j.unselecting = true
                            }
                            c._trigger("unselecting", i, {
                                unselecting: j.element
                            })
                        }
                    }
                    if (j.selected) {
                        if (!i.metaKey && !j.startselected) {
                            j.$element.removeClass("ui-selected");
                            j.selected = false;
                            j.$element.addClass("ui-unselecting");
                            j.unselecting = true;
                            c._trigger("unselecting", i, {
                                unselecting: j.element
                            })
                        }
                    }
                }
            });
            return false
        },
        _mouseStop: function (d) {
            var b = this;
            this.dragged = false;
            var c = this.options;
            a(".ui-unselecting", this.element[0]).each(function () {
                var e = a.data(this, "selectable-item");
                e.$element.removeClass("ui-unselecting");
                e.unselecting = false;
                e.startselected = false;
                b._trigger("unselected", d, {
                    unselected: e.element
                })
            });
            a(".ui-selecting", this.element[0]).each(function () {
                var e = a.data(this, "selectable-item");
                e.$element.removeClass("ui-selecting").addClass("ui-selected");
                e.selecting = false;
                e.selected = true;
                e.startselected = true;
                b._trigger("selected", d, {
                    selected: e.element
                })
            });
            this._trigger("stop", d);
            this.helper.remove();
            return false
        }
    });
    a.extend(a.ui.selectable, {
        version: "1.8"
    })
})(jQuery);
(function (a) {
    a.widget("ui.sortable", a.ui.mouse, {
        widgetEventPrefix: "sort",
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1000
        },
        _create: function () {
            var b = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? (/left|right/).test(this.items[0].item.css("float")) : false;
            this.offset = this.element.offset();
            this._mouseInit()
        },
        destroy: function () {
            this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");
            this._mouseDestroy();
            for (var b = this.items.length - 1; b >= 0; b--) {
                this.items[b].item.removeData("sortable-item")
            }
            return this
        },
        _mouseCapture: function (e, f) {
            if (this.reverting) {
                return false
            }
            if (this.options.disabled || this.options.type == "static") {
                return false
            }
            this._refreshItems(e);
            var d = null,
                c = this,
                b = a(e.target).parents().each(function () {
                    if (a.data(this, "sortable-item") == c) {
                        d = a(this);
                        return false
                    }
                });
            if (a.data(e.target, "sortable-item") == c) {
                d = a(e.target)
            }
            if (!d) {
                return false
            }
            if (this.options.handle && !f) {
                var g = false;
                a(this.options.handle, d).find("*").andSelf().each(function () {
                    if (this == e.target) {
                        g = true
                    }
                });
                if (!g) {
                    return false
                }
            }
            this.currentItem = d;
            this._removeCurrentsFromItems();
            return true
        },
        _mouseStart: function (e, f, b) {
            var g = this.options,
                c = this;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(e);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            a.extend(this.offset, {
                click: {
                    left: e.pageX - this.offset.left,
                    top: e.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this._generatePosition(e);
            this.originalPageX = e.pageX;
            this.originalPageY = e.pageY;
            (g.cursorAt && this._adjustOffsetFromHelper(g.cursorAt));
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            if (this.helper[0] != this.currentItem[0]) {
                this.currentItem.hide()
            }
            this._createPlaceholder();
            if (g.containment) {
                this._setContainment()
            }
            if (g.cursor) {
                if (a("body").css("cursor")) {
                    this._storedCursor = a("body").css("cursor")
                }
                a("body").css("cursor", g.cursor)
            }
            if (g.opacity) {
                if (this.helper.css("opacity")) {
                    this._storedOpacity = this.helper.css("opacity")
                }
                this.helper.css("opacity", g.opacity)
            }
            if (g.zIndex) {
                if (this.helper.css("zIndex")) {
                    this._storedZIndex = this.helper.css("zIndex")
                }
                this.helper.css("zIndex", g.zIndex)
            }
            if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                this.overflowOffset = this.scrollParent.offset()
            }
            this._trigger("start", e, this._uiHash());
            if (!this._preserveHelperProportions) {
                this._cacheHelperProportions()
            }
            if (!b) {
                for (var d = this.containers.length - 1; d >= 0; d--) {
                    this.containers[d]._trigger("activate", e, c._uiHash(this))
                }
            }
            if (a.ui.ddmanager) {
                a.ui.ddmanager.current = this
            }
            if (a.ui.ddmanager && !g.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(this, e)
            }
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(e);
            return true
        },
        _mouseDrag: function (f) {
            this.position = this._generatePosition(f);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs
            }
            if (this.options.scroll) {
                var g = this.options,
                    b = false;
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                    if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - f.pageY < g.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = b = this.scrollParent[0].scrollTop + g.scrollSpeed
                    } else {
                        if (f.pageY - this.overflowOffset.top < g.scrollSensitivity) {
                            this.scrollParent[0].scrollTop = b = this.scrollParent[0].scrollTop - g.scrollSpeed
                        }
                    }
                    if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - f.pageX < g.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = b = this.scrollParent[0].scrollLeft + g.scrollSpeed
                    } else {
                        if (f.pageX - this.overflowOffset.left < g.scrollSensitivity) {
                            this.scrollParent[0].scrollLeft = b = this.scrollParent[0].scrollLeft - g.scrollSpeed
                        }
                    }
                } else {
                    if (f.pageY - a(document).scrollTop() < g.scrollSensitivity) {
                        b = a(document).scrollTop(a(document).scrollTop() - g.scrollSpeed)
                    } else {
                        if (a(window).height() - (f.pageY - a(document).scrollTop()) < g.scrollSensitivity) {
                            b = a(document).scrollTop(a(document).scrollTop() + g.scrollSpeed)
                        }
                    }
                    if (f.pageX - a(document).scrollLeft() < g.scrollSensitivity) {
                        b = a(document).scrollLeft(a(document).scrollLeft() - g.scrollSpeed)
                    } else {
                        if (a(window).width() - (f.pageX - a(document).scrollLeft()) < g.scrollSensitivity) {
                            b = a(document).scrollLeft(a(document).scrollLeft() + g.scrollSpeed)
                        }
                    }
                }
                if (b !== false && a.ui.ddmanager && !g.dropBehaviour) {
                    a.ui.ddmanager.prepareOffsets(this, f)
                }
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis != "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis != "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            for (var d = this.items.length - 1; d >= 0; d--) {
                var e = this.items[d],
                    c = e.item[0],
                    h = this._intersectsWithPointer(e);
                if (!h) {
                    continue
                }
                if (c != this.currentItem[0] && this.placeholder[h == 1 ? "next" : "prev"]()[0] != c && !a.ui.contains(this.placeholder[0], c) && (this.options.type == "semi-dynamic" ? !a.ui.contains(this.element[0], c) : true)) {
                    this.direction = h == 1 ? "down" : "up";
                    if (this.options.tolerance == "pointer" || this._intersectsWithSides(e)) {
                        this._rearrange(f, e)
                    } else {
                        break
                    }
                    this._trigger("change", f, this._uiHash());
                    break
                }
            }
            this._contactContainers(f);
            if (a.ui.ddmanager) {
                a.ui.ddmanager.drag(this, f)
            }
            this._trigger("sort", f, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false
        },
        _mouseStop: function (c, d) {
            if (!c) {
                return
            }
            if (a.ui.ddmanager && !this.options.dropBehaviour) {
                a.ui.ddmanager.drop(this, c)
            }
            if (this.options.revert) {
                var b = this;
                var e = b.placeholder.offset();
                b.reverting = true;
                a(this.helper).animate({
                    left: e.left - this.offset.parent.left - b.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
                    top: e.top - this.offset.parent.top - b.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
                }, parseInt(this.options.revert, 10) || 500, function () {
                    b._clear(c)
                })
            } else {
                this._clear(c, d)
            }
            return false
        },
        cancel: function () {
            var b = this;
            if (this.dragging) {
                this._mouseUp();
                if (this.options.helper == "original") {
                    this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
                } else {
                    this.currentItem.show()
                }
                for (var c = this.containers.length - 1; c >= 0; c--) {
                    this.containers[c]._trigger("deactivate", null, b._uiHash(this));
                    if (this.containers[c].containerCache.over) {
                        this.containers[c]._trigger("out", null, b._uiHash(this));
                        this.containers[c].containerCache.over = 0
                    }
                }
            }
            if (this.placeholder[0].parentNode) {
                this.placeholder[0].parentNode.removeChild(this.placeholder[0])
            }
            if (this.options.helper != "original" && this.helper && this.helper[0].parentNode) {
                this.helper.remove()
            }
            a.extend(this, {
                helper: null,
                dragging: false,
                reverting: false,
                _noFinalSort: null
            });
            if (this.domPosition.prev) {
                a(this.domPosition.prev).after(this.currentItem)
            } else {
                a(this.domPosition.parent).prepend(this.currentItem)
            }
            return this
        },
        serialize: function (d) {
            var b = this._getItemsAsjQuery(d && d.connected);
            var c = [];
            d = d || {};
            a(b).each(function () {
                var e = (a(d.item || this).attr(d.attribute || "id") || "").match(d.expression || (/(.+)[-=_](.+)/));
                if (e) {
                    c.push((d.key || e[1] + "[]") + "=" + (d.key && d.expression ? e[1] : e[2]))
                }
            });
            return c.join("&")
        },
        toArray: function (d) {
            var b = this._getItemsAsjQuery(d && d.connected);
            var c = [];
            d = d || {};
            b.each(function () {
                c.push(a(d.item || this).attr(d.attribute || "id") || "")
            });
            return c
        },
        _intersectsWith: function (m) {
            var e = this.positionAbs.left,
                d = e + this.helperProportions.width,
                k = this.positionAbs.top,
                j = k + this.helperProportions.height;
            var f = m.left,
                c = f + m.width,
                n = m.top,
                i = n + m.height;
            var o = this.offset.click.top,
                h = this.offset.click.left;
            var g = (k + o) > n && (k + o) < i && (e + h) > f && (e + h) < c;
            if (this.options.tolerance == "pointer" || this.options.forcePointerForContainers || (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? "width" : "height"] > m[this.floating ? "width" : "height"])) {
                return g
            } else {
                return (f < e + (this.helperProportions.width / 2) && d - (this.helperProportions.width / 2) < c && n < k + (this.helperProportions.height / 2) && j - (this.helperProportions.height / 2) < i)
            }
        },
        _intersectsWithPointer: function (d) {
            var e = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, d.top, d.height),
                c = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, d.left, d.width),
                g = e && c,
                b = this._getDragVerticalDirection(),
                f = this._getDragHorizontalDirection();
            if (!g) {
                return false
            }
            return this.floating ? (((f && f == "right") || b == "down") ? 2 : 1) : (b && (b == "down" ? 2 : 1))
        },
        _intersectsWithSides: function (e) {
            var c = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, e.top + (e.height / 2), e.height),
                d = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, e.left + (e.width / 2), e.width),
                b = this._getDragVerticalDirection(),
                f = this._getDragHorizontalDirection();
            if (this.floating && f) {
                return ((f == "right" && d) || (f == "left" && !d))
            } else {
                return b && ((b == "down" && c) || (b == "up" && !c))
            }
        },
        _getDragVerticalDirection: function () {
            var b = this.positionAbs.top - this.lastPositionAbs.top;
            return b != 0 && (b > 0 ? "down" : "up")
        },
        _getDragHorizontalDirection: function () {
            var b = this.positionAbs.left - this.lastPositionAbs.left;
            return b != 0 && (b > 0 ? "right" : "left")
        },
        refresh: function (b) {
            this._refreshItems(b);
            this.refreshPositions();
            return this
        },
        _connectWith: function () {
            var b = this.options;
            return b.connectWith.constructor == String ? [b.connectWith] : b.connectWith
        },
        _getItemsAsjQuery: function (b) {
            var l = this;
            var g = [];
            var e = [];
            var h = this._connectWith();
            if (h && b) {
                for (var d = h.length - 1; d >= 0; d--) {
                    var k = a(h[d]);
                    for (var c = k.length - 1; c >= 0; c--) {
                        var f = a.data(k[c], "sortable");
                        if (f && f != this && !f.options.disabled) {
                            e.push([a.isFunction(f.options.items) ? f.options.items.call(f.element) : a(f.options.items, f.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), f])
                        }
                    }
                }
            }
            e.push([a.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : a(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
            for (var d = e.length - 1; d >= 0; d--) {
                e[d][0].each(function () {
                    g.push(this)
                })
            }
            return a(g)
        },
        _removeCurrentsFromItems: function () {
            var d = this.currentItem.find(":data(sortable-item)");
            for (var c = 0; c < this.items.length; c++) {
                for (var b = 0; b < d.length; b++) {
                    if (d[b] == this.items[c].item[0]) {
                        this.items.splice(c, 1)
                    }
                }
            }
        },
        _refreshItems: function (b) {
            this.items = [];
            this.containers = [this];
            var h = this.items;
            var p = this;
            var f = [
                [a.isFunction(this.options.items) ? this.options.items.call(this.element[0], b, {
                    item: this.currentItem
                }) : a(this.options.items, this.element), this]
            ];
            var l = this._connectWith();
            if (l) {
                for (var e = l.length - 1; e >= 0; e--) {
                    var m = a(l[e]);
                    for (var d = m.length - 1; d >= 0; d--) {
                        var g = a.data(m[d], "sortable");
                        if (g && g != this && !g.options.disabled) {
                            f.push([a.isFunction(g.options.items) ? g.options.items.call(g.element[0], b, {
                                item: this.currentItem
                            }) : a(g.options.items, g.element), g]);
                            this.containers.push(g)
                        }
                    }
                }
            }
            for (var e = f.length - 1; e >= 0; e--) {
                var k = f[e][1];
                var c = f[e][0];
                for (var d = 0, n = c.length; d < n; d++) {
                    var o = a(c[d]);
                    o.data("sortable-item", k);
                    h.push({
                        item: o,
                        instance: k,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    })
                }
            }
        },
        refreshPositions: function (b) {
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset()
            }
            for (var d = this.items.length - 1; d >= 0; d--) {
                var e = this.items[d];
                var c = this.options.toleranceElement ? a(this.options.toleranceElement, e.item) : e.item;
                if (!b) {
                    e.width = c.outerWidth();
                    e.height = c.outerHeight()
                }
                var f = c.offset();
                e.left = f.left;
                e.top = f.top
            }
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this)
            } else {
                for (var d = this.containers.length - 1; d >= 0; d--) {
                    var f = this.containers[d].element.offset();
                    this.containers[d].containerCache.left = f.left;
                    this.containers[d].containerCache.top = f.top;
                    this.containers[d].containerCache.width = this.containers[d].element.outerWidth();
                    this.containers[d].containerCache.height = this.containers[d].element.outerHeight()
                }
            }
            return this
        },
        _createPlaceholder: function (d) {
            var b = d || this,
                e = b.options;
            if (!e.placeholder || e.placeholder.constructor == String) {
                var c = e.placeholder;
                e.placeholder = {
                    element: function () {
                        var f = a(document.createElement(b.currentItem[0].nodeName)).addClass(c || b.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                        if (!c) {
                            f.style.visibility = "hidden"
                        }
                        return f
                    },
                    update: function (f, g) {
                        if (c && !e.forcePlaceholderSize) {
                            return
                        }
                        if (!g.height()) {
                            g.height(b.currentItem.innerHeight() - parseInt(b.currentItem.css("paddingTop") || 0, 10) - parseInt(b.currentItem.css("paddingBottom") || 0, 10))
                        }
                        if (!g.width()) {
                            g.width(b.currentItem.innerWidth() - parseInt(b.currentItem.css("paddingLeft") || 0, 10) - parseInt(b.currentItem.css("paddingRight") || 0, 10))
                        }
                    }
                }
            }
            b.placeholder = a(e.placeholder.element.call(b.element, b.currentItem));
            b.currentItem.after(b.placeholder);
            e.placeholder.update(b, b.placeholder)
        },
        _contactContainers: function (b) {
            var d = null,
                k = null;
            for (var f = this.containers.length - 1; f >= 0; f--) {
                if (a.ui.contains(this.currentItem[0], this.containers[f].element[0])) {
                    continue
                }
                if (this._intersectsWith(this.containers[f].containerCache)) {
                    if (d && a.ui.contains(this.containers[f].element[0], d.element[0])) {
                        continue
                    }
                    d = this.containers[f];
                    k = f
                } else {
                    if (this.containers[f].containerCache.over) {
                        this.containers[f]._trigger("out", b, this._uiHash(this));
                        this.containers[f].containerCache.over = 0
                    }
                }
            }
            if (!d) {
                return
            }
            if (this.containers.length === 1) {
                this.containers[k]._trigger("over", b, this._uiHash(this));
                this.containers[k].containerCache.over = 1
            } else {
                if (this.currentContainer != this.containers[k]) {
                    var h = 10000;
                    var g = null;
                    var c = this.positionAbs[this.containers[k].floating ? "left" : "top"];
                    for (var e = this.items.length - 1; e >= 0; e--) {
                        if (!a.ui.contains(this.containers[k].element[0], this.items[e].item[0])) {
                            continue
                        }
                        var l = this.items[e][this.containers[k].floating ? "left" : "top"];
                        if (Math.abs(l - c) < h) {
                            h = Math.abs(l - c);
                            g = this.items[e]
                        }
                    }
                    if (!g && !this.options.dropOnEmpty) {
                        return
                    }
                    this.currentContainer = this.containers[k];
                    g ? this._rearrange(b, g, null, true) : this._rearrange(b, null, this.containers[k].element, true);
                    this._trigger("change", b, this._uiHash());
                    this.containers[k]._trigger("change", b, this._uiHash(this));
                    this.options.placeholder.update(this.currentContainer, this.placeholder);
                    this.containers[k]._trigger("over", b, this._uiHash(this));
                    this.containers[k].containerCache.over = 1
                }
            }
        },
        _createHelper: function (c) {
            var d = this.options;
            var b = a.isFunction(d.helper) ? a(d.helper.apply(this.element[0], [c, this.currentItem])) : (d.helper == "clone" ? this.currentItem.clone() : this.currentItem);
            if (!b.parents("body").length) {
                a(d.appendTo != "parent" ? d.appendTo : this.currentItem[0].parentNode)[0].appendChild(b[0])
            }
            if (b[0] == this.currentItem[0]) {
                this._storedCSS = {
                    width: this.currentItem[0].style.width,
                    height: this.currentItem[0].style.height,
                    position: this.currentItem.css("position"),
                    top: this.currentItem.css("top"),
                    left: this.currentItem.css("left")
                }
            }
            if (b[0].style.width == "" || d.forceHelperSize) {
                b.width(this.currentItem.width())
            }
            if (b[0].style.height == "" || d.forceHelperSize) {
                b.height(this.currentItem.height())
            }
            return b
        },
        _adjustOffsetFromHelper: function (b) {
            if (typeof b == "string") {
                b = b.split(" ")
            }
            if (a.isArray(b)) {
                b = {
                    left: +b[0],
                    top: +b[1] || 0
                }
            }
            if ("left" in b) {
                this.offset.click.left = b.left + this.margins.left
            }
            if ("right" in b) {
                this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
            }
            if ("top" in b) {
                this.offset.click.top = b.top + this.margins.top
            }
            if ("bottom" in b) {
                this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
            }
        },
        _getParentOffset: function () {
            this.offsetParent = this.helper.offsetParent();
            var b = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                b.left += this.scrollParent.scrollLeft();
                b.top += this.scrollParent.scrollTop()
            }
            if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie)) {
                b = {
                    top: 0,
                    left: 0
                }
            }
            return {
                top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function () {
            if (this.cssPosition == "relative") {
                var b = this.currentItem.position();
                return {
                    top: b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else {
                return {
                    top: 0,
                    left: 0
                }
            }
        },
        _cacheMargins: function () {
            this.margins = {
                left: (parseInt(this.currentItem.css("marginLeft"), 10) || 0),
                top: (parseInt(this.currentItem.css("marginTop"), 10) || 0)
            }
        },
        _cacheHelperProportions: function () {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function () {
            var e = this.options;
            if (e.containment == "parent") {
                e.containment = this.helper[0].parentNode
            }
            if (e.containment == "document" || e.containment == "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(e.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(e.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!(/^(document|window|parent)$/).test(e.containment)) {
                var c = a(e.containment)[0];
                var d = a(e.containment).offset();
                var b = (a(c).css("overflow") != "hidden");
                this.containment = [d.left + (parseInt(a(c).css("borderLeftWidth"), 10) || 0) + (parseInt(a(c).css("paddingLeft"), 10) || 0) - this.margins.left, d.top + (parseInt(a(c).css("borderTopWidth"), 10) || 0) + (parseInt(a(c).css("paddingTop"), 10) || 0) - this.margins.top, d.left + (b ? Math.max(c.scrollWidth, c.offsetWidth) : c.offsetWidth) - (parseInt(a(c).css("borderLeftWidth"), 10) || 0) - (parseInt(a(c).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, d.top + (b ? Math.max(c.scrollHeight, c.offsetHeight) : c.offsetHeight) - (parseInt(a(c).css("borderTopWidth"), 10) || 0) - (parseInt(a(c).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            }
        },
        _convertPositionTo: function (f, h) {
            if (!h) {
                h = this.position
            }
            var c = f == "absolute" ? 1 : -1;
            var e = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                g = (/(html|body)/i).test(b[0].tagName);
            return {
                top: (h.top + this.offset.relative.top * c + this.offset.parent.top * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (g ? 0 : b.scrollTop())) * c)),
                left: (h.left + this.offset.relative.left * c + this.offset.parent.left * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : g ? 0 : b.scrollLeft()) * c))
            }
        },
        _generatePosition: function (e) {
            var h = this.options,
                b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                i = (/(html|body)/i).test(b[0].tagName);
            if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset()
            }
            var d = e.pageX;
            var c = e.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (e.pageX - this.offset.click.left < this.containment[0]) {
                        d = this.containment[0] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top < this.containment[1]) {
                        c = this.containment[1] + this.offset.click.top
                    }
                    if (e.pageX - this.offset.click.left > this.containment[2]) {
                        d = this.containment[2] + this.offset.click.left
                    }
                    if (e.pageY - this.offset.click.top > this.containment[3]) {
                        c = this.containment[3] + this.offset.click.top
                    }
                }
                if (h.grid) {
                    var g = this.originalPageY + Math.round((c - this.originalPageY) / h.grid[1]) * h.grid[1];
                    c = this.containment ? (!(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : (!(g - this.offset.click.top < this.containment[1]) ? g - h.grid[1] : g + h.grid[1])) : g;
                    var f = this.originalPageX + Math.round((d - this.originalPageX) / h.grid[0]) * h.grid[0];
                    d = this.containment ? (!(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : (!(f - this.offset.click.left < this.containment[0]) ? f - h.grid[0] : f + h.grid[0])) : f
                }
            }
            return {
                top: (c - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (i ? 0 : b.scrollTop())))),
                left: (d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : b.scrollLeft())))
            }
        },
        _rearrange: function (g, f, c, e) {
            c ? c[0].appendChild(this.placeholder[0]) : f.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == "down" ? f.item[0] : f.item[0].nextSibling));
            this.counter = this.counter ? ++this.counter : 1;
            var d = this,
                b = this.counter;
            window.setTimeout(function () {
                if (b == d.counter) {
                    d.refreshPositions(!e)
                }
            }, 0)
        },
        _clear: function (d, e) {
            this.reverting = false;
            var f = [],
                b = this;
            if (!this._noFinalSort && this.currentItem[0].parentNode) {
                this.placeholder.before(this.currentItem)
            }
            this._noFinalSort = null;
            if (this.helper[0] == this.currentItem[0]) {
                for (var c in this._storedCSS) {
                    if (this._storedCSS[c] == "auto" || this._storedCSS[c] == "static") {
                        this._storedCSS[c] = ""
                    }
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
            } else {
                this.currentItem.show()
            }
            if (this.fromOutside && !e) {
                f.push(function (g) {
                    this._trigger("receive", g, this._uiHash(this.fromOutside))
                })
            }
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !e) {
                f.push(function (g) {
                    this._trigger("update", g, this._uiHash())
                })
            }
            if (!a.ui.contains(this.element[0], this.currentItem[0])) {
                if (!e) {
                    f.push(function (g) {
                        this._trigger("remove", g, this._uiHash())
                    })
                }
                for (var c = this.containers.length - 1; c >= 0; c--) {
                    if (a.ui.contains(this.containers[c].element[0], this.currentItem[0]) && !e) {
                        f.push((function (g) {
                            return function (h) {
                                g._trigger("receive", h, this._uiHash(this))
                            }
                        }).call(this, this.containers[c]));
                        f.push((function (g) {
                            return function (h) {
                                g._trigger("update", h, this._uiHash(this))
                            }
                        }).call(this, this.containers[c]))
                    }
                }
            }
            for (var c = this.containers.length - 1; c >= 0; c--) {
                if (!e) {
                    f.push((function (g) {
                        return function (h) {
                            g._trigger("deactivate", h, this._uiHash(this))
                        }
                    }).call(this, this.containers[c]))
                }
                if (this.containers[c].containerCache.over) {
                    f.push((function (g) {
                        return function (h) {
                            g._trigger("out", h, this._uiHash(this))
                        }
                    }).call(this, this.containers[c]));
                    this.containers[c].containerCache.over = 0
                }
            }
            if (this._storedCursor) {
                a("body").css("cursor", this._storedCursor)
            }
            if (this._storedOpacity) {
                this.helper.css("opacity", this._storedOpacity)
            }
            if (this._storedZIndex) {
                this.helper.css("zIndex", this._storedZIndex == "auto" ? "" : this._storedZIndex)
            }
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!e) {
                    this._trigger("beforeStop", d, this._uiHash());
                    for (var c = 0; c < f.length; c++) {
                        f[c].call(this, d)
                    }
                    this._trigger("stop", d, this._uiHash())
                }
                return false
            }
            if (!e) {
                this._trigger("beforeStop", d, this._uiHash())
            }
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (this.helper[0] != this.currentItem[0]) {
                this.helper.remove()
            }
            this.helper = null;
            if (!e) {
                for (var c = 0; c < f.length; c++) {
                    f[c].call(this, d)
                }
                this._trigger("stop", d, this._uiHash())
            }
            this.fromOutside = false;
            return true
        },
        _trigger: function () {
            if (a.Widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel()
            }
        },
        _uiHash: function (c) {
            var b = c || this;
            return {
                helper: b.helper,
                placeholder: b.placeholder || a([]),
                position: b.position,
                originalPosition: b.originalPosition,
                offset: b.positionAbs,
                item: b.currentItem,
                sender: c ? c.element : null
            }
        }
    });
    a.extend(a.ui.sortable, {
        version: "1.8"
    })
})(jQuery);
jQuery.effects || (function (g) {
    g.effects = {};
    g.each(["backgroundColor", "borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor", "color", "outlineColor"], function (l, k) {
        g.fx.step[k] = function (m) {
            if (!m.colorInit) {
                m.start = j(m.elem, k);
                m.end = i(m.end);
                m.colorInit = true
            }
            m.elem.style[k] = "rgb(" + Math.max(Math.min(parseInt((m.pos * (m.end[0] - m.start[0])) + m.start[0], 10), 255), 0) + "," + Math.max(Math.min(parseInt((m.pos * (m.end[1] - m.start[1])) + m.start[1], 10), 255), 0) + "," + Math.max(Math.min(parseInt((m.pos * (m.end[2] - m.start[2])) + m.start[2], 10), 255), 0) + ")"
        }
    });

    function i(l) {
        var k;
        if (l && l.constructor == Array && l.length == 3) {
            return l
        }
        if (k = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(l)) {
            return [parseInt(k[1], 10), parseInt(k[2], 10), parseInt(k[3], 10)]
        }
        if (k = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(l)) {
            return [parseFloat(k[1]) * 2.55, parseFloat(k[2]) * 2.55, parseFloat(k[3]) * 2.55]
        }
        if (k = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(l)) {
            return [parseInt(k[1], 16), parseInt(k[2], 16), parseInt(k[3], 16)]
        }
        if (k = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(l)) {

            return [parseInt(k[1] + k[1], 16), parseInt(k[2] + k[2], 16), parseInt(k[3] + k[3], 16)]
        }
        if (k = /rgba\(0, 0, 0, 0\)/.exec(l)) {
            return a.transparent
        }
        return a[g.trim(l).toLowerCase()]
    }
    function j(m, k) {
        var l;
        do {
            l = g.curCSS(m, k);
            if (l != "" && l != "transparent" || g.nodeName(m, "body")) {
                break
            }
            k = "backgroundColor"
        } while (m = m.parentNode);
        return i(l)
    }
    var a = {
        aqua: [0, 255, 255],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        black: [0, 0, 0],
        blue: [0, 0, 255],
        brown: [165, 42, 42],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgrey: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkviolet: [148, 0, 211],
        fuchsia: [255, 0, 255],
        gold: [255, 215, 0],
        green: [0, 128, 0],
        indigo: [75, 0, 130],
        khaki: [240, 230, 140],
        lightblue: [173, 216, 230],
        lightcyan: [224, 255, 255],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        navy: [0, 0, 128],
        olive: [128, 128, 0],
        orange: [255, 165, 0],
        pink: [255, 192, 203],
        purple: [128, 0, 128],
        violet: [128, 0, 128],
        red: [255, 0, 0],
        silver: [192, 192, 192],
        white: [255, 255, 255],
        yellow: [255, 255, 0],
        transparent: [255, 255, 255]
    };
    var e = ["add", "remove", "toggle"],
        c = {
            border: 1,
            borderBottom: 1,
            borderColor: 1,
            borderLeft: 1,
            borderRight: 1,
            borderTop: 1,
            borderWidth: 1,
            margin: 1,
            padding: 1
        };

    function f() {
        var n = document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle,
            o = {},
            l, m;
        if (n && n.length && n[0] && n[n[0]]) {
            var k = n.length;
            while (k--) {
                l = n[k];
                if (typeof n[l] == "string") {
                    m = l.replace(/\-(\w)/g, function (p, q) {
                        return q.toUpperCase()
                    });
                    o[m] = n[l]
                }
            }
        } else {
            for (l in n) {
                if (typeof n[l] === "string") {
                    o[l] = n[l]
                }
            }
        }
        return o
    }
    function b(l) {
        var k, m;
        for (k in l) {
            m = l[k];
            if (m == null || g.isFunction(m) || k in c || (/scrollbar/).test(k) || (!(/color/i).test(k) && isNaN(parseFloat(m)))) {
                delete l[k]
            }
        }
        return l
    }
    function h(k, m) {
        var n = {
            _: 0
        },
            l;
        for (l in m) {
            if (k[l] != m[l]) {
                n[l] = m[l]
            }
        }
        return n
    }
    g.effects.animateClass = function (k, l, n, m) {
        if (g.isFunction(n)) {
            m = n;
            n = null
        }
        return this.each(function () {
            var r = g(this),
                o = r.attr("style") || " ",
                s = b(f.call(this)),
                q, p = r.attr("className");
            g.each(e, function (u, v) {
                if (k[v]) {
                    r[v + "Class"](k[v])
                }
            });
            q = b(f.call(this));
            r.attr("className", p);
            r.animate(h(s, q), l, n, function () {
                g.each(e, function (u, v) {
                    if (k[v]) {
                        r[v + "Class"](k[v])
                    }
                });
                if (typeof r.attr("style") == "object") {
                    r.attr("style").cssText = "";
                    r.attr("style").cssText = o
                } else {
                    r.attr("style", o)
                }
                if (m) {
                    m.apply(this, arguments)
                }
            })
        })
    };
    g.fn.extend({
        _addClass: g.fn.addClass,
        addClass: function (l, k, n, m) {
            return k ? g.effects.animateClass.apply(this, [{
                add: l
            },
            k, n, m]) : this._addClass(l)
        },
        _removeClass: g.fn.removeClass,
        removeClass: function (l, k, n, m) {
            return k ? g.effects.animateClass.apply(this, [{
                remove: l
            },
            k, n, m]) : this._removeClass(l)
        },
        _toggleClass: g.fn.toggleClass,
        toggleClass: function (m, l, k, o, n) {
            if (typeof l == "boolean" || l === undefined) {
                if (!k) {
                    return this._toggleClass(m, l)
                } else {
                    return g.effects.animateClass.apply(this, [(l ? {
                        add: m
                    } : {
                        remove: m
                    }), k, o, n])
                }
            } else {
                return g.effects.animateClass.apply(this, [{
                    toggle: m
                },
                l, k, o])
            }
        },
        switchClass: function (k, m, l, o, n) {
            return g.effects.animateClass.apply(this, [{
                add: m,
                remove: k
            },
            l, o, n])
        }
    });
    g.extend(g.effects, {
        version: "1.8",
        save: function (l, m) {
            for (var k = 0; k < m.length; k++) {
                if (m[k] !== null) {
                    l.data("ec.storage." + m[k], l[0].style[m[k]])
                }
            }
        },
        restore: function (l, m) {
            for (var k = 0; k < m.length; k++) {
                if (m[k] !== null) {
                    l.css(m[k], l.data("ec.storage." + m[k]))
                }
            }
        },
        setMode: function (k, l) {
            if (l == "toggle") {
                l = k.is(":hidden") ? "show" : "hide"
            }
            return l
        },
        getBaseline: function (l, m) {
            var n, k;
            switch (l[0]) {
            case "top":
                n = 0;
                break;
            case "middle":
                n = 0.5;
                break;
            case "bottom":
                n = 1;
                break;
            default:
                n = l[0] / m.height
            }
            switch (l[1]) {
            case "left":
                k = 0;
                break;
            case "center":
                k = 0.5;
                break;
            case "right":
                k = 1;
                break;
            default:
                k = l[1] / m.width
            }
            return {
                x: k,
                y: n
            }
        },
        createWrapper: function (k) {
            if (k.parent().is(".ui-effects-wrapper")) {
                return k.parent()
            }
            var l = {
                width: k.outerWidth(true),
                height: k.outerHeight(true),
                "float": k.css("float")
            },
                m = g("<div></div>").addClass("ui-effects-wrapper").css({
                    fontSize: "100%",
                    background: "transparent",
                    border: "none",
                    margin: 0,
                    padding: 0
                });
            k.wrap(m);
            m = k.parent();
            if (k.css("position") == "static") {
                m.css({
                    position: "relative"
                });
                k.css({
                    position: "relative"
                })
            } else {
                g.extend(l, {
                    position: k.css("position"),
                    zIndex: k.css("z-index")
                });
                g.each(["top", "left", "bottom", "right"], function (n, o) {
                    l[o] = k.css(o);
                    if (isNaN(parseInt(l[o], 10))) {
                        l[o] = "auto"
                    }
                });
                k.css({
                    position: "relative",
                    top: 0,
                    left: 0
                })
            }
            return m.css(l).show()
        },
        removeWrapper: function (k) {
            if (k.parent().is(".ui-effects-wrapper")) {
                return k.parent().replaceWith(k)
            }
            return k
        },
        setTransition: function (l, n, k, m) {
            m = m || {};
            g.each(n, function (p, o) {
                unit = l.cssUnit(o);
                if (unit[0] > 0) {
                    m[o] = unit[0] * k + unit[1]
                }
            });
            return m
        }
    });

    function d(l, k, m, n) {
        if (typeof l == "object") {
            n = k;
            m = null;
            k = l;
            l = k.effect
        }
        if (g.isFunction(k)) {
            n = k;
            m = null;
            k = {}
        }
        if (g.isFunction(m)) {
            n = m;
            m = null
        }
        if (typeof k == "number" || g.fx.speeds[k]) {
            n = m;
            m = k;
            k = {}
        }
        k = k || {};
        m = m || k.duration;
        m = g.fx.off ? 0 : typeof m == "number" ? m : g.fx.speeds[m] || g.fx.speeds._default;
        n = n || k.complete;
        return [l, k, m, n]
    }
    g.fn.extend({
        effect: function (n, m, p, q) {
            var l = d.apply(this, arguments),
                o = {
                    options: l[1],
                    duration: l[2],
                    callback: l[3]
                },
                k = g.effects[n];
            return k && !g.fx.off ? k.call(this, o) : this
        },
        _show: g.fn.show,
        show: function (l) {
            if (!l || typeof l == "number" || g.fx.speeds[l]) {
                return this._show.apply(this, arguments)
            } else {
                var k = d.apply(this, arguments);
                k[1].mode = "show";
                return this.effect.apply(this, k)
            }
        },
        _hide: g.fn.hide,
        hide: function (l) {
            if (!l || typeof l == "number" || g.fx.speeds[l]) {
                return this._hide.apply(this, arguments)
            } else {
                var k = d.apply(this, arguments);
                k[1].mode = "hide";
                return this.effect.apply(this, k)
            }
        },
        __toggle: g.fn.toggle,
        toggle: function (l) {
            if (!l || typeof l == "number" || g.fx.speeds[l] || typeof l == "boolean" || g.isFunction(l)) {
                return this.__toggle.apply(this, arguments)
            } else {
                var k = d.apply(this, arguments);
                k[1].mode = "toggle";
                return this.effect.apply(this, k)
            }
        },
        cssUnit: function (k) {
            var l = this.css(k),
                m = [];
            g.each(["em", "px", "%", "pt"], function (n, o) {
                if (l.indexOf(o) > 0) {
                    m = [parseFloat(l), o]
                }
            });
            return m
        }
    });
    g.easing.jswing = g.easing.swing;
    g.extend(g.easing, {
        def: "easeOutQuad",
        swing: function (l, m, k, o, n) {
            return g.easing[g.easing.def](l, m, k, o, n)
        },
        easeInQuad: function (l, m, k, o, n) {
            return o * (m /= n) * m + k
        },
        easeOutQuad: function (l, m, k, o, n) {
            return -o * (m /= n) * (m - 2) + k
        },
        easeInOutQuad: function (l, m, k, o, n) {
            if ((m /= n / 2) < 1) {
                return o / 2 * m * m + k
            }
            return -o / 2 * ((--m) * (m - 2) - 1) + k
        },
        easeInCubic: function (l, m, k, o, n) {
            return o * (m /= n) * m * m + k
        },
        easeOutCubic: function (l, m, k, o, n) {
            return o * ((m = m / n - 1) * m * m + 1) + k
        },
        easeInOutCubic: function (l, m, k, o, n) {
            if ((m /= n / 2) < 1) {
                return o / 2 * m * m * m + k
            }
            return o / 2 * ((m -= 2) * m * m + 2) + k
        },
        easeInQuart: function (l, m, k, o, n) {
            return o * (m /= n) * m * m * m + k
        },
        easeOutQuart: function (l, m, k, o, n) {
            return -o * ((m = m / n - 1) * m * m * m - 1) + k
        },
        easeInOutQuart: function (l, m, k, o, n) {
            if ((m /= n / 2) < 1) {
                return o / 2 * m * m * m * m + k
            }
            return -o / 2 * ((m -= 2) * m * m * m - 2) + k
        },
        easeInQuint: function (l, m, k, o, n) {
            return o * (m /= n) * m * m * m * m + k
        },
        easeOutQuint: function (l, m, k, o, n) {
            return o * ((m = m / n - 1) * m * m * m * m + 1) + k
        },
        easeInOutQuint: function (l, m, k, o, n) {
            if ((m /= n / 2) < 1) {
                return o / 2 * m * m * m * m * m + k
            }
            return o / 2 * ((m -= 2) * m * m * m * m + 2) + k
        },
        easeInSine: function (l, m, k, o, n) {
            return -o * Math.cos(m / n * (Math.PI / 2)) + o + k
        },
        easeOutSine: function (l, m, k, o, n) {
            return o * Math.sin(m / n * (Math.PI / 2)) + k
        },
        easeInOutSine: function (l, m, k, o, n) {
            return -o / 2 * (Math.cos(Math.PI * m / n) - 1) + k
        },
        easeInExpo: function (l, m, k, o, n) {
            return (m == 0) ? k : o * Math.pow(2, 10 * (m / n - 1)) + k
        },
        easeOutExpo: function (l, m, k, o, n) {
            return (m == n) ? k + o : o * (-Math.pow(2, -10 * m / n) + 1) + k
        },
        easeInOutExpo: function (l, m, k, o, n) {
            if (m == 0) {
                return k
            }
            if (m == n) {
                return k + o
            }
            if ((m /= n / 2) < 1) {
                return o / 2 * Math.pow(2, 10 * (m - 1)) + k
            }
            return o / 2 * (-Math.pow(2, -10 * --m) + 2) + k
        },
        easeInCirc: function (l, m, k, o, n) {
            return -o * (Math.sqrt(1 - (m /= n) * m) - 1) + k
        },
        easeOutCirc: function (l, m, k, o, n) {
            return o * Math.sqrt(1 - (m = m / n - 1) * m) + k
        },
        easeInOutCirc: function (l, m, k, o, n) {
            if ((m /= n / 2) < 1) {
                return -o / 2 * (Math.sqrt(1 - m * m) - 1) + k
            }
            return o / 2 * (Math.sqrt(1 - (m -= 2) * m) + 1) + k
        },
        easeInElastic: function (l, n, k, u, r) {
            var o = 1.70158;
            var q = 0;
            var m = u;
            if (n == 0) {
                return k
            }
            if ((n /= r) == 1) {
                return k + u
            }
            if (!q) {
                q = r * 0.3
            }
            if (m < Math.abs(u)) {
                m = u;
                var o = q / 4
            } else {
                var o = q / (2 * Math.PI) * Math.asin(u / m)
            }
            return -(m * Math.pow(2, 10 * (n -= 1)) * Math.sin((n * r - o) * (2 * Math.PI) / q)) + k
        },
        easeOutElastic: function (l, n, k, u, r) {
            var o = 1.70158;
            var q = 0;
            var m = u;
            if (n == 0) {
                return k
            }
            if ((n /= r) == 1) {
                return k + u
            }
            if (!q) {
                q = r * 0.3
            }
            if (m < Math.abs(u)) {
                m = u;
                var o = q / 4
            } else {
                var o = q / (2 * Math.PI) * Math.asin(u / m)
            }
            return m * Math.pow(2, -10 * n) * Math.sin((n * r - o) * (2 * Math.PI) / q) + u + k
        },
        easeInOutElastic: function (l, n, k, u, r) {
            var o = 1.70158;
            var q = 0;
            var m = u;
            if (n == 0) {
                return k
            }
            if ((n /= r / 2) == 2) {
                return k + u
            }
            if (!q) {
                q = r * (0.3 * 1.5)
            }
            if (m < Math.abs(u)) {
                m = u;
                var o = q / 4
            } else {
                var o = q / (2 * Math.PI) * Math.asin(u / m)
            }
            if (n < 1) {
                return -0.5 * (m * Math.pow(2, 10 * (n -= 1)) * Math.sin((n * r - o) * (2 * Math.PI) / q)) + k
            }
            return m * Math.pow(2, -10 * (n -= 1)) * Math.sin((n * r - o) * (2 * Math.PI) / q) * 0.5 + u + k
        },
        easeInBack: function (l, m, k, p, o, n) {
            if (n == undefined) {
                n = 1.70158
            }
            return p * (m /= o) * m * ((n + 1) * m - n) + k
        },
        easeOutBack: function (l, m, k, p, o, n) {
            if (n == undefined) {
                n = 1.70158
            }
            return p * ((m = m / o - 1) * m * ((n + 1) * m + n) + 1) + k
        },
        easeInOutBack: function (l, m, k, p, o, n) {
            if (n == undefined) {
                n = 1.70158
            }
            if ((m /= o / 2) < 1) {
                return p / 2 * (m * m * (((n *= (1.525)) + 1) * m - n)) + k
            }
            return p / 2 * ((m -= 2) * m * (((n *= (1.525)) + 1) * m + n) + 2) + k
        },
        easeInBounce: function (l, m, k, o, n) {
            return o - g.easing.easeOutBounce(l, n - m, 0, o, n) + k
        },
        easeOutBounce: function (l, m, k, o, n) {
            if ((m /= n) < (1 / 2.75)) {
                return o * (7.5625 * m * m) + k
            } else {
                if (m < (2 / 2.75)) {
                    return o * (7.5625 * (m -= (1.5 / 2.75)) * m + 0.75) + k
                } else {
                    if (m < (2.5 / 2.75)) {
                        return o * (7.5625 * (m -= (2.25 / 2.75)) * m + 0.9375) + k
                    } else {
                        return o * (7.5625 * (m -= (2.625 / 2.75)) * m + 0.984375) + k
                    }
                }
            }
        },
        easeInOutBounce: function (l, m, k, o, n) {
            if (m < n / 2) {
                return g.easing.easeInBounce(l, m * 2, 0, o, n) * 0.5 + k
            }
            return g.easing.easeOutBounce(l, m * 2 - n, 0, o, n) * 0.5 + o * 0.5 + k
        }
    })
})(jQuery);
(function (a) {
    a.effects.blind = function (b) {
        return this.queue(function () {
            var d = a(this),
                c = ["position", "top", "left"];
            var h = a.effects.setMode(d, b.options.mode || "hide");
            var g = b.options.direction || "vertical";
            a.effects.save(d, c);
            d.show();
            var j = a.effects.createWrapper(d).css({
                overflow: "hidden"
            });
            var e = (g == "vertical") ? "height" : "width";
            var i = (g == "vertical") ? j.height() : j.width();
            if (h == "show") {
                j.css(e, 0)
            }
            var f = {};
            f[e] = h == "show" ? i : 0;
            j.animate(f, b.duration, b.options.easing, function () {
                if (h == "hide") {
                    d.hide()
                }
                a.effects.restore(d, c);
                a.effects.removeWrapper(d);
                if (b.callback) {
                    b.callback.apply(d[0], arguments)
                }
                d.dequeue()
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.bounce = function (b) {
        return this.queue(function () {
            var e = a(this),
                l = ["position", "top", "left"];
            var k = a.effects.setMode(e, b.options.mode || "effect");
            var n = b.options.direction || "up";
            var c = b.options.distance || 20;
            var d = b.options.times || 5;
            var g = b.duration || 250;
            if (/show|hide/.test(k)) {
                l.push("opacity")
            }
            a.effects.save(e, l);
            e.show();
            a.effects.createWrapper(e);
            var f = (n == "up" || n == "down") ? "top" : "left";
            var p = (n == "up" || n == "left") ? "pos" : "neg";
            var c = b.options.distance || (f == "top" ? e.outerHeight({
                margin: true
            }) / 3 : e.outerWidth({
                margin: true
            }) / 3);
            if (k == "show") {
                e.css("opacity", 0).css(f, p == "pos" ? -c : c)
            }
            if (k == "hide") {
                c = c / (d * 2)
            }
            if (k != "hide") {
                d--
            }
            if (k == "show") {
                var h = {
                    opacity: 1
                };
                h[f] = (p == "pos" ? "+=" : "-=") + c;
                e.animate(h, g / 2, b.options.easing);
                c = c / 2;
                d--
            }
            for (var j = 0; j < d; j++) {
                var o = {},
                    m = {};
                o[f] = (p == "pos" ? "-=" : "+=") + c;
                m[f] = (p == "pos" ? "+=" : "-=") + c;
                e.animate(o, g / 2, b.options.easing).animate(m, g / 2, b.options.easing);
                c = (k == "hide") ? c * 2 : c / 2
            }
            if (k == "hide") {
                var h = {
                    opacity: 0
                };
                h[f] = (p == "pos" ? "-=" : "+=") + c;
                e.animate(h, g / 2, b.options.easing, function () {
                    e.hide();
                    a.effects.restore(e, l);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                })
            } else {
                var o = {},
                    m = {};
                o[f] = (p == "pos" ? "-=" : "+=") + c;
                m[f] = (p == "pos" ? "+=" : "-=") + c;
                e.animate(o, g / 2, b.options.easing).animate(m, g / 2, b.options.easing, function () {
                    a.effects.restore(e, l);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                })
            }
            e.queue("fx", function () {
                e.dequeue()
            });
            e.dequeue()
        })
    }
})(jQuery);
(function (a) {
    a.effects.clip = function (b) {
        return this.queue(function () {
            var f = a(this),
                j = ["position", "top", "left", "height", "width"];
            var i = a.effects.setMode(f, b.options.mode || "hide");
            var k = b.options.direction || "vertical";
            a.effects.save(f, j);
            f.show();
            var c = a.effects.createWrapper(f).css({
                overflow: "hidden"
            });
            var e = f[0].tagName == "IMG" ? c : f;
            var g = {
                size: (k == "vertical") ? "height" : "width",
                position: (k == "vertical") ? "top" : "left"
            };
            var d = (k == "vertical") ? e.height() : e.width();
            if (i == "show") {
                e.css(g.size, 0);
                e.css(g.position, d / 2)
            }
            var h = {};
            h[g.size] = i == "show" ? d : 0;
            h[g.position] = i == "show" ? 0 : d / 2;
            e.animate(h, {
                queue: false,
                duration: b.duration,
                easing: b.options.easing,
                complete: function () {
                    if (i == "hide") {
                        f.hide()
                    }
                    a.effects.restore(f, j);
                    a.effects.removeWrapper(f);
                    if (b.callback) {
                        b.callback.apply(f[0], arguments)
                    }
                    f.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.drop = function (b) {
        return this.queue(function () {
            var e = a(this),
                d = ["position", "top", "left", "opacity"];
            var i = a.effects.setMode(e, b.options.mode || "hide");
            var h = b.options.direction || "left";
            a.effects.save(e, d);
            e.show();
            a.effects.createWrapper(e);
            var f = (h == "up" || h == "down") ? "top" : "left";
            var c = (h == "up" || h == "left") ? "pos" : "neg";
            var j = b.options.distance || (f == "top" ? e.outerHeight({
                margin: true
            }) / 2 : e.outerWidth({
                margin: true
            }) / 2);
            if (i == "show") {
                e.css("opacity", 0).css(f, c == "pos" ? -j : j)
            }
            var g = {
                opacity: i == "show" ? 1 : 0
            };
            g[f] = (i == "show" ? (c == "pos" ? "+=" : "-=") : (c == "pos" ? "-=" : "+=")) + j;
            e.animate(g, {
                queue: false,
                duration: b.duration,
                easing: b.options.easing,
                complete: function () {
                    if (i == "hide") {
                        e.hide()
                    }
                    a.effects.restore(e, d);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                    e.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.explode = function (b) {
        return this.queue(function () {
            var k = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3;
            var e = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3;
            b.options.mode = b.options.mode == "toggle" ? (a(this).is(":visible") ? "hide" : "show") : b.options.mode;
            var h = a(this).show().css("visibility", "hidden");
            var l = h.offset();
            l.top -= parseInt(h.css("marginTop"), 10) || 0;
            l.left -= parseInt(h.css("marginLeft"), 10) || 0;
            var g = h.outerWidth(true);
            var c = h.outerHeight(true);
            for (var f = 0; f < k; f++) {
                for (var d = 0; d < e; d++) {
                    h.clone().appendTo("body").wrap("<div></div>").css({
                        position: "absolute",
                        visibility: "visible",
                        left: -d * (g / e),
                        top: -f * (c / k)
                    }).parent().addClass("ui-effects-explode").css({
                        position: "absolute",
                        overflow: "hidden",
                        width: g / e,
                        height: c / k,
                        left: l.left + d * (g / e) + (b.options.mode == "show" ? (d - Math.floor(e / 2)) * (g / e) : 0),
                        top: l.top + f * (c / k) + (b.options.mode == "show" ? (f - Math.floor(k / 2)) * (c / k) : 0),
                        opacity: b.options.mode == "show" ? 0 : 1
                    }).animate({
                        left: l.left + d * (g / e) + (b.options.mode == "show" ? 0 : (d - Math.floor(e / 2)) * (g / e)),
                        top: l.top + f * (c / k) + (b.options.mode == "show" ? 0 : (f - Math.floor(k / 2)) * (c / k)),
                        opacity: b.options.mode == "show" ? 1 : 0
                    }, b.duration || 500)
                }
            }
            setTimeout(function () {
                b.options.mode == "show" ? h.css({
                    visibility: "visible"
                }) : h.css({
                    visibility: "visible"
                }).hide();
                if (b.callback) {
                    b.callback.apply(h[0])
                }
                h.dequeue();
                a("div.ui-effects-explode").remove()
            }, b.duration || 500)
        })
    }
})(jQuery);
(function (a) {
    a.effects.fade = function (b) {
        return this.queue(function () {
            var c = a(this),
                d = a.effects.setMode(c, b.options.mode || "hide");
            c.animate({
                opacity: d
            }, {
                queue: false,
                duration: b.duration,
                easing: b.options.easing,
                complete: function () {
                    (b.callback && b.callback.apply(this, arguments));
                    c.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.fold = function (b) {
        return this.queue(function () {
            var e = a(this),
                k = ["position", "top", "left"];
            var h = a.effects.setMode(e, b.options.mode || "hide");
            var o = b.options.size || 15;
            var n = !(!b.options.horizFirst);
            var g = b.duration ? b.duration / 2 : a.fx.speeds._default / 2;
            a.effects.save(e, k);
            e.show();
            var d = a.effects.createWrapper(e).css({
                overflow: "hidden"
            });
            var i = ((h == "show") != n);
            var f = i ? ["width", "height"] : ["height", "width"];
            var c = i ? [d.width(), d.height()] : [d.height(), d.width()];
            var j = /([0-9]+)%/.exec(o);
            if (j) {
                o = parseInt(j[1], 10) / 100 * c[h == "hide" ? 0 : 1]
            }
            if (h == "show") {
                d.css(n ? {
                    height: 0,
                    width: o
                } : {
                    height: o,
                    width: 0
                })
            }
            var m = {},
                l = {};
            m[f[0]] = h == "show" ? c[0] : o;
            l[f[1]] = h == "show" ? c[1] : 0;
            d.animate(m, g, b.options.easing).animate(l, g, b.options.easing, function () {
                if (h == "hide") {
                    e.hide()
                }
                a.effects.restore(e, k);
                a.effects.removeWrapper(e);
                if (b.callback) {
                    b.callback.apply(e[0], arguments)
                }
                e.dequeue()
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.highlight = function (b) {
        return this.queue(function () {
            var d = a(this),
                c = ["backgroundImage", "backgroundColor", "opacity"],
                f = a.effects.setMode(d, b.options.mode || "show"),
                e = {
                    backgroundColor: d.css("backgroundColor")
                };
            if (f == "hide") {
                e.opacity = 0
            }
            a.effects.save(d, c);
            d.show().css({
                backgroundImage: "none",
                backgroundColor: b.options.color || "#ffff99"
            }).animate(e, {
                queue: false,
                duration: b.duration,
                easing: b.options.easing,
                complete: function () {
                    (f == "hide" && d.hide());
                    a.effects.restore(d, c);
                    (f == "show" && !a.support.opacity && this.style.removeAttribute("filter"));
                    (b.callback && b.callback.apply(this, arguments));
                    d.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.pulsate = function (b) {
        return this.queue(function () {
            var d = a(this),
                e = a.effects.setMode(d, b.options.mode || "show");
            times = ((b.options.times || 5) * 2) - 1;
            duration = b.duration ? b.duration / 2 : a.fx.speeds._default / 2, isVisible = d.is(":visible"), animateTo = 0;
            if (!isVisible) {
                d.css("opacity", 0).show();
                animateTo = 1
            }
            if ((e == "hide" && isVisible) || (e == "show" && !isVisible)) {
                times--
            }
            for (var c = 0; c < times; c++) {
                d.animate({
                    opacity: animateTo
                }, duration, b.options.easing);
                animateTo = (animateTo + 1) % 2
            }
            d.animate({
                opacity: animateTo
            }, duration, b.options.easing, function () {
                if (animateTo == 0) {
                    d.hide()
                }(b.callback && b.callback.apply(this, arguments))
            });
            d.queue("fx", function () {
                d.dequeue()
            }).dequeue()
        })
    }
})(jQuery);
(function (a) {
    a.effects.puff = function (b) {
        return this.queue(function () {
            var f = a(this),
                g = a.effects.setMode(f, b.options.mode || "hide"),
                e = parseInt(b.options.percent, 10) || 150,
                d = e / 100,
                c = {
                    height: f.height(),
                    width: f.width()
                };
            a.extend(b.options, {
                fade: true,
                mode: g,
                percent: g == "hide" ? e : 100,
                from: g == "hide" ? c : {
                    height: c.height * d,
                    width: c.width * d
                }
            });
            f.effect("scale", b.options, b.duration, b.callback);
            f.dequeue()
        })
    };
    a.effects.scale = function (b) {
        return this.queue(function () {
            var g = a(this);
            var d = a.extend(true, {}, b.options);
            var j = a.effects.setMode(g, b.options.mode || "effect");
            var h = parseInt(b.options.percent, 10) || (parseInt(b.options.percent, 10) == 0 ? 0 : (j == "hide" ? 0 : 100));
            var i = b.options.direction || "both";
            var c = b.options.origin;
            if (j != "effect") {
                d.origin = c || ["middle", "center"];
                d.restore = true
            }
            var f = {
                height: g.height(),
                width: g.width()
            };
            g.from = b.options.from || (j == "show" ? {
                height: 0,
                width: 0
            } : f);
            var e = {
                y: i != "horizontal" ? (h / 100) : 1,
                x: i != "vertical" ? (h / 100) : 1
            };
            g.to = {
                height: f.height * e.y,
                width: f.width * e.x
            };
            if (b.options.fade) {
                if (j == "show") {
                    g.from.opacity = 0;
                    g.to.opacity = 1
                }
                if (j == "hide") {
                    g.from.opacity = 1;
                    g.to.opacity = 0
                }
            }
            d.from = g.from;
            d.to = g.to;
            d.mode = j;
            g.effect("size", d, b.duration, b.callback);
            g.dequeue()
        })
    };
    a.effects.size = function (b) {
        return this.queue(function () {
            var c = a(this),
                n = ["position", "top", "left", "width", "height", "overflow", "opacity"];
            var m = ["position", "top", "left", "overflow", "opacity"];
            var j = ["width", "height", "overflow"];
            var p = ["fontSize"];
            var k = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];
            var f = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"];
            var g = a.effects.setMode(c, b.options.mode || "effect");
            var i = b.options.restore || false;
            var e = b.options.scale || "both";
            var o = b.options.origin;
            var d = {
                height: c.height(),
                width: c.width()
            };
            c.from = b.options.from || d;
            c.to = b.options.to || d;
            if (o) {
                var h = a.effects.getBaseline(o, d);
                c.from.top = (d.height - c.from.height) * h.y;
                c.from.left = (d.width - c.from.width) * h.x;
                c.to.top = (d.height - c.to.height) * h.y;
                c.to.left = (d.width - c.to.width) * h.x
            }
            var l = {
                from: {
                    y: c.from.height / d.height,
                    x: c.from.width / d.width
                },
                to: {
                    y: c.to.height / d.height,
                    x: c.to.width / d.width
                }
            };
            if (e == "box" || e == "both") {
                if (l.from.y != l.to.y) {
                    n = n.concat(k);
                    c.from = a.effects.setTransition(c, k, l.from.y, c.from);
                    c.to = a.effects.setTransition(c, k, l.to.y, c.to)
                }
                if (l.from.x != l.to.x) {
                    n = n.concat(f);
                    c.from = a.effects.setTransition(c, f, l.from.x, c.from);
                    c.to = a.effects.setTransition(c, f, l.to.x, c.to)
                }
            }
            if (e == "content" || e == "both") {
                if (l.from.y != l.to.y) {
                    n = n.concat(p);
                    c.from = a.effects.setTransition(c, p, l.from.y, c.from);
                    c.to = a.effects.setTransition(c, p, l.to.y, c.to)
                }
            }
            a.effects.save(c, i ? n : m);
            c.show();
            a.effects.createWrapper(c);
            c.css("overflow", "hidden").css(c.from);
            if (e == "content" || e == "both") {
                k = k.concat(["marginTop", "marginBottom"]).concat(p);
                f = f.concat(["marginLeft", "marginRight"]);
                j = n.concat(k).concat(f);
                c.find("*[width]").each(function () {
                    child = a(this);
                    if (i) {
                        a.effects.save(child, j)
                    }
                    var q = {
                        height: child.height(),
                        width: child.width()
                    };
                    child.from = {
                        height: q.height * l.from.y,
                        width: q.width * l.from.x
                    };
                    child.to = {
                        height: q.height * l.to.y,
                        width: q.width * l.to.x
                    };
                    if (l.from.y != l.to.y) {
                        child.from = a.effects.setTransition(child, k, l.from.y, child.from);
                        child.to = a.effects.setTransition(child, k, l.to.y, child.to)
                    }
                    if (l.from.x != l.to.x) {
                        child.from = a.effects.setTransition(child, f, l.from.x, child.from);
                        child.to = a.effects.setTransition(child, f, l.to.x, child.to)
                    }
                    child.css(child.from);
                    child.animate(child.to, b.duration, b.options.easing, function () {
                        if (i) {
                            a.effects.restore(child, j)
                        }
                    })
                })
            }
            c.animate(c.to, {
                queue: false,
                duration: b.duration,
                easing: b.options.easing,
                complete: function () {
                    if (c.to.opacity === 0) {
                        c.css("opacity", c.from.opacity)
                    }
                    if (g == "hide") {
                        c.hide()
                    }
                    a.effects.restore(c, i ? n : m);
                    a.effects.removeWrapper(c);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                    c.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.shake = function (b) {
        return this.queue(function () {
            var e = a(this),
                l = ["position", "top", "left"];
            var k = a.effects.setMode(e, b.options.mode || "effect");
            var n = b.options.direction || "left";
            var c = b.options.distance || 20;
            var d = b.options.times || 3;
            var g = b.duration || b.options.duration || 140;
            a.effects.save(e, l);
            e.show();
            a.effects.createWrapper(e);
            var f = (n == "up" || n == "down") ? "top" : "left";
            var p = (n == "up" || n == "left") ? "pos" : "neg";
            var h = {},
                o = {},
                m = {};
            h[f] = (p == "pos" ? "-=" : "+=") + c;
            o[f] = (p == "pos" ? "+=" : "-=") + c * 2;
            m[f] = (p == "pos" ? "-=" : "+=") + c * 2;
            e.animate(h, g, b.options.easing);
            for (var j = 1; j < d; j++) {
                e.animate(o, g, b.options.easing).animate(m, g, b.options.easing)
            }
            e.animate(o, g, b.options.easing).animate(h, g / 2, b.options.easing, function () {
                a.effects.restore(e, l);
                a.effects.removeWrapper(e);
                if (b.callback) {
                    b.callback.apply(this, arguments)
                }
            });
            e.queue("fx", function () {
                e.dequeue()
            });
            e.dequeue()
        })
    }
})(jQuery);
(function (a) {
    a.effects.slide = function (b) {
        return this.queue(function () {
            var e = a(this),
                d = ["position", "top", "left"];
            var i = a.effects.setMode(e, b.options.mode || "show");
            var h = b.options.direction || "left";
            a.effects.save(e, d);
            e.show();
            a.effects.createWrapper(e).css({
                overflow: "hidden"
            });
            var f = (h == "up" || h == "down") ? "top" : "left";
            var c = (h == "up" || h == "left") ? "pos" : "neg";
            var j = b.options.distance || (f == "top" ? e.outerHeight({
                margin: true
            }) : e.outerWidth({
                margin: true
            }));
            if (i == "show") {
                e.css(f, c == "pos" ? -j : j)
            }
            var g = {};
            g[f] = (i == "show" ? (c == "pos" ? "+=" : "-=") : (c == "pos" ? "-=" : "+=")) + j;
            e.animate(g, {
                queue: false,
                duration: b.duration,
                easing: b.options.easing,
                complete: function () {
                    if (i == "hide") {
                        e.hide()
                    }
                    a.effects.restore(e, d);
                    a.effects.removeWrapper(e);
                    if (b.callback) {
                        b.callback.apply(this, arguments)
                    }
                    e.dequeue()
                }
            })
        })
    }
})(jQuery);
(function (a) {
    a.effects.transfer = function (b) {
        return this.queue(function () {
            var f = a(this),
                h = a(b.options.to),
                e = h.offset(),
                g = {
                    top: e.top,
                    left: e.left,
                    height: h.innerHeight(),
                    width: h.innerWidth()
                },
                d = f.offset(),
                c = a('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(b.options.className).css({
                    top: d.top,
                    left: d.left,
                    height: f.innerHeight(),
                    width: f.innerWidth(),
                    position: "absolute"
                }).animate(g, b.duration, b.options.easing, function () {
                    c.remove();
                    (b.callback && b.callback.apply(f[0], arguments));
                    f.dequeue()
                })
        })
    }
})(jQuery);
(function (a) {
    a.widget("ui.accordion", {
        options: {
            active: 0,
            animated: "slide",
            autoHeight: true,
            clearStyle: false,
            collapsible: false,
            event: "click",
            fillSpace: false,
            header: "> li > :first-child,> :not(li):even",
            icons: {
                header: "ui-icon-triangle-1-e",
                headerSelected: "ui-icon-triangle-1-s"
            },
            navigation: false,
            navigationFilter: function () {
                return this.href.toLowerCase() == location.href.toLowerCase()
            }
        },
        _create: function () {
            var d = this.options,
                b = this;
            this.running = 0;
            this.element.addClass("ui-accordion ui-widget ui-helper-reset");
            if (this.element[0].nodeName == "UL") {
                this.element.children("li").addClass("ui-accordion-li-fix")
            }
            this.headers = this.element.find(d.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all").bind("mouseenter.accordion", function () {
                a(this).addClass("ui-state-hover")
            }).bind("mouseleave.accordion", function () {
                a(this).removeClass("ui-state-hover")
            }).bind("focus.accordion", function () {
                a(this).addClass("ui-state-focus")
            }).bind("blur.accordion", function () {
                a(this).removeClass("ui-state-focus")
            });
            this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");
            if (d.navigation) {
                var c = this.element.find("a").filter(d.navigationFilter);
                if (c.length) {
                    var e = c.closest(".ui-accordion-header");
                    if (e.length) {
                        this.active = e
                    } else {
                        this.active = c.closest(".ui-accordion-content").prev()
                    }
                }
            }
            this.active = this._findActive(this.active || d.active).toggleClass("ui-state-default").toggleClass("ui-state-active").toggleClass("ui-corner-all").toggleClass("ui-corner-top");
            this.active.next().addClass("ui-accordion-content-active");
            this._createIcons();
            if (a.browser.msie) {
                this.element.find("a").css("zoom", "1")
            }
            this.resize();
            this.element.attr("role", "tablist");
            this.headers.attr("role", "tab").bind("keydown", function (f) {
                return b._keydown(f)
            }).next().attr("role", "tabpanel");
            this.headers.not(this.active || "").attr("aria-expanded", "false").attr("tabIndex", "-1").next().hide();
            if (!this.active.length) {
                this.headers.eq(0).attr("tabIndex", "0")
            } else {
                this.active.attr("aria-expanded", "true").attr("tabIndex", "0")
            }
            if (!a.browser.safari) {
                this.headers.find("a").attr("tabIndex", "-1")
            }
            if (d.event) {
                this.headers.bind((d.event) + ".accordion", function (f) {
                    b._clickHandler.call(b, f, this);
                    f.preventDefault()
                })
            }
        },
        _createIcons: function () {
            var b = this.options;
            if (b.icons) {
                a("<span/>").addClass("ui-icon " + b.icons.header).prependTo(this.headers);
                this.active.find(".ui-icon").toggleClass(b.icons.header).toggleClass(b.icons.headerSelected);
                this.element.addClass("ui-accordion-icons")
            }
        },
        _destroyIcons: function () {
            this.headers.children(".ui-icon").remove();
            this.element.removeClass("ui-accordion-icons")
        },
        destroy: function () {
            var c = this.options;
            this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role").unbind(".accordion").removeData("accordion");
            this.headers.unbind(".accordion").removeClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("tabindex");
            this.headers.find("a").removeAttr("tabindex");
            this._destroyIcons();
            var b = this.headers.next().css("display", "").removeAttr("role").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active");
            if (c.autoHeight || c.fillHeight) {
                b.css("height", "")
            }
            return this
        },
        _setOption: function (b, c) {
            a.Widget.prototype._setOption.apply(this, arguments);
            if (b == "active") {
                this.activate(c)
            }
            if (b == "icons") {
                this._destroyIcons();
                if (c) {
                    this._createIcons()
                }
            }
        },
        _keydown: function (e) {
            var g = this.options,
                f = a.ui.keyCode;
            if (g.disabled || e.altKey || e.ctrlKey) {
                return
            }
            var d = this.headers.length;
            var b = this.headers.index(e.target);
            var c = false;
            switch (e.keyCode) {
            case f.RIGHT:
            case f.DOWN:
                c = this.headers[(b + 1) % d];
                break;
            case f.LEFT:
            case f.UP:
                c = this.headers[(b - 1 + d) % d];
                break;
            case f.SPACE:
            case f.ENTER:
                this._clickHandler({
                    target: e.target
                }, e.target);
                e.preventDefault()
            }
            if (c) {
                a(e.target).attr("tabIndex", "-1");
                a(c).attr("tabIndex", "0");
                c.focus();
                return false
            }
            return true
        },
        resize: function () {
            var d = this.options,
                c;
            if (d.fillSpace) {
                if (a.browser.msie) {
                    var b = this.element.parent().css("overflow");
                    this.element.parent().css("overflow", "hidden")
                }
                c = this.element.parent().height();
                if (a.browser.msie) {
                    this.element.parent().css("overflow", b)
                }
                this.headers.each(function () {
                    c -= a(this).outerHeight(true)
                });
                this.headers.next().each(function () {
                    a(this).height(Math.max(0, c - a(this).innerHeight() + a(this).height()))
                }).css("overflow", "auto")
            } else {
                if (d.autoHeight) {
                    c = 0;
                    this.headers.next().each(function () {
                        c = Math.max(c, a(this).height())
                    }).height(c)
                }
            }
            return this
        },
        activate: function (b) {
            this.options.active = b;
            var c = this._findActive(b)[0];
            this._clickHandler({
                target: c
            }, c);
            return this
        },
        _findActive: function (b) {
            return b ? typeof b == "number" ? this.headers.filter(":eq(" + b + ")") : this.headers.not(this.headers.not(b)) : b === false ? a([]) : this.headers.filter(":eq(0)")
        },
        _clickHandler: function (b, f) {
            var d = this.options;
            if (d.disabled) {
                return
            }
            if (!b.target) {
                if (!d.collapsible) {
                    return
                }
                this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").find(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);
                this.active.next().addClass("ui-accordion-content-active");
                var h = this.active.next(),
                    e = {
                        options: d,
                        newHeader: a([]),
                        oldHeader: d.active,
                        newContent: a([]),
                        oldContent: h
                    },
                    c = (this.active = a([]));
                this._toggle(c, h, e);
                return
            }
            var g = a(b.currentTarget || f);
            var i = g[0] == this.active[0];
            d.active = d.collapsible && i ? false : a(".ui-accordion-header", this.element).index(g);
            if (this.running || (!d.collapsible && i)) {
                return
            }
            this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").find(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);
            if (!i) {
                g.removeClass("ui-state-default ui-corner-all").addClass("ui-state-active ui-corner-top").find(".ui-icon").removeClass(d.icons.header).addClass(d.icons.headerSelected);
                g.next().addClass("ui-accordion-content-active")
            }
            var c = g.next(),
                h = this.active.next(),
                e = {
                    options: d,
                    newHeader: i && d.collapsible ? a([]) : g,
                    oldHeader: this.active,
                    newContent: i && d.collapsible ? a([]) : c,
                    oldContent: h
                },
                j = this.headers.index(this.active[0]) > this.headers.index(g[0]);
            this.active = i ? a([]) : g;
            this._toggle(c, h, e, i, j);
            return
        },
        _toggle: function (b, i, g, j, k) {
            var d = this.options,
                m = this;
            this.toShow = b;
            this.toHide = i;
            this.data = g;
            var c = function () {
                    if (!m) {
                        return
                    }
                    return m._completed.apply(m, arguments)
                };
            this._trigger("changestart", null, this.data);
            this.running = i.size() === 0 ? b.size() : i.size();
            if (d.animated) {
                var f = {};
                if (d.collapsible && j) {
                    f = {
                        toShow: a([]),
                        toHide: i,
                        complete: c,
                        down: k,
                        autoHeight: d.autoHeight || d.fillSpace
                    }
                } else {
                    f = {
                        toShow: b,
                        toHide: i,
                        complete: c,
                        down: k,
                        autoHeight: d.autoHeight || d.fillSpace
                    }
                }
                if (!d.proxied) {
                    d.proxied = d.animated
                }
                if (!d.proxiedDuration) {
                    d.proxiedDuration = d.duration
                }
                d.animated = a.isFunction(d.proxied) ? d.proxied(f) : d.proxied;
                d.duration = a.isFunction(d.proxiedDuration) ? d.proxiedDuration(f) : d.proxiedDuration;
                var l = a.ui.accordion.animations,
                    e = d.duration,
                    h = d.animated;
                if (h && !l[h] && !a.easing[h]) {
                    h = "slide"
                }
                if (!l[h]) {
                    l[h] = function (n) {
                        this.slide(n, {
                            easing: h,
                            duration: e || 700
                        })
                    }
                }
                l[h](f)
            } else {
                if (d.collapsible && j) {
                    b.toggle()
                } else {
                    i.hide();
                    b.show()
                }
                c(true)
            }
            i.prev().attr("aria-expanded", "false").attr("tabIndex", "-1").blur();
            b.prev().attr("aria-expanded", "true").attr("tabIndex", "0").focus()
        },
        _completed: function (b) {
            var c = this.options;
            this.running = b ? 0 : --this.running;
            if (this.running) {
                return
            }
            if (c.clearStyle) {
                this.toShow.add(this.toHide).css({
                    height: "",
                    overflow: ""
                })
            }
            this.toHide.removeClass("ui-accordion-content-active");
            this._trigger("change", null, this.data)
        }
    });
    a.extend(a.ui.accordion, {
        version: "1.8",
        animations: {
            slide: function (j, h) {
                j = a.extend({
                    easing: "swing",
                    duration: 300
                }, j, h);
                if (!j.toHide.size()) {
                    j.toShow.animate({
                        height: "show"
                    }, j);
                    return
                }
                if (!j.toShow.size()) {
                    j.toHide.animate({
                        height: "hide"
                    }, j);
                    return
                }
                var c = j.toShow.css("overflow"),
                    g = 0,
                    d = {},
                    f = {},
                    e = ["height", "paddingTop", "paddingBottom"],
                    b;
                var i = j.toShow;
                b = i[0].style.width;
                i.width(parseInt(i.parent().width(), 10) - parseInt(i.css("paddingLeft"), 10) - parseInt(i.css("paddingRight"), 10) - (parseInt(i.css("borderLeftWidth"), 10) || 0) - (parseInt(i.css("borderRightWidth"), 10) || 0));
                a.each(e, function (k, m) {
                    f[m] = "hide";
                    var l = ("" + a.css(j.toShow[0], m)).match(/^([\d+-.]+)(.*)$/);
                    d[m] = {
                        value: l[1],
                        unit: l[2] || "px"
                    }
                });
                j.toShow.css({
                    height: 0,
                    overflow: "hidden"
                }).show();
                j.toHide.filter(":hidden").each(j.complete).end().filter(":visible").animate(f, {
                    step: function (k, l) {
                        if (l.prop == "height") {
                            g = (l.end - l.start === 0) ? 0 : (l.now - l.start) / (l.end - l.start)
                        }
                        j.toShow[0].style[l.prop] = (g * d[l.prop].value) + d[l.prop].unit
                    },
                    duration: j.duration,
                    easing: j.easing,
                    complete: function () {
                        if (!j.autoHeight) {
                            j.toShow.css("height", "")
                        }
                        j.toShow.css("width", b);
                        j.toShow.css({
                            overflow: c
                        });
                        j.complete()
                    }
                })
            },
            bounceslide: function (b) {
                this.slide(b, {
                    easing: b.down ? "easeOutBounce" : "swing",
                    duration: b.down ? 1000 : 200
                })
            }
        }
    })
})(jQuery);
(function (a) {
    a.widget("ui.autocomplete", {
        options: {
            minLength: 1,
            delay: 300
        },
        _create: function () {
            var b = this,
                c = this.element[0].ownerDocument;
            this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off").attr({
                role: "textbox",
                "aria-autocomplete": "list",
                "aria-haspopup": "true"
            }).bind("keydown.autocomplete", function (d) {
                var e = a.ui.keyCode;
                switch (d.keyCode) {
                case e.PAGE_UP:
                    b._move("previousPage", d);
                    break;
                case e.PAGE_DOWN:
                    b._move("nextPage", d);
                    break;
                case e.UP:
                    b._move("previous", d);
                    d.preventDefault();
                    break;
                case e.DOWN:
                    b._move("next", d);
                    d.preventDefault();
                    break;
                case e.ENTER:
                    if (b.menu.active) {
                        d.preventDefault()
                    }
                case e.TAB:
                    if (!b.menu.active) {
                        return
                    }
                    b.menu.select();
                    break;
                case e.ESCAPE:
                    b.element.val(b.term);
                    b.close(d);
                    break;
                case e.SHIFT:
                case e.CONTROL:
                case 18:
                    break;
                default:
                    clearTimeout(b.searching);
                    b.searching = setTimeout(function () {
                        b.search(null, d)
                    }, b.options.delay);
                    break
                }
            }).bind("focus.autocomplete", function () {
                b.previous = b.element.val()
            }).bind("blur.autocomplete", function (d) {
                clearTimeout(b.searching);
                b.closing = setTimeout(function () {
                    b.close(d)
                }, 150)
            });
            this._initSource();
            this.response = function () {
                return b._response.apply(b, arguments)
            };
            this.menu = a("<ul></ul>").addClass("ui-autocomplete").appendTo("body", c).menu({
                focus: function (e, f) {
                    var d = f.item.data("item.autocomplete");
                    if (false !== b._trigger("focus", null, {
                        item: d
                    })) {
                        b.element.val(d.value)
                    }
                },
                selected: function (e, f) {
                    var d = f.item.data("item.autocomplete");
                    if (false !== b._trigger("select", e, {
                        item: d
                    })) {
                        b.element.val(d.value)
                    }
                    b.close(e);
                    b.previous = b.element.val();
                    if (b.element[0] !== c.activeElement) {
                        b.element.focus()
                    }
                },
                blur: function (d, e) {
                    if (b.menu.element.is(":visible")) {
                        b.element.val(b.term)
                    }
                }
            }).zIndex(this.element.zIndex() + 1).css({
                top: 0,
                left: 0
            }).hide().data("menu");
            if (a.fn.bgiframe) {
                this.menu.element.bgiframe()
            }
        },
        destroy: function () {
            this.element.removeClass("ui-autocomplete-input ui-widget ui-widget-content").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup");
            this.menu.element.remove();
            a.Widget.prototype.destroy.call(this)
        },
        _setOption: function (b) {
            a.Widget.prototype._setOption.apply(this, arguments);
            if (b === "source") {
                this._initSource()
            }
        },
        _initSource: function () {
            var c, b;
            if (a.isArray(this.options.source)) {
                c = this.options.source;
                this.source = function (e, d) {
                    var f = new RegExp(a.ui.autocomplete.escapeRegex(e.term), "i");
                    d(a.grep(c, function (g) {
                        return f.test(g.label || g.value || g)
                    }))
                }
            } else {
                if (typeof this.options.source === "string") {
                    b = this.options.source;
                    this.source = function (e, d) {
                        a.getJSON(b, e, d)
                    }
                } else {
                    this.source = this.options.source
                }
            }
        },
        search: function (c, b) {
            c = c != null ? c : this.element.val();
            if (c.length < this.options.minLength) {
                return this.close(b)
            }
            clearTimeout(this.closing);
            if (this._trigger("search") === false) {
                return
            }
            return this._search(c)
        },
        _search: function (b) {
            this.term = this.element.addClass("ui-autocomplete-loading").val();
            this.source({
                term: b
            }, this.response)
        },
        _response: function (b) {
            if (b.length) {
                b = this._normalize(b);
                this._suggest(b);
                this._trigger("open")
            } else {
                this.close()
            }
            this.element.removeClass("ui-autocomplete-loading")
        },
        close: function (b) {
            clearTimeout(this.closing);
            if (this.menu.element.is(":visible")) {
                this._trigger("close", b);
                this.menu.element.hide();
                this.menu.deactivate()
            }
            if (this.previous !== this.element.val()) {
                this._trigger("change", b)
            }
        },
        _normalize: function (b) {
            if (b.length && b[0].label && b[0].value) {
                return b
            }
            return a.map(b, function (c) {
                if (typeof c === "string") {
                    return {
                        label: c,
                        value: c
                    }
                }
                return a.extend({
                    label: c.label || c.value,
                    value: c.value || c.label
                }, c)
            })
        },
        _suggest: function (b) {
            var c = this.menu.element.empty().zIndex(this.element.zIndex() + 1),
                d, e;
            this._renderMenu(c, b);
            this.menu.deactivate();
            this.menu.refresh();
            this.menu.element.show().position({
                my: "left top",
                at: "left bottom",
                of: this.element,
                collision: "none"
            });
            d = c.width("").width();
            e = this.element.width();
            c.width(Math.max(d, e))
        },
        _renderMenu: function (d, c) {
            var b = this;
            a.each(c, function (e, f) {
                b._renderItem(d, f)
            })
        },
        _renderItem: function (b, c) {
            return a("<li></li>").data("item.autocomplete", c).append("<a>" + c.label + "</a>").appendTo(b)
        },
        _move: function (c, b) {
            if (!this.menu.element.is(":visible")) {
                this.search(null, b);
                return
            }
            if (this.menu.first() && /^previous/.test(c) || this.menu.last() && /^next/.test(c)) {
                this.element.val(this.term);
                this.menu.deactivate();
                return
            }
            this.menu[c]()
        },
        widget: function () {
            return this.menu.element
        }
    });
    a.extend(a.ui.autocomplete, {
        escapeRegex: function (b) {
            return b.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1")
        }
    })
}(jQuery));
(function (a) {
    a.widget("ui.menu", {
        _create: function () {
            var b = this;
            this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({
                role: "listbox",
                "aria-activedescendant": "ui-active-menuitem"
            }).click(function (c) {
                c.preventDefault();
                b.select()
            });
            this.refresh()
        },
        refresh: function () {
            var c = this;
            var b = this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "menuitem");
            b.children("a").addClass("ui-corner-all").attr("tabindex", -1).mouseenter(function () {
                c.activate(a(this).parent())
            }).mouseleave(function () {
                c.deactivate()
            })
        },
        activate: function (d) {
            this.deactivate();
            if (this.hasScroll()) {
                var e = d.offset().top - this.element.offset().top,
                    b = this.element.attr("scrollTop"),
                    c = this.element.height();
                if (e < 0) {
                    this.element.attr("scrollTop", b + e)
                } else {
                    if (e > c) {
                        this.element.attr("scrollTop", b + e - c + d.height())
                    }
                }
            }
            this.active = d.eq(0).children("a").addClass("ui-state-hover").attr("id", "ui-active-menuitem").end();
            this._trigger("focus", null, {
                item: d
            })
        },
        deactivate: function () {
            if (!this.active) {
                return
            }
            this.active.children("a").removeClass("ui-state-hover").removeAttr("id");
            this._trigger("blur");
            this.active = null
        },
        next: function () {
            this.move("next", "li:first")
        },
        previous: function () {
            this.move("prev", "li:last")
        },
        first: function () {
            return this.active && !this.active.prev().length
        },
        last: function () {
            return this.active && !this.active.next().length
        },
        move: function (d, c) {
            if (!this.active) {
                this.activate(this.element.children(c));
                return
            }
            var b = this.active[d]();
            if (b.length) {
                this.activate(b)
            } else {
                this.activate(this.element.children(c))
            }
        },
        nextPage: function () {
            if (this.hasScroll()) {
                if (!this.active || this.last()) {
                    this.activate(this.element.children(":first"));
                    return
                }
                var d = this.active.offset().top,
                    c = this.element.height(),
                    b = this.element.children("li").filter(function () {
                        var e = a(this).offset().top - d - c + a(this).height();
                        return e < 10 && e > -10
                    });
                if (!b.length) {
                    b = this.element.children(":last")
                }
                this.activate(b)
            } else {
                this.activate(this.element.children(!this.active || this.last() ? ":first" : ":last"))
            }
        },
        previousPage: function () {
            if (this.hasScroll()) {
                if (!this.active || this.first()) {
                    this.activate(this.element.children(":last"));
                    return
                }
                var c = this.active.offset().top,
                    b = this.element.height();
                result = this.element.children("li").filter(function () {
                    var d = a(this).offset().top - c + b - a(this).height();
                    return d < 10 && d > -10
                });
                if (!result.length) {
                    result = this.element.children(":first")
                }
                this.activate(result)
            } else {
                this.activate(this.element.children(!this.active || this.first() ? ":last" : ":first"))
            }
        },
        hasScroll: function () {
            return this.element.height() < this.element.attr("scrollHeight")
        },
        select: function () {
            this._trigger("selected", null, {
                item: this.active
            })
        }
    })
}(jQuery));
(function (f) {
    var d, c = "ui-button ui-widget ui-state-default ui-corner-all",
        b = "ui-state-hover ui-state-active ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon ui-button-text-only",
        e = function (g) {
            f(":ui-button", g.target.form).each(function () {
                var h = f(this).data("button");
                setTimeout(function () {
                    h.refresh()
                }, 1)
            })
        },
        a = function (h) {
            var g = h.name,
                i = h.form,
                j = f([]);
            if (g) {
                if (i) {
                    j = f(i).find("[name='" + g + "']")
                } else {
                    j = f("[name='" + g + "']", h.ownerDocument).filter(function () {
                        return !this.form
                    })
                }
            }
            return j
        };
    f.widget("ui.button", {
        options: {
            text: true,
            label: null,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function () {
            this.element.closest("form").unbind("reset.button").bind("reset.button", e);
            this._determineButtonType();
            this.hasTitle = !! this.buttonElement.attr("title");
            var g = this,
                i = this.options,
                j = this.type === "checkbox" || this.type === "radio",
                k = "ui-state-hover" + (!j ? " ui-state-active" : ""),
                h = "ui-state-focus";
            if (i.label === null) {
                i.label = this.buttonElement.html()
            }
            if (this.element.is(":disabled")) {
                i.disabled = true
            }
            this.buttonElement.addClass(c).attr("role", "button").bind("mouseenter.button", function () {
                if (i.disabled) {
                    return
                }
                f(this).addClass("ui-state-hover");
                if (this === d) {
                    f(this).addClass("ui-state-active")
                }
            }).bind("mouseleave.button", function () {
                if (i.disabled) {
                    return
                }
                f(this).removeClass(k)
            }).bind("focus.button", function () {
                f(this).addClass(h)
            }).bind("blur.button", function () {
                f(this).removeClass(h)
            });
            if (j) {
                this.element.bind("change.button", function () {
                    g.refresh()
                })
            }
            if (this.type === "checkbox") {
                this.buttonElement.bind("click.button", function () {
                    if (i.disabled) {
                        return false
                    }
                    f(this).toggleClass("ui-state-active");
                    g.buttonElement.attr("aria-pressed", g.element[0].checked)
                })
            } else {
                if (this.type === "radio") {
                    this.buttonElement.bind("click.button", function () {
                        if (i.disabled) {
                            return false
                        }
                        f(this).addClass("ui-state-active");
                        g.buttonElement.attr("aria-pressed", true);
                        var l = g.element[0];
                        a(l).not(l).map(function () {
                            return f(this).button("widget")[0]
                        }).removeClass("ui-state-active").attr("aria-pressed", false)
                    })
                } else {
                    this.buttonElement.bind("mousedown.button", function () {
                        if (i.disabled) {
                            return false
                        }
                        f(this).addClass("ui-state-active");
                        d = this;
                        f(document).one("mouseup", function () {
                            d = null
                        })
                    }).bind("mouseup.button", function () {
                        if (i.disabled) {
                            return false
                        }
                        f(this).removeClass("ui-state-active")
                    }).bind("keydown.button", function (l) {
                        if (i.disabled) {
                            return false
                        }
                        if (l.keyCode == f.ui.keyCode.SPACE || l.keyCode == f.ui.keyCode.ENTER) {
                            f(this).addClass("ui-state-active")
                        }
                    }).bind("keyup.button", function () {
                        f(this).removeClass("ui-state-active")
                    });
                    if (this.buttonElement.is("a")) {
                        this.buttonElement.keyup(function (l) {
                            if (l.keyCode === f.ui.keyCode.SPACE) {
                                f(this).click()
                            }
                        })
                    }
                }
            }
            this._setOption("disabled", i.disabled)
        },
        _determineButtonType: function () {
            if (this.element.is(":checkbox")) {
                this.type = "checkbox"
            } else {
                if (this.element.is(":radio")) {
                    this.type = "radio"
                } else {
                    if (this.element.is("input")) {
                        this.type = "input"
                    } else {
                        this.type = "button"
                    }
                }
            }
            if (this.type === "checkbox" || this.type === "radio") {
                this.buttonElement = this.element.parents().last().find("[for=" + this.element.attr("id") + "]");
                this.element.addClass("ui-helper-hidden-accessible");
                var g = this.element.is(":checked");
                if (g) {
                    this.buttonElement.addClass("ui-state-active")
                }
                this.buttonElement.attr("aria-pressed", g)
            } else {
                this.buttonElement = this.element
            }
        },
        widget: function () {
            return this.buttonElement
        },
        destroy: function () {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass(c + " " + b).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            if (!this.hasTitle) {
                this.buttonElement.removeAttr("title")
            }
            f.Widget.prototype.destroy.call(this)
        },
        _setOption: function (g, h) {
            f.Widget.prototype._setOption.apply(this, arguments);
            if (g === "disabled") {
                if (h) {
                    this.element.attr("disabled", true)
                } else {
                    this.element.removeAttr("disabled")
                }
            }
            this._resetButton()
        },
        refresh: function () {
            var g = this.element.is(":disabled");
            if (g !== this.options.disabled) {
                this._setOption("disabled", g)
            }
            if (this.type === "radio") {
                a(this.element[0]).each(function () {
                    if (f(this).is(":checked")) {
                        f(this).button("widget").addClass("ui-state-active").attr("aria-pressed", true)
                    } else {
                        f(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", false)
                    }
                })
            } else {
                if (this.type === "checkbox") {
                    if (this.element.is(":checked")) {
                        this.buttonElement.addClass("ui-state-active").attr("aria-pressed", true)
                    } else {
                        this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", false)
                    }
                }
            }
        },
        _resetButton: function () {
            if (this.type === "input") {
                if (this.options.label) {
                    this.element.val(this.options.label)
                }
                return
            }
            var j = this.buttonElement,
                i = f("<span></span>").addClass("ui-button-text").html(this.options.label).appendTo(j.empty()).text(),
                h = this.options.icons,
                g = h.primary && h.secondary;
            if (h.primary || h.secondary) {
                j.addClass("ui-button-text-icon" + (g ? "s" : ""));
                if (h.primary) {
                    j.prepend("<span class='ui-button-icon-primary ui-icon " + h.primary + "'></span>")
                }
                if (h.secondary) {
                    j.append("<span class='ui-button-icon-secondary ui-icon " + h.secondary + "'></span>")
                }
                if (!this.options.text) {
                    j.addClass(g ? "ui-button-icons-only" : "ui-button-icon-only").removeClass("ui-button-text-icons ui-button-text-icon");
                    if (!this.hasTitle) {
                        j.attr("title", i)
                    }
                }
            } else {
                j.addClass("ui-button-text-only")
            }
        }
    });
    f.widget("ui.buttonset", {
        _create: function () {
            this.element.addClass("ui-buttonset");
            this._init()
        },
        _init: function () {
            this.refresh()
        },
        _setOption: function (g, h) {
            if (g === "disabled") {
                this.buttons.button("option", g, h)
            }
            f.Widget.prototype._setOption.apply(this, arguments)
        },
        refresh: function () {
            this.buttons = this.element.find(":button, :submit, :reset, :checkbox, :radio, a, :data(button)").filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function () {
                return f(this).button("widget")[0]
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass("ui-corner-left").end().filter(":last").addClass("ui-corner-right").end().end()
        },
        destroy: function () {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function () {
                return f(this).button("widget")[0]
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
            f.Widget.prototype.destroy.call(this)
        }
    })
}(jQuery));
(function ($) {
    $.extend($.ui, {
        datepicker: {
            version: "1.8"
        }
    });
    var PROP_NAME = "datepicker";
    var dpuuid = new Date().getTime();

    function Datepicker() {
        this.debug = false;
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = "ui-datepicker-div";
        this._inlineClass = "ui-datepicker-inline";
        this._appendClass = "ui-datepicker-append";
        this._triggerClass = "ui-datepicker-trigger";
        this._dialogClass = "ui-datepicker-dialog";
        this._disableClass = "ui-datepicker-disabled";
        this._unselectableClass = "ui-datepicker-unselectable";
        this._currentClass = "ui-datepicker-current-day";
        this._dayOverClass = "ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ""
        };
        this._defaults = {
            showOn: "focus",
            showAnim: "show",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: false,
            hideIfNoPrevNext: false,
            navigationAsDateFormat: false,
            gotoCurrent: false,
            changeMonth: false,
            changeYear: false,
            yearRange: "c-10:c+10",
            showOtherMonths: false,
            selectOtherMonths: false,
            showWeek: false,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "_default",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: true,
            showButtonPanel: false,
            autoSize: false
        };
        $.extend(this._defaults, this.regional[""]);
        this.dpDiv = $('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-helper-hidden-accessible"></div>')
    }
    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker",
        log: function () {
            if (this.debug) {
                console.log.apply("", arguments)

            }
        },
        _widgetDatepicker: function () {
            return this.dpDiv
        },
        setDefaults: function (settings) {
            extendRemove(this._defaults, settings || {});
            return this
        },
        _attachDatepicker: function (target, settings) {
            var inlineSettings = null;
            for (var attrName in this._defaults) {
                var attrValue = target.getAttribute("date:" + attrName);
                if (attrValue) {
                    inlineSettings = inlineSettings || {};
                    try {
                        inlineSettings[attrName] = eval(attrValue)
                    } catch (err) {
                        inlineSettings[attrName] = attrValue
                    }
                }
            }
            var nodeName = target.nodeName.toLowerCase();
            var inline = (nodeName == "div" || nodeName == "span");
            if (!target.id) {
                target.id = "dp" + (++this.uuid)
            }
            var inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {}, inlineSettings || {});
            if (nodeName == "input") {
                this._connectDatepicker(target, inst)
            } else {
                if (inline) {
                    this._inlineDatepicker(target, inst)
                }
            }
        },
        _newInst: function (target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_])/g, "\\\\$1");
            return {
                id: id,
                input: target,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: inline,
                dpDiv: (!inline ? this.dpDiv : $('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))
            }
        },
        _connectDatepicker: function (target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName)) {
                return
            }
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker", function (event, key, value) {
                inst.settings[key] = value
            }).bind("getData.datepicker", function (event, key) {
                return this._get(inst, key)
            });
            this._autoSize(inst);
            $.data(target, PROP_NAME, inst)
        },
        _attachments: function (input, inst) {
            var appendText = this._get(inst, "appendText");
            var isRTL = this._get(inst, "isRTL");
            if (inst.append) {
                inst.append.remove()
            }
            if (appendText) {
                inst.append = $('<span class="' + this._appendClass + '">' + appendText + "</span>");
                input[isRTL ? "before" : "after"](inst.append)
            }
            input.unbind("focus", this._showDatepicker);
            if (inst.trigger) {
                inst.trigger.remove()
            }
            var showOn = this._get(inst, "showOn");
            if (showOn == "focus" || showOn == "both") {
                input.focus(this._showDatepicker)
            }
            if (showOn == "button" || showOn == "both") {
                var buttonText = this._get(inst, "buttonText");
                var buttonImage = this._get(inst, "buttonImage");
                inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : $('<button type="button"></button>').addClass(this._triggerClass).html(buttonImage == "" ? buttonText : $("<img/>").attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                })));
                input[isRTL ? "before" : "after"](inst.trigger);
                inst.trigger.click(function () {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0]) {
                        $.datepicker._hideDatepicker()
                    } else {
                        $.datepicker._showDatepicker(input[0])
                    }
                    return false
                })
            }
        },
        _autoSize: function (inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var date = new Date(2009, 12 - 1, 20);
                var dateFormat = this._get(inst, "dateFormat");
                if (dateFormat.match(/[DM]/)) {
                    var findMax = function (names) {
                            var max = 0;
                            var maxI = 0;
                            for (var i = 0; i < names.length; i++) {
                                if (names[i].length > max) {
                                    max = names[i].length;
                                    maxI = i
                                }
                            }
                            return maxI
                        };
                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort"))));
                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort"))) + 20 - date.getDay())
                }
                inst.input.attr("size", this._formatDate(inst, date).length)
            }
        },
        _inlineDatepicker: function (target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv).bind("setData.datepicker", function (event, key, value) {
                inst.settings[key] = value
            }).bind("getData.datepicker", function (event, key) {
                return this._get(inst, key)
            });
            $.data(target, PROP_NAME, inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst)
        },
        _dialogDatepicker: function (input, date, onSelect, settings, pos) {
            var inst = this._dialogInst;
            if (!inst) {
                var id = "dp" + (++this.uuid);
                this._dialogInput = $('<input type="text" id="' + id + '" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');
                this._dialogInput.keydown(this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], PROP_NAME, inst)
            }
            extendRemove(inst.settings, settings || {});
            date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
            this._dialogInput.val(date);
            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                var browserWidth = document.documentElement.clientWidth;
                var browserHeight = document.documentElement.clientHeight;
                var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY]
            }
            this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv)
            }
            $.data(this._dialogInput[0], PROP_NAME, inst);
            return this
        },
        _destroyDatepicker: function (target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            var nodeName = target.nodeName.toLowerCase();
            $.removeData(target, PROP_NAME);
            if (nodeName == "input") {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)
            } else {
                if (nodeName == "div" || nodeName == "span") {
                    $target.removeClass(this.markerClassName).empty()
                }
            }
        },
        _enableDatepicker: function (target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == "input") {
                target.disabled = false;
                inst.trigger.filter("button").each(function () {
                    this.disabled = false
                }).end().filter("img").css({
                    opacity: "1.0",
                    cursor: ""
                })
            } else {
                if (nodeName == "div" || nodeName == "span") {
                    var inline = $target.children("." + this._inlineClass);
                    inline.children().removeClass("ui-state-disabled")
                }
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
                return (value == target ? null : value)
            })
        },
        _disableDatepicker: function (target) {
            var $target = $(target);
            var inst = $.data(target, PROP_NAME);
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            var nodeName = target.nodeName.toLowerCase();
            if (nodeName == "input") {
                target.disabled = true;
                inst.trigger.filter("button").each(function () {
                    this.disabled = true
                }).end().filter("img").css({
                    opacity: "0.5",
                    cursor: "default"
                })
            } else {
                if (nodeName == "div" || nodeName == "span") {
                    var inline = $target.children("." + this._inlineClass);
                    inline.children().addClass("ui-state-disabled")
                }
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
                return (value == target ? null : value)
            });
            this._disabledInputs[this._disabledInputs.length] = target
        },
        _isDisabledDatepicker: function (target) {
            if (!target) {
                return false
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] == target) {
                    return true
                }
            }
            return false
        },
        _getInst: function (target) {
            try {
                return $.data(target, PROP_NAME)
            } catch (err) {
                throw "Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function (target, name, value) {
            var inst = this._getInst(target);
            if (arguments.length == 2 && typeof name == "string") {
                return (name == "defaults" ? $.extend({}, $.datepicker._defaults) : (inst ? (name == "all" ? $.extend({}, inst.settings) : this._get(inst, name)) : null))
            }
            var settings = name || {};
            if (typeof name == "string") {
                settings = {};
                settings[name] = value
            }
            if (inst) {
                if (this._curInst == inst) {
                    this._hideDatepicker()
                }
                var date = this._getDateDatepicker(target, true);
                extendRemove(inst.settings, settings);
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDateDatepicker(target, date);
                this._updateDatepicker(inst)
            }
        },
        _changeDatepicker: function (target, name, value) {
            this._optionDatepicker(target, name, value)
        },
        _refreshDatepicker: function (target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst)
            }
        },
        _setDateDatepicker: function (target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst)
            }
        },
        _getDateDatepicker: function (target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault)
            }
            return (inst ? this._getDate(inst) : null)
        },
        _doKeyDown: function (event) {
            var inst = $.datepicker._getInst(event.target);
            var handled = true;
            var isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                case 9:
                    $.datepicker._hideDatepicker();
                    handled = false;
                    break;
                case 13:
                    var sel = $("td." + $.datepicker._dayOverClass, inst.dpDiv).add($("td." + $.datepicker._currentClass, inst.dpDiv));
                    if (sel[0]) {
                        $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0])
                    } else {
                        $.datepicker._hideDatepicker()
                    }
                    return false;
                    break;
                case 27:
                    $.datepicker._hideDatepicker();
                    break;
                case 33:
                    $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M");
                    break;
                case 34:
                    $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M");
                    break;
                case 35:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._clearDate(event.target)
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 36:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._gotoToday(event.target)
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 37:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M")
                    }
                    break;
                case 38:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, -7, "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 39:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M")
                    }
                    break;
                case 40:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, +7, "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                default:
                    handled = false
                }
            } else {
                if (event.keyCode == 36 && event.ctrlKey) {
                    $.datepicker._showDatepicker(this)
                } else {
                    handled = false
                }
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation()
            }
        },
        _doKeyPress: function (event) {
            var inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, "constrainInput")) {
                var chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
                return event.ctrlKey || (chr < " " || !chars || chars.indexOf(chr) > -1)
            }
        },
        _doKeyUp: function (event) {
            var inst = $.datepicker._getInst(event.target);
            if (inst.input.val() != inst.lastVal) {
                try {
                    var date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), (inst.input ? inst.input.val() : null), $.datepicker._getFormatConfig(inst));
                    if (date) {
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst)
                    }
                } catch (event) {
                    $.datepicker.log(event)
                }
            }
            return true
        },
        _showDatepicker: function (input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() != "input") {
                input = $("input", input.parentNode)[0]
            }
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) {
                return
            }
            var inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst != inst) {
                $.datepicker._curInst.dpDiv.stop(true, true)
            }
            var beforeShow = $.datepicker._get(inst, "beforeShow");
            extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog) {
                input.value = ""
            }
            if (!$.datepicker._pos) {
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight
            }
            var isFixed = false;
            $(input).parents().each(function () {
                isFixed |= $(this).css("position") == "fixed";
                return !isFixed
            });
            if (isFixed && $.browser.opera) {
                $.datepicker._pos[0] -= document.documentElement.scrollLeft;
                $.datepicker._pos[1] -= document.documentElement.scrollTop
            }
            var offset = {
                left: $.datepicker._pos[0],
                top: $.datepicker._pos[1]
            };
            $.datepicker._pos = null;
            inst.dpDiv.css({
                position: "absolute",
                display: "block",
                top: "-1000px"
            });
            $.datepicker._updateDatepicker(inst);
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({
                position: ($.datepicker._inDialog && $.blockUI ? "static" : (isFixed ? "fixed" : "absolute")),
                display: "none",
                left: offset.left + "px",
                top: offset.top + "px"
            });
            if (!inst.inline) {
                var showAnim = $.datepicker._get(inst, "showAnim");
                var duration = $.datepicker._get(inst, "duration");
                var postProcess = function () {
                        $.datepicker._datepickerShowing = true;
                        var borders = $.datepicker._getBorders(inst.dpDiv);
                        inst.dpDiv.find("iframe.ui-datepicker-cover").css({
                            left: -borders[0],
                            top: -borders[1],
                            width: inst.dpDiv.outerWidth(),
                            height: inst.dpDiv.outerHeight()
                        })
                    };
                inst.dpDiv.zIndex($(input).zIndex() + 1);
                if ($.effects && $.effects[showAnim]) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
                } else {
                    inst.dpDiv[showAnim || "show"]((showAnim ? duration : null), postProcess)
                }
                if (!showAnim || !duration) {
                    postProcess()
                }
                if (inst.input.is(":visible") && !inst.input.is(":disabled")) {
                    inst.input.focus()
                }
                $.datepicker._curInst = inst
            }
        },
        _updateDatepicker: function (inst) {
            var self = this;
            var borders = $.datepicker._getBorders(inst.dpDiv);
            inst.dpDiv.empty().append(this._generateHTML(inst)).find("iframe.ui-datepicker-cover").css({
                left: -borders[0],
                top: -borders[1],
                width: inst.dpDiv.outerWidth(),
                height: inst.dpDiv.outerHeight()
            }).end().find("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a").bind("mouseout", function () {
                $(this).removeClass("ui-state-hover");
                if (this.className.indexOf("ui-datepicker-prev") != -1) {
                    $(this).removeClass("ui-datepicker-prev-hover")
                }
                if (this.className.indexOf("ui-datepicker-next") != -1) {
                    $(this).removeClass("ui-datepicker-next-hover")
                }
            }).bind("mouseover", function () {
                if (!self._isDisabledDatepicker(inst.inline ? inst.dpDiv.parent()[0] : inst.input[0])) {
                    $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
                    $(this).addClass("ui-state-hover");
                    if (this.className.indexOf("ui-datepicker-prev") != -1) {
                        $(this).addClass("ui-datepicker-prev-hover")
                    }
                    if (this.className.indexOf("ui-datepicker-next") != -1) {
                        $(this).addClass("ui-datepicker-next-hover")
                    }
                }
            }).end().find("." + this._dayOverClass + " a").trigger("mouseover").end();
            var numMonths = this._getNumberOfMonths(inst);
            var cols = numMonths[1];
            var width = 17;
            if (cols > 1) {
                inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em")
            } else {
                inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("")
            }
            inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
            if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input && inst.input.is(":visible") && !inst.input.is(":disabled")) {
                inst.input.focus()
            }
        },
        _getBorders: function (elem) {
            var convert = function (value) {
                    return {
                        thin: 1,
                        medium: 2,
                        thick: 3
                    }[value] || value
                };
            return [parseFloat(convert(elem.css("border-left-width"))), parseFloat(convert(elem.css("border-top-width")))]
        },
        _checkOffset: function (inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth();
            var dpHeight = inst.dpDiv.outerHeight();
            var inputWidth = inst.input ? inst.input.outerWidth() : 0;
            var inputHeight = inst.input ? inst.input.outerHeight() : 0;
            var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();
            var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();
            offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;
            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(dpHeight + inputHeight) : 0);
            return offset
        },
        _findPos: function (obj) {
            var inst = this._getInst(obj);
            var isRTL = this._get(inst, "isRTL");
            while (obj && (obj.type == "hidden" || obj.nodeType != 1)) {
                obj = obj[isRTL ? "previousSibling" : "nextSibling"]
            }
            var position = $(obj).offset();
            return [position.left, position.top]
        },
        _hideDatepicker: function (input) {
            var inst = this._curInst;
            if (!inst || (input && inst != $.data(input, PROP_NAME))) {
                return
            }
            if (this._datepickerShowing) {
                var showAnim = this._get(inst, "showAnim");
                var duration = this._get(inst, "duration");
                var postProcess = function () {
                        $.datepicker._tidyDialog(inst);
                        this._curInst = null
                    };
                if ($.effects && $.effects[showAnim]) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
                } else {
                    inst.dpDiv[(showAnim == "slideDown" ? "slideUp" : (showAnim == "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess)
                }
                if (!showAnim) {
                    postProcess()
                }
                var onClose = this._get(inst, "onClose");
                if (onClose) {
                    onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst])
                }
                this._datepickerShowing = false;
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({
                        position: "absolute",
                        left: "0",
                        top: "-100px"
                    });
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv)
                    }
                }
                this._inDialog = false
            }
        },
        _tidyDialog: function (inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
        },
        _checkExternalClick: function (event) {
            if (!$.datepicker._curInst) {
                return
            }
            var $target = $(event.target);
            if ($target[0].id != $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length == 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.hasClass($.datepicker._triggerClass) && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI)) {
                $.datepicker._hideDatepicker()
            }
        },
        _adjustDate: function (id, offset, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return
            }
            this._adjustInstDate(inst, offset + (period == "M" ? this._get(inst, "showCurrentAtPos") : 0), period);
            this._updateDatepicker(inst)
        },
        _gotoToday: function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear
            } else {
                var date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear()
            }
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _selectMonthYear: function (id, select, period) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            inst._selectingMonthYear = false;
            inst["selected" + (period == "M" ? "Month" : "Year")] = inst["draw" + (period == "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _clickMonthYear: function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            if (inst.input && inst._selectingMonthYear && !$.browser.msie) {
                inst.input.focus()
            }
            inst._selectingMonthYear = !inst._selectingMonthYear
        },
        _selectDay: function (id, month, year, td) {
            var target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return
            }
            var inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear))
        },
        _clearDate: function (id) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            this._selectDate(target, "")
        },
        _selectDate: function (id, dateStr) {
            var target = $(id);
            var inst = this._getInst(target[0]);
            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input) {
                inst.input.val(dateStr)
            }
            this._updateAlternate(inst);
            var onSelect = this._get(inst, "onSelect");
            if (onSelect) {
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst])
            } else {
                if (inst.input) {
                    inst.input.trigger("change")
                }
            }
            if (inst.inline) {
                this._updateDatepicker(inst)
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof (inst.input[0]) != "object") {
                    inst.input.focus()
                }
                this._lastInput = null
            }
        },
        _updateAlternate: function (inst) {
            var altField = this._get(inst, "altField");
            if (altField) {
                var altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                var date = this._getDate(inst);
                var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function () {
                    $(this).val(dateStr)
                })
            }
        },
        noWeekends: function (date) {
            var day = date.getDay();
            return [(day > 0 && day < 6), ""]
        },
        iso8601Week: function (date) {
            var checkDate = new Date(date.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            var time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1
        },
        parseDate: function (format, value, settings) {
            if (format == null || value == null) {
                throw "Invalid arguments"
            }
            value = (typeof value == "object" ? value.toString() : value + "");
            if (value == "") {
                return null
            }
            var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            var year = -1;
            var month = -1;
            var day = -1;
            var doy = -1;
            var literal = false;
            var lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                    if (matches) {
                        iFormat++
                    }
                    return matches
                };
            var getNumber = function (match) {
                    lookAhead(match);
                    var size = (match == "@" ? 14 : (match == "!" ? 20 : (match == "y" ? 4 : (match == "o" ? 3 : 2))));
                    var digits = new RegExp("^\\d{1," + size + "}");
                    var num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw "Missing number at position " + iValue
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10)
                };
            var getName = function (match, shortNames, longNames) {
                    var names = (lookAhead(match) ? longNames : shortNames);
                    for (var i = 0; i < names.length; i++) {
                        if (value.substr(iValue, names[i].length) == names[i]) {
                            iValue += names[i].length;
                            return i + 1
                        }
                    }
                    throw "Unknown name at position " + iValue
                };
            var checkLiteral = function () {
                    if (value.charAt(iValue) != format.charAt(iFormat)) {
                        throw "Unexpected literal at position " + iValue
                    }
                    iValue++
                };
            var iValue = 0;
            for (var iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        checkLiteral()
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                    case "d":
                        day = getNumber("d");
                        break;
                    case "D":
                        getName("D", dayNamesShort, dayNames);
                        break;
                    case "o":
                        doy = getNumber("o");
                        break;
                    case "m":
                        month = getNumber("m");
                        break;
                    case "M":
                        month = getName("M", monthNamesShort, monthNames);
                        break;
                    case "y":
                        year = getNumber("y");
                        break;
                    case "@":
                        var date = new Date(getNumber("@"));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "!":
                        var date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "'":
                        if (lookAhead("'")) {
                            checkLiteral()
                        } else {
                            literal = true
                        }
                        break;
                    default:
                        checkLiteral()
                    }
                }
            }
            if (year == -1) {
                year = new Date().getFullYear()
            } else {
                if (year < 100) {
                    year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100)
                }
            }
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    var dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break
                    }
                    month++;
                    day -= dim
                } while (true)
            }
            var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day) {
                throw "Invalid date"
            }
            return date
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),
        formatDate: function (format, date, settings) {
            if (!date) {
                return ""
            }
            var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
            var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
            var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
            var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
            var lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                    if (matches) {
                        iFormat++
                    }
                    return matches
                };
            var formatNumber = function (match, value, len) {
                    var num = "" + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = "0" + num
                        }
                    }
                    return num
                };
            var formatName = function (match, value, shortNames, longNames) {
                    return (lookAhead(match) ? longNames[value] : shortNames[value])
                };
            var output = "";
            var literal = false;
            if (date) {
                for (var iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
                            literal = false
                        } else {
                            output += format.charAt(iFormat)
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                        case "d":
                            output += formatNumber("d", date.getDate(), 2);
                            break;
                        case "D":
                            output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                            break;
                        case "o":
                            output += formatNumber("o", (date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000, 3);
                            break;
                        case "m":
                            output += formatNumber("m", date.getMonth() + 1, 2);
                            break;
                        case "M":
                            output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                            break;
                        case "y":
                            output += (lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
                            break;
                        case "@":
                            output += date.getTime();
                            break;
                        case "!":
                            output += date.getTime() * 10000 + this._ticksTo1970;
                            break;
                        case "'":
                            if (lookAhead("'")) {
                                output += "'"
                            } else {
                                literal = true
                            }
                            break;
                        default:
                            output += format.charAt(iFormat)
                        }
                    }
                }
            }
            return output
        },
        _possibleChars: function (format) {
            var chars = "";
            var literal = false;
            var lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                    if (matches) {
                        iFormat++
                    }
                    return matches
                };
            for (var iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        chars += format.charAt(iFormat)
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                    case "d":
                    case "m":
                    case "y":
                    case "@":
                        chars += "0123456789";
                        break;
                    case "D":
                    case "M":
                        return null;
                    case "'":
                        if (lookAhead("'")) {
                            chars += "'"
                        } else {
                            literal = true
                        }
                        break;
                    default:
                        chars += format.charAt(iFormat)
                    }
                }
            }
            return chars
        },
        _get: function (inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name]
        },
        _setDateFromField: function (inst, noDefault) {
            if (inst.input.val() == inst.lastVal) {
                return
            }
            var dateFormat = this._get(inst, "dateFormat");
            var dates = inst.lastVal = inst.input ? inst.input.val() : null;
            var date, defaultDate;
            date = defaultDate = this._getDefaultDate(inst);
            var settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate
            } catch (event) {
                this.log(event);
                dates = (noDefault ? "" : dates)
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst)
        },
        _getDefaultDate: function (inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()))
        },
        _determineDate: function (inst, date, defaultDate) {
            var offsetNumeric = function (offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date
                };
            var offsetString = function (offset) {
                    try {
                        return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst))
                    } catch (e) {}
                    var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date();
                    var year = date.getFullYear();
                    var month = date.getMonth();
                    var day = date.getDate();
                    var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
                    var matches = pattern.exec(offset);
                    while (matches) {
                        switch (matches[2] || "d") {
                        case "d":
                        case "D":
                            day += parseInt(matches[1], 10);
                            break;
                        case "w":
                        case "W":
                            day += parseInt(matches[1], 10) * 7;
                            break;
                        case "m":
                        case "M":
                            month += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                        case "y":
                        case "Y":
                            year += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break
                        }
                        matches = pattern.exec(offset)
                    }
                    return new Date(year, month, day)
                };
            date = (date == null ? defaultDate : (typeof date == "string" ? offsetString(date) : (typeof date == "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : date)));
            date = (date && date.toString() == "Invalid Date" ? defaultDate : date);
            if (date) {
                date.setHours(0);
                date.setMinutes(0);
                date.setSeconds(0);
                date.setMilliseconds(0)
            }
            return this._daylightSavingAdjust(date)
        },
        _daylightSavingAdjust: function (date) {
            if (!date) {
                return null
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date
        },
        _setDate: function (inst, date, noChange) {
            var clear = !(date);
            var origMonth = inst.selectedMonth;
            var origYear = inst.selectedYear;
            date = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = date.getFullYear();
            if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange) {
                this._notifyChange(inst)
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? "" : this._formatDate(inst))
            }
        },
        _getDate: function (inst) {
            var startDate = (!inst.currentYear || (inst.input && inst.input.val() == "") ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate
        },
        _generateHTML: function (inst) {
            var today = new Date();
            today = this._daylightSavingAdjust(new Date(today.getFullYear(), today.getMonth(), today.getDate()));
            var isRTL = this._get(inst, "isRTL");
            var showButtonPanel = this._get(inst, "showButtonPanel");
            var hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext");
            var navigationAsDateFormat = this._get(inst, "navigationAsDateFormat");
            var numMonths = this._getNumberOfMonths(inst);
            var showCurrentAtPos = this._get(inst, "showCurrentAtPos");
            var stepMonths = this._get(inst, "stepMonths");
            var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
            var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            var minDate = this._getMinMaxDate(inst, "min");
            var maxDate = this._getMinMaxDate(inst, "max");
            var drawMonth = inst.drawMonth - showCurrentAtPos;
            var drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--
            }
            if (maxDate) {
                var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            var prevText = this._get(inst, "prevText");
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)));
            var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + dpuuid + ".datepicker._adjustDate('#" + inst.id + "', -" + stepMonths + ", 'M');\" title=\"" + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + prevText + "</span></a>" : (hideIfNoPrevNext ? "" : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + prevText + "</span></a>"));
            var nextText = this._get(inst, "nextText");
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)));
            var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + dpuuid + ".datepicker._adjustDate('#" + inst.id + "', +" + stepMonths + ", 'M');\" title=\"" + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>" : (hideIfNoPrevNext ? "" : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>"));
            var currentText = this._get(inst, "currentText");
            var gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
            var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + dpuuid + '.datepicker._hideDatepicker();">' + this._get(inst, "closeText") + "</button>" : "");
            var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + dpuuid + ".datepicker._gotoToday('#" + inst.id + "');\">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
            var firstDay = parseInt(this._get(inst, "firstDay"), 10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);
            var showWeek = this._get(inst, "showWeek");
            var dayNames = this._get(inst, "dayNames");
            var dayNamesShort = this._get(inst, "dayNamesShort");
            var dayNamesMin = this._get(inst, "dayNamesMin");
            var monthNames = this._get(inst, "monthNames");
            var monthNamesShort = this._get(inst, "monthNamesShort");
            var beforeShowDay = this._get(inst, "beforeShowDay");
            var showOtherMonths = this._get(inst, "showOtherMonths");
            var selectOtherMonths = this._get(inst, "selectOtherMonths");
            var calculateWeek = this._get(inst, "calculateWeek") || this.iso8601Week;
            var defaultDate = this._getDefaultDate(inst);
            var html = "";
            for (var row = 0; row < numMonths[0]; row++) {
                var group = "";
                for (var col = 0; col < numMonths[1]; col++) {
                    var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    var cornerClass = " ui-corner-all";
                    var calender = "";
                    if (isMultiMonth) {
                        calender += '<div class="ui-datepicker-group';
                        if (numMonths[1] > 1) {
                            switch (col) {
                            case 0:
                                calender += " ui-datepicker-group-first";
                                cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                                break;
                            case numMonths[1] - 1:
                                calender += " ui-datepicker-group-last";
                                cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                                break;
                            default:
                                calender += " ui-datepicker-group-middle";
                                cornerClass = "";
                                break
                            }
                        }
                        calender += '">'
                    }
                    calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' + (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : "") + (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + '</div><table class="ui-datepicker-calendar"><thead><tr>';
                    var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, "weekHeader") + "</th>" : "");
                    for (var dow = 0; dow < 7; dow++) {
                        var day = (dow + firstDay) % 7;
                        thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : "") + '><span title="' + dayNames[day] + '">' + dayNamesMin[day] + "</span></th>"
                    }
                    calender += thead + "</tr></thead><tbody>";
                    var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth)
                    }
                    var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    var numRows = (isMultiMonth ? 6 : Math.ceil((leadDays + daysInMonth) / 7));
                    var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (var dRow = 0; dRow < numRows; dRow++) {
                        calender += "<tr>";
                        var tbody = (!showWeek ? "" : '<td class="ui-datepicker-week-col">' + this._get(inst, "calculateWeek")(printDate) + "</td>");
                        for (var dow = 0; dow < 7; dow++) {
                            var daySettings = (beforeShowDay ? beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
                            var otherMonth = (printDate.getMonth() != drawMonth);
                            var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] || (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += '<td class="' + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() == currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() == today.getTime() ? " ui-datepicker-today" : "")) + '"' + ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : "") + (unselectable ? "" : ' onclick="DP_jQuery_' + dpuuid + ".datepicker._selectDay('#" + inst.id + "'," + printDate.getMonth() + "," + printDate.getFullYear() + ', this);return false;"') + ">" + (otherMonth && !showOtherMonths ? "&#xa0;" : (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + "</span>" : '<a class="ui-state-default' + (printDate.getTime() == today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() == currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + '" href="#">' + printDate.getDate() + "</a>")) + "</td>";
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate)
                        }
                        calender += tbody + "</tr>"
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" + ((numMonths[0] > 0 && col == numMonths[1] - 1) ? '<div class="ui-datepicker-row-break"></div>' : "") : "");
                    group += calender
                }
                html += group
            }
            html += buttonPanel + ($.browser.msie && parseInt($.browser.version, 10) < 7 && !inst.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : "");
            inst._keyEvent = false;
            return html
        },
        _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var changeMonth = this._get(inst, "changeMonth");
            var changeYear = this._get(inst, "changeYear");
            var showMonthAfterYear = this._get(inst, "showMonthAfterYear");
            var html = '<div class="ui-datepicker-title">';
            var monthHtml = "";
            if (secondary || !changeMonth) {
                monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + "</span>"
            } else {
                var inMinYear = (minDate && minDate.getFullYear() == drawYear);
                var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
                monthHtml += '<select class="ui-datepicker-month" onchange="DP_jQuery_' + dpuuid + ".datepicker._selectMonthYear('#" + inst.id + "', this, 'M');\" onclick=\"DP_jQuery_" + dpuuid + ".datepicker._clickMonthYear('#" + inst.id + "');\">";
                for (var month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += '<option value="' + month + '"' + (month == drawMonth ? ' selected="selected"' : "") + ">" + monthNamesShort[month] + "</option>"
                    }
                }
                monthHtml += "</select>"
            }
            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "")
            }
            if (secondary || !changeYear) {
                html += '<span class="ui-datepicker-year">' + drawYear + "</span>"
            } else {
                var years = this._get(inst, "yearRange").split(":");
                var thisYear = new Date().getFullYear();
                var determineYear = function (value) {
                        var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) : (value.match(/[+-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10)));
                        return (isNaN(year) ? thisYear : year)
                    };
                var year = determineYear(years[0]);
                var endYear = Math.max(year, determineYear(years[1] || ""));
                year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                html += '<select class="ui-datepicker-year" onchange="DP_jQuery_' + dpuuid + ".datepicker._selectMonthYear('#" + inst.id + "', this, 'Y');\" onclick=\"DP_jQuery_" + dpuuid + ".datepicker._clickMonthYear('#" + inst.id + "');\">";
                for (; year <= endYear; year++) {
                    html += '<option value="' + year + '"' + (year == drawYear ? ' selected="selected"' : "") + ">" + year + "</option>"
                }
                html += "</select>"
            }
            html += this._get(inst, "yearSuffix");
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml
            }
            html += "</div>";
            return html
        },
        _adjustInstDate: function (inst, offset, period) {
            var year = inst.drawYear + (period == "Y" ? offset : 0);
            var month = inst.drawMonth + (period == "M" ? offset : 0);
            var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period == "D" ? offset : 0);
            var date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period == "M" || period == "Y") {
                this._notifyChange(inst)
            }
        },
        _restrictMinMax: function (inst, date) {
            var minDate = this._getMinMaxDate(inst, "min");
            var maxDate = this._getMinMaxDate(inst, "max");
            date = (minDate && date < minDate ? minDate : date);
            date = (maxDate && date > maxDate ? maxDate : date);
            return date
        },
        _notifyChange: function (inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            if (onChange) {
                onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst])
            }
        },
        _getNumberOfMonths: function (inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return (numMonths == null ? [1, 1] : (typeof numMonths == "number" ? [1, numMonths] : numMonths))
        },
        _getMinMaxDate: function (inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null)
        },
        _getDaysInMonth: function (year, month) {
            return 32 - new Date(year, month, 32).getDate()
        },
        _getFirstDayOfMonth: function (year, month) {
            return new Date(year, month, 1).getDay()
        },
        _canAdjustMonth: function (inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst);
            var date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()))
            }
            return this._isInRange(inst, date)
        },
        _isInRange: function (inst, date) {
            var minDate = this._getMinMaxDate(inst, "min");
            var maxDate = this._getMinMaxDate(inst, "max");
            return ((!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()))
        },
        _getFormatConfig: function (inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = (typeof shortYearCutoff != "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            }
        },
        _formatDate: function (inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear
            }
            var date = (day ? (typeof day == "object" ? day : this._daylightSavingAdjust(new Date(year, month, day))) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst))
        }
    });

    function extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null || props[name] == undefined) {
                target[name] = props[name]
            }
        }
        return target
    }
    function isArray(a) {
        return (a && (($.browser.safari && typeof a == "object" && a.length) || (a.constructor && a.constructor.toString().match(/\Array\(\)/))))
    }
    $.fn.datepicker = function (options) {
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick).find("body").append($.datepicker.dpDiv);
            $.datepicker.initialized = true
        }
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options == "string" && (options == "isDisabled" || options == "getDate" || options == "widget")) {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
        }
        if (options == "option" && arguments.length == 2 && typeof arguments[1] == "string") {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
        }
        return this.each(function () {
            typeof options == "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options)
        })
    };
    $.datepicker = new Datepicker();
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.8";
    window["DP_jQuery_" + dpuuid] = $
})(jQuery);
(function (b) {
    var a = "ui-dialog ui-widget ui-widget-content ui-corner-all ";
    b.widget("ui.dialog", {
        options: {
            autoOpen: true,
            buttons: {},
            closeOnEscape: true,
            closeText: "close",
            dialogClass: "",
            draggable: true,
            hide: null,
            height: "auto",
            maxHeight: false,
            maxWidth: false,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: "center",
            resizable: true,
            show: null,
            stack: true,
            title: "",
            width: 300,
            zIndex: 1000
        },
        _create: function () {
            this.originalTitle = this.element.attr("title");
            var k = this,
                l = k.options,
                i = l.title || k.originalTitle || "&#160;",
                d = b.ui.dialog.getTitleId(k.element),
                j = (k.uiDialog = b("<div></div>")).appendTo(document.body).hide().addClass(a + l.dialogClass).css({
                    zIndex: l.zIndex
                }).attr("tabIndex", -1).css("outline", 0).keydown(function (m) {
                    if (l.closeOnEscape && m.keyCode && m.keyCode === b.ui.keyCode.ESCAPE) {
                        k.close(m);
                        m.preventDefault()
                    }
                }).attr({
                    role: "dialog",
                    "aria-labelledby": d
                }).mousedown(function (m) {
                    k.moveToTop(false, m)
                }),
                f = k.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(j),
                e = (k.uiDialogTitlebar = b("<div></div>")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(j),
                h = b('<a href="#"></a>').addClass("ui-dialog-titlebar-close ui-corner-all").attr("role", "button").hover(function () {
                    h.addClass("ui-state-hover")
                }, function () {
                    h.removeClass("ui-state-hover")
                }).focus(function () {
                    h.addClass("ui-state-focus")
                }).blur(function () {
                    h.removeClass("ui-state-focus")
                }).click(function (m) {
                    k.close(m);
                    return false
                }).appendTo(e),
                g = (k.uiDialogTitlebarCloseText = b("<span></span>")).addClass("ui-icon ui-icon-closethick").text(l.closeText).appendTo(h),
                c = b("<span></span>").addClass("ui-dialog-title").attr("id", d).html(i).prependTo(e);
            if (b.isFunction(l.beforeclose) && !b.isFunction(l.beforeClose)) {
                l.beforeClose = l.beforeclose
            }
            e.find("*").add(e).disableSelection();
            if (l.draggable && b.fn.draggable) {
                k._makeDraggable()
            }
            if (l.resizable && b.fn.resizable) {
                k._makeResizable()
            }
            k._createButtons(l.buttons);
            k._isOpen = false;
            if (b.fn.bgiframe) {
                j.bgiframe()
            }
        },
        _init: function () {
            if (this.options.autoOpen) {
                this.open()
            }
        },
        destroy: function () {
            var c = this;
            if (c.overlay) {
                c.overlay.destroy()
            }
            c.uiDialog.hide();
            c.element.unbind(".dialog").removeData("dialog").removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body");
            c.uiDialog.remove();
            if (c.originalTitle) {
                c.element.attr("title", c.originalTitle)
            }
            return c
        },
        widget: function () {
            return this.uiDialog
        },
        close: function (e) {
            var c = this,
                d;
            if (false === c._trigger("beforeClose", e)) {
                return
            }
            if (c.overlay) {
                c.overlay.destroy()
            }
            c.uiDialog.unbind("keypress.ui-dialog");
            c._isOpen = false;
            if (c.options.hide) {
                c.uiDialog.hide(c.options.hide, function () {
                    c._trigger("close", e)
                })
            } else {
                c.uiDialog.hide();
                c._trigger("close", e)
            }
            b.ui.dialog.overlay.resize();
            if (c.options.modal) {
                d = 0;
                b(".ui-dialog").each(function () {
                    if (this !== c.uiDialog[0]) {
                        d = Math.max(d, b(this).css("z-index"))
                    }
                });
                b.ui.dialog.maxZ = d
            }
            return c
        },
        isOpen: function () {
            return this._isOpen
        },
        moveToTop: function (g, f) {
            var c = this,
                e = c.options,
                d;
            if ((e.modal && !g) || (!e.stack && !e.modal)) {
                return c._trigger("focus", f)
            }
            if (e.zIndex > b.ui.dialog.maxZ) {
                b.ui.dialog.maxZ = e.zIndex
            }
            if (c.overlay) {
                b.ui.dialog.maxZ += 1;
                c.overlay.$el.css("z-index", b.ui.dialog.overlay.maxZ = b.ui.dialog.maxZ)
            }
            d = {
                scrollTop: c.element.attr("scrollTop"),
                scrollLeft: c.element.attr("scrollLeft")
            };
            b.ui.dialog.maxZ += 1;
            c.uiDialog.css("z-index", b.ui.dialog.maxZ);
            c.element.attr(d);
            c._trigger("focus", f);
            return c
        },
        open: function () {
            if (this._isOpen) {
                return
            }
            var d = this,
                e = d.options,
                c = d.uiDialog;
            d.overlay = e.modal ? new b.ui.dialog.overlay(d) : null;
            if (c.next().length) {
                c.appendTo("body")
            }
            d._size();
            d._position(e.position);
            c.show(e.show);
            d.moveToTop(true);
            if (e.modal) {
                c.bind("keypress.ui-dialog", function (h) {
                    if (h.keyCode !== b.ui.keyCode.TAB) {
                        return
                    }
                    var g = b(":tabbable", this),
                        i = g.filter(":first"),
                        f = g.filter(":last");
                    if (h.target === f[0] && !h.shiftKey) {
                        i.focus(1);
                        return false
                    } else {
                        if (h.target === i[0] && h.shiftKey) {
                            f.focus(1);
                            return false
                        }
                    }
                })
            }
            b([]).add(c.find(".ui-dialog-content :tabbable:first")).add(c.find(".ui-dialog-buttonpane :tabbable:first")).add(c).filter(":first").focus();
            d._trigger("open");
            d._isOpen = true;
            return d
        },
        _createButtons: function (f) {
            var e = this,
                c = false,
                d = b("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
            e.uiDialog.find(".ui-dialog-buttonpane").remove();
            if (typeof f === "object" && f !== null) {
                b.each(f, function () {
                    return !(c = true)
                })
            }
            if (c) {
                b.each(f, function (g, i) {
                    var h = b('<button type="button"></button>').text(g).click(function () {
                        i.apply(e.element[0], arguments)
                    }).appendTo(d);
                    if (b.fn.button) {
                        h.button()
                    }
                });
                d.appendTo(e.uiDialog)
            }
        },
        _makeDraggable: function () {
            var c = this,
                f = c.options,
                g = b(document),
                e;

            function d(h) {
                return {
                    position: h.position,
                    offset: h.offset
                }
            }
            c.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function (h, i) {
                    e = f.height === "auto" ? "auto" : b(this).height();
                    b(this).height(b(this).height()).addClass("ui-dialog-dragging");
                    c._trigger("dragStart", h, d(i))
                },
                drag: function (h, i) {
                    c._trigger("drag", h, d(i))
                },
                stop: function (h, i) {
                    f.position = [i.position.left - g.scrollLeft(), i.position.top - g.scrollTop()];
                    b(this).removeClass("ui-dialog-dragging").height(e);
                    c._trigger("dragStop", h, d(i));
                    b.ui.dialog.overlay.resize()
                }
            })
        },
        _makeResizable: function (h) {
            h = (h === undefined ? this.options.resizable : h);
            var d = this,
                g = d.options,
                c = d.uiDialog.css("position"),
                f = (typeof h === "string" ? h : "n,e,s,w,se,sw,ne,nw");

            function e(i) {
                return {
                    originalPosition: i.originalPosition,
                    originalSize: i.originalSize,
                    position: i.position,
                    size: i.size
                }
            }
            d.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: d.element,
                maxWidth: g.maxWidth,
                maxHeight: g.maxHeight,
                minWidth: g.minWidth,
                minHeight: d._minHeight(),
                handles: f,
                start: function (i, j) {
                    b(this).addClass("ui-dialog-resizing");
                    d._trigger("resizeStart", i, e(j))
                },
                resize: function (i, j) {
                    d._trigger("resize", i, e(j))
                },
                stop: function (i, j) {
                    b(this).removeClass("ui-dialog-resizing");
                    g.height = b(this).height();
                    g.width = b(this).width();
                    d._trigger("resizeStop", i, e(j));
                    b.ui.dialog.overlay.resize()
                }
            }).css("position", c).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")
        },
        _minHeight: function () {
            var c = this.options;
            if (c.height === "auto") {
                return c.minHeight
            } else {
                return Math.min(c.minHeight, c.height)
            }
        },
        _position: function (d) {
            var e = [],
                f = [0, 0],
                c;
            d = d || b.ui.dialog.prototype.options.position;
            if (typeof d === "string" || (typeof d === "object" && "0" in d)) {
                e = d.split ? d.split(" ") : [d[0], d[1]];
                if (e.length === 1) {
                    e[1] = e[0]
                }
                b.each(["left", "top"], function (h, g) {
                    if (+e[h] === e[h]) {
                        f[h] = e[h];
                        e[h] = g
                    }
                })
            } else {
                if (typeof d === "object") {
                    if ("left" in d) {
                        e[0] = "left";
                        f[0] = d.left
                    } else {
                        if ("right" in d) {
                            e[0] = "right";
                            f[0] = -d.right
                        }
                    }
                    if ("top" in d) {
                        e[1] = "top";
                        f[1] = d.top
                    } else {
                        if ("bottom" in d) {
                            e[1] = "bottom";
                            f[1] = -d.bottom
                        }
                    }
                }
            }
            c = this.uiDialog.is(":visible");
            if (!c) {
                this.uiDialog.show()
            }
            this.uiDialog.css({
                top: 0,
                left: 0
            }).position({
                my: e.join(" "),
                at: e.join(" "),
                offset: f.join(" "),
                of: window,
                collision: "fit",
                using: function (h) {
                    var g = b(this).css(h).offset().top;
                    if (g < 0) {
                        b(this).css("top", h.top - g)
                    }
                }
            });
            if (!c) {
                this.uiDialog.hide()
            }
        },
        _setOption: function (f, g) {
            var d = this,
                c = d.uiDialog,
                h = c.is(":data(resizable)"),
                e = false;
            switch (f) {
            case "beforeclose":
                f = "beforeClose";
                break;
            case "buttons":
                d._createButtons(g);
                break;
            case "closeText":
                d.uiDialogTitlebarCloseText.text("" + g);
                break;
            case "dialogClass":
                c.removeClass(d.options.dialogClass).addClass(a + g);
                break;
            case "disabled":
                if (g) {
                    c.addClass("ui-dialog-disabled")
                } else {
                    c.removeClass("ui-dialog-disabled")
                }
                break;
            case "draggable":
                if (g) {
                    d._makeDraggable()
                } else {
                    c.draggable("destroy")
                }
                break;
            case "height":
                e = true;
                break;
            case "maxHeight":
                if (h) {
                    c.resizable("option", "maxHeight", g)
                }
                e = true;
                break;
            case "maxWidth":
                if (h) {
                    c.resizable("option", "maxWidth", g)
                }
                e = true;
                break;
            case "minHeight":
                if (h) {
                    c.resizable("option", "minHeight", g)
                }
                e = true;
                break;
            case "minWidth":
                if (h) {
                    c.resizable("option", "minWidth", g)
                }
                e = true;
                break;
            case "position":
                d._position(g);
                break;
            case "resizable":
                if (h && !g) {
                    c.resizable("destroy")
                }
                if (h && typeof g === "string") {
                    c.resizable("option", "handles", g)
                }
                if (!h && g !== false) {
                    d._makeResizable(g)
                }
                break;
            case "title":
                b(".ui-dialog-title", d.uiDialogTitlebar).html("" + (g || "&#160;"));
                break;
            case "width":
                e = true;
                break
            }
            b.Widget.prototype._setOption.apply(d, arguments);
            if (e) {
                d._size()
            }
        },
        _size: function () {
            var d = this.options,
                c;
            this.element.css("width", "auto").hide();
            c = this.uiDialog.css({
                height: "auto",
                width: d.width
            }).height();
            this.element.css(d.height === "auto" ? {
                minHeight: Math.max(d.minHeight - c, 0),
                height: "auto"
            } : {
                minHeight: 0,
                height: Math.max(d.height - c, 0)
            }).show();
            if (this.uiDialog.is(":data(resizable)")) {
                this.uiDialog.resizable("option", "minHeight", this._minHeight())
            }
        }
    });
    b.extend(b.ui.dialog, {
        version: "1.8",
        uuid: 0,
        maxZ: 0,
        getTitleId: function (c) {
            var d = c.attr("id");
            if (!d) {
                this.uuid += 1;
                d = this.uuid
            }
            return "ui-dialog-title-" + d
        },
        overlay: function (c) {
            this.$el = b.ui.dialog.overlay.create(c)
        }
    });
    b.extend(b.ui.dialog.overlay, {
        instances: [],
        oldInstances: [],
        maxZ: 0,
        events: b.map("focus,mousedown,mouseup,keydown,keypress,click".split(","), function (c) {
            return c + ".dialog-overlay"
        }).join(" "),
        create: function (d) {
            if (this.instances.length === 0) {
                setTimeout(function () {
                    if (b.ui.dialog.overlay.instances.length) {
                        b(document).bind(b.ui.dialog.overlay.events, function (e) {
                            return (b(e.target).zIndex() >= b.ui.dialog.overlay.maxZ)
                        })
                    }
                }, 1);
                b(document).bind("keydown.dialog-overlay", function (e) {
                    if (d.options.closeOnEscape && e.keyCode && e.keyCode === b.ui.keyCode.ESCAPE) {
                        d.close(e);
                        e.preventDefault()
                    }
                });
                b(window).bind("resize.dialog-overlay", b.ui.dialog.overlay.resize)
            }
            var c = (this.oldInstances.pop() || b("<div></div>").addClass("ui-widget-overlay")).appendTo(document.body).css({
                width: this.width(),
                height: this.height()
            });
            if (b.fn.bgiframe) {
                c.bgiframe()
            }
            this.instances.push(c);
            return c
        },
        destroy: function (c) {
            this.oldInstances.push(this.instances.splice(b.inArray(c, this.instances), 1)[0]);
            if (this.instances.length === 0) {
                b([document, window]).unbind(".dialog-overlay")
            }
            c.remove();
            var d = 0;
            b.each(this.instances, function () {
                d = Math.max(d, this.css("z-index"))
            });
            this.maxZ = d
        },
        height: function () {
            var d, c;
            if (b.browser.msie && b.browser.version < 7) {
                d = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
                c = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight);
                if (d < c) {
                    return b(window).height() + "px"
                } else {
                    return d + "px"
                }
            } else {
                return b(document).height() + "px"
            }
        },
        width: function () {
            var c, d;
            if (b.browser.msie && b.browser.version < 7) {
                c = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
                d = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
                if (c < d) {
                    return b(window).width() + "px"
                } else {
                    return c + "px"
                }
            } else {
                return b(document).width() + "px"
            }
        },
        resize: function () {
            var c = b([]);
            b.each(b.ui.dialog.overlay.instances, function () {
                c = c.add(this)
            });
            c.css({
                width: 0,
                height: 0
            }).css({
                width: b.ui.dialog.overlay.width(),
                height: b.ui.dialog.overlay.height()
            })
        }
    });
    b.extend(b.ui.dialog.overlay.prototype, {
        destroy: function () {
            b.ui.dialog.overlay.destroy(this.$el)
        }
    })
}(jQuery));
(function (f) {
    f.ui = f.ui || {};
    var c = /left|center|right/,
        e = "center",
        d = /top|center|bottom/,
        g = "center",
        a = f.fn.position,
        b = f.fn.offset;
    f.fn.position = function (i) {
        if (!i || !i.of) {
            return a.apply(this, arguments)
        }
        i = f.extend({}, i);
        var l = f(i.of),
            n = (i.collision || "flip").split(" "),
            m = i.offset ? i.offset.split(" ") : [0, 0],
            k, h, j;
        if (i.of.nodeType === 9) {
            k = l.width();
            h = l.height();
            j = {
                top: 0,
                left: 0
            }
        } else {
            if (i.of.scrollTo && i.of.document) {
                k = l.width();
                h = l.height();
                j = {
                    top: l.scrollTop(),
                    left: l.scrollLeft()
                }
            } else {
                if (i.of.preventDefault) {
                    i.at = "left top";
                    k = h = 0;
                    j = {
                        top: i.of.pageY,
                        left: i.of.pageX
                    }
                } else {
                    k = l.outerWidth();
                    h = l.outerHeight();
                    j = l.offset()
                }
            }
        }
        f.each(["my", "at"], function () {
            var o = (i[this] || "").split(" ");
            if (o.length === 1) {
                o = c.test(o[0]) ? o.concat([g]) : d.test(o[0]) ? [e].concat(o) : [e, g]
            }
            o[0] = c.test(o[0]) ? o[0] : e;
            o[1] = d.test(o[1]) ? o[1] : g;
            i[this] = o
        });
        if (n.length === 1) {
            n[1] = n[0]
        }
        m[0] = parseInt(m[0], 10) || 0;
        if (m.length === 1) {
            m[1] = m[0]
        }
        m[1] = parseInt(m[1], 10) || 0;
        if (i.at[0] === "right") {
            j.left += k
        } else {
            if (i.at[0] === e) {
                j.left += k / 2
            }
        }
        if (i.at[1] === "bottom") {
            j.top += h
        } else {
            if (i.at[1] === g) {
                j.top += h / 2
            }
        }
        j.left += m[0];
        j.top += m[1];
        return this.each(function () {
            var r = f(this),
                q = r.outerWidth(),
                p = r.outerHeight(),
                o = f.extend({}, j);
            if (i.my[0] === "right") {
                o.left -= q
            } else {
                if (i.my[0] === e) {
                    o.left -= q / 2
                }
            }
            if (i.my[1] === "bottom") {
                o.top -= p
            } else {
                if (i.my[1] === g) {
                    o.top -= p / 2
                }
            }
            f.each(["left", "top"], function (u, s) {
                if (f.ui.position[n[u]]) {
                    f.ui.position[n[u]][s](o, {
                        targetWidth: k,
                        targetHeight: h,
                        elemWidth: q,
                        elemHeight: p,
                        offset: m,
                        my: i.my,
                        at: i.at
                    })
                }
            });
            if (f.fn.bgiframe) {
                r.bgiframe()
            }
            r.offset(f.extend(o, {
                using: i.using
            }))
        })
    };
    f.ui.position = {
        fit: {
            left: function (h, i) {
                var k = f(window),
                    j = h.left + i.elemWidth - k.width() - k.scrollLeft();
                h.left = j > 0 ? h.left - j : Math.max(0, h.left)
            },
            top: function (h, i) {
                var k = f(window),
                    j = h.top + i.elemHeight - k.height() - k.scrollTop();
                h.top = j > 0 ? h.top - j : Math.max(0, h.top)
            }
        },
        flip: {
            left: function (i, j) {
                if (j.at[0] === "center") {
                    return
                }
                var l = f(window),
                    k = i.left + j.elemWidth - l.width() - l.scrollLeft(),
                    h = j.my[0] === "left" ? -j.elemWidth : j.my[0] === "right" ? j.elemWidth : 0,
                    m = -2 * j.offset[0];
                i.left += i.left < 0 ? h + j.targetWidth + m : k > 0 ? h - j.targetWidth + m : 0
            },
            top: function (i, k) {
                if (k.at[1] === "center") {
                    return
                }
                var m = f(window),
                    l = i.top + k.elemHeight - m.height() - m.scrollTop(),
                    h = k.my[1] === "top" ? -k.elemHeight : k.my[1] === "bottom" ? k.elemHeight : 0,
                    j = k.at[1] === "top" ? k.targetHeight : -k.targetHeight,
                    n = -2 * k.offset[1];
                i.top += i.top < 0 ? h + k.targetHeight + n : l > 0 ? h + j + n : 0
            }
        }
    };
    if (!f.offset.setOffset) {
        f.offset.setOffset = function (l, i) {
            if (/static/.test(f.curCSS(l, "position"))) {
                l.style.position = "relative"
            }
            var k = f(l),
                n = k.offset(),
                h = parseInt(f.curCSS(l, "top", true), 10) || 0,
                m = parseInt(f.curCSS(l, "left", true), 10) || 0,
                j = {
                    top: (i.top - n.top) + h,
                    left: (i.left - n.left) + m
                };
            if ("using" in i) {
                i.using.call(l, j)
            } else {
                k.css(j)
            }
        };
        f.fn.offset = function (h) {
            var i = this[0];
            if (!i || !i.ownerDocument) {
                return null
            }
            if (h) {
                return this.each(function () {
                    f.offset.setOffset(this, h)
                })
            }
            return b.call(this)
        }
    }
}(jQuery));
(function (a) {
    a.widget("ui.progressbar", {
        options: {
            value: 0
        },
        _create: function () {
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                role: "progressbar",
                "aria-valuemin": this._valueMin(),
                "aria-valuemax": this._valueMax(),
                "aria-valuenow": this._value()
            });
            this.valueDiv = a("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
            this._refreshValue()
        },
        destroy: function () {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.valueDiv.remove();
            a.Widget.prototype.destroy.apply(this, arguments)
        },
        value: function (b) {
            if (b === undefined) {
                return this._value()
            }
            this._setOption("value", b);
            return this
        },
        _setOption: function (b, c) {
            switch (b) {
            case "value":
                this.options.value = c;
                this._refreshValue();
                this._trigger("change");
                break
            }
            a.Widget.prototype._setOption.apply(this, arguments)
        },
        _value: function () {
            var b = this.options.value;
            if (typeof b !== "number") {
                b = 0
            }
            if (b < this._valueMin()) {
                b = this._valueMin()
            }
            if (b > this._valueMax()) {
                b = this._valueMax()
            }
            return b
        },
        _valueMin: function () {
            return 0
        },
        _valueMax: function () {
            return 100
        },
        _refreshValue: function () {
            var b = this.value();
            this.valueDiv[b === this._valueMax() ? "addClass" : "removeClass"]("ui-corner-right").width(b + "%");
            this.element.attr("aria-valuenow", b)
        }
    });
    a.extend(a.ui.progressbar, {
        version: "1.8"
    })
})(jQuery);
(function (b) {
    var a = 5;
    b.widget("ui.slider", b.ui.mouse, {
        widgetEventPrefix: "slide",
        options: {
            animate: false,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: false,
            step: 1,
            value: 0,
            values: null
        },
        _create: function () {
            var c = this,
                d = this.options;
            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all");
            if (d.disabled) {
                this.element.addClass("ui-slider-disabled ui-disabled")
            }
            this.range = b([]);
            if (d.range) {
                if (d.range === true) {
                    this.range = b("<div></div>");
                    if (!d.values) {
                        d.values = [this._valueMin(), this._valueMin()]
                    }
                    if (d.values.length && d.values.length != 2) {
                        d.values = [d.values[0], d.values[0]]
                    }
                } else {
                    this.range = b("<div></div>")
                }
                this.range.appendTo(this.element).addClass("ui-slider-range");
                if (d.range == "min" || d.range == "max") {
                    this.range.addClass("ui-slider-range-" + d.range)
                }
                this.range.addClass("ui-widget-header")
            }
            if (b(".ui-slider-handle", this.element).length == 0) {
                b('<a href="#"></a>').appendTo(this.element).addClass("ui-slider-handle")
            }
            if (d.values && d.values.length) {
                while (b(".ui-slider-handle", this.element).length < d.values.length) {
                    b('<a href="#"></a>').appendTo(this.element).addClass("ui-slider-handle")
                }
            }
            this.handles = b(".ui-slider-handle", this.element).addClass("ui-state-default ui-corner-all");
            this.handle = this.handles.eq(0);
            this.handles.add(this.range).filter("a").click(function (e) {
                e.preventDefault()
            }).hover(function () {
                if (!d.disabled) {
                    b(this).addClass("ui-state-hover")
                }
            }, function () {
                b(this).removeClass("ui-state-hover")
            }).focus(function () {
                if (!d.disabled) {
                    b(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
                    b(this).addClass("ui-state-focus")
                } else {
                    b(this).blur()
                }
            }).blur(function () {
                b(this).removeClass("ui-state-focus")
            });
            this.handles.each(function (e) {
                b(this).data("index.ui-slider-handle", e)
            });
            this.handles.keydown(function (j) {
                var g = true;
                var f = b(this).data("index.ui-slider-handle");
                if (c.options.disabled) {
                    return
                }
                switch (j.keyCode) {
                case b.ui.keyCode.HOME:
                case b.ui.keyCode.END:
                case b.ui.keyCode.PAGE_UP:
                case b.ui.keyCode.PAGE_DOWN:
                case b.ui.keyCode.UP:
                case b.ui.keyCode.RIGHT:
                case b.ui.keyCode.DOWN:
                case b.ui.keyCode.LEFT:
                    g = false;
                    if (!c._keySliding) {
                        c._keySliding = true;
                        b(this).addClass("ui-state-active");
                        c._start(j, f)
                    }
                    break
                }
                var h, e, i = c._step();
                if (c.options.values && c.options.values.length) {
                    h = e = c.values(f)
                } else {
                    h = e = c.value()
                }
                switch (j.keyCode) {
                case b.ui.keyCode.HOME:
                    e = c._valueMin();
                    break;
                case b.ui.keyCode.END:
                    e = c._valueMax();
                    break;
                case b.ui.keyCode.PAGE_UP:
                    e = h + ((c._valueMax() - c._valueMin()) / a);
                    break;
                case b.ui.keyCode.PAGE_DOWN:
                    e = h - ((c._valueMax() - c._valueMin()) / a);
                    break;
                case b.ui.keyCode.UP:
                case b.ui.keyCode.RIGHT:
                    if (h == c._valueMax()) {
                        return
                    }
                    e = h + i;
                    break;
                case b.ui.keyCode.DOWN:
                case b.ui.keyCode.LEFT:
                    if (h == c._valueMin()) {
                        return
                    }
                    e = h - i;
                    break
                }
                c._slide(j, f, e);
                return g
            }).keyup(function (f) {
                var e = b(this).data("index.ui-slider-handle");
                if (c._keySliding) {
                    c._keySliding = false;
                    c._stop(f, e);
                    c._change(f, e);
                    b(this).removeClass("ui-state-active")
                }
            });
            this._refreshValue();
            this._animateOff = false
        },
        destroy: function () {
            this.handles.remove();
            this.range.remove();
            this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider");
            this._mouseDestroy();
            return this
        },
        _mouseCapture: function (e) {
            var f = this.options;
            if (f.disabled) {
                return false
            }
            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();
            var i = {
                x: e.pageX,
                y: e.pageY
            };
            var k = this._normValueFromMouse(i);
            var d = this._valueMax() - this._valueMin() + 1,
                g;
            var l = this,
                j;
            this.handles.each(function (m) {
                var n = Math.abs(k - l.values(m));
                if (d > n) {
                    d = n;
                    g = b(this);
                    j = m
                }
            });
            if (f.range == true && this.values(1) == f.min) {
                g = b(this.handles[++j])
            }
            this._start(e, j);
            this._mouseSliding = true;
            l._handleIndex = j;
            g.addClass("ui-state-active").focus();
            var h = g.offset();
            var c = !b(e.target).parents().andSelf().is(".ui-slider-handle");
            this._clickOffset = c ? {
                left: 0,
                top: 0
            } : {
                left: e.pageX - h.left - (g.width() / 2),
                top: e.pageY - h.top - (g.height() / 2) - (parseInt(g.css("borderTopWidth"), 10) || 0) - (parseInt(g.css("borderBottomWidth"), 10) || 0) + (parseInt(g.css("marginTop"), 10) || 0)
            };
            k = this._normValueFromMouse(i);
            this._slide(e, j, k);
            this._animateOff = true;
            return true
        },
        _mouseStart: function (c) {
            return true
        },
        _mouseDrag: function (e) {
            var c = {
                x: e.pageX,
                y: e.pageY
            };
            var d = this._normValueFromMouse(c);
            this._slide(e, this._handleIndex, d);
            return false
        },
        _mouseStop: function (c) {
            this.handles.removeClass("ui-state-active");
            this._mouseSliding = false;
            this._stop(c, this._handleIndex);
            this._change(c, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;
            return false
        },
        _detectOrientation: function () {
            this.orientation = this.options.orientation == "vertical" ? "vertical" : "horizontal"
        },
        _normValueFromMouse: function (e) {
            var d, i;
            if ("horizontal" == this.orientation) {
                d = this.elementSize.width;
                i = e.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)
            } else {
                d = this.elementSize.height;
                i = e.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)
            }
            var g = (i / d);
            if (g > 1) {
                g = 1
            }
            if (g < 0) {
                g = 0
            }
            if ("vertical" == this.orientation) {
                g = 1 - g
            }
            var f = this._valueMax() - this._valueMin(),
                j = g * f,
                c = j % this.options.step,
                h = this._valueMin() + j - c;
            if (c > (this.options.step / 2)) {
                h += this.options.step
            }
            return parseFloat(h.toFixed(5))
        },
        _start: function (e, d) {
            var c = {
                handle: this.handles[d],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                c.value = this.values(d);
                c.values = this.values()
            }
            this._trigger("start", e, c)
        },
        _slide: function (g, f, e) {
            var h = this.handles[f];
            if (this.options.values && this.options.values.length) {
                var c = this.values(f ? 0 : 1);
                if ((this.options.values.length == 2 && this.options.range === true) && ((f == 0 && e > c) || (f == 1 && e < c))) {
                    e = c
                }
                if (e != this.values(f)) {
                    var d = this.values();
                    d[f] = e;
                    var i = this._trigger("slide", g, {
                        handle: this.handles[f],
                        value: e,
                        values: d
                    });
                    var c = this.values(f ? 0 : 1);
                    if (i !== false) {
                        this.values(f, e, true)
                    }
                }
            } else {
                if (e != this.value()) {
                    var i = this._trigger("slide", g, {
                        handle: this.handles[f],
                        value: e
                    });
                    if (i !== false) {
                        this.value(e)
                    }
                }
            }
        },
        _stop: function (e, d) {
            var c = {
                handle: this.handles[d],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                c.value = this.values(d);
                c.values = this.values()
            }
            this._trigger("stop", e, c)
        },
        _change: function (e, d) {
            if (!this._keySliding && !this._mouseSliding) {
                var c = {
                    handle: this.handles[d],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    c.value = this.values(d);
                    c.values = this.values()
                }
                this._trigger("change", e, c)
            }

        },
        value: function (c) {
            if (arguments.length) {
                this.options.value = this._trimValue(c);
                this._refreshValue();
                this._change(null, 0)
            }
            return this._value()
        },
        values: function (e, h) {
            if (arguments.length > 1) {
                this.options.values[e] = this._trimValue(h);
                this._refreshValue();
                this._change(null, e)
            }
            if (arguments.length) {
                if (b.isArray(arguments[0])) {
                    var g = this.options.values,
                        d = arguments[0];
                    for (var f = 0, c = g.length; f < c; f++) {
                        g[f] = this._trimValue(d[f]);
                        this._change(null, f)
                    }
                    this._refreshValue()
                } else {
                    if (this.options.values && this.options.values.length) {
                        return this._values(e)
                    } else {
                        return this.value()
                    }
                }
            } else {
                return this._values()
            }
        },
        _setOption: function (d, e) {
            var c, f = 0;
            if (jQuery.isArray(this.options.values)) {
                f = this.options.values.length
            }
            b.Widget.prototype._setOption.apply(this, arguments);
            switch (d) {
            case "disabled":
                if (e) {
                    this.handles.filter(".ui-state-focus").blur();
                    this.handles.removeClass("ui-state-hover");
                    this.handles.attr("disabled", "disabled");
                    this.element.addClass("ui-disabled")
                } else {
                    this.handles.removeAttr("disabled");
                    this.element.removeClass("ui-disabled")
                }
            case "orientation":
                this._detectOrientation();
                this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                this._refreshValue();
                break;
            case "value":
                this._animateOff = true;
                this._refreshValue();
                this._change(null, 0);
                this._animateOff = false;
                break;
            case "values":
                this._animateOff = true;
                this._refreshValue();
                for (c = 0; c < f; c++) {
                    this._change(null, c)
                }
                this._animateOff = false;
                break
            }
        },
        _step: function () {
            var c = this.options.step;
            return c
        },
        _value: function () {
            var c = this.options.value;
            c = this._trimValue(c);
            return c
        },
        _values: function (d) {
            if (arguments.length) {
                var g = this.options.values[d];
                g = this._trimValue(g);
                return g
            } else {
                var f = this.options.values.slice();
                for (var e = 0, c = f.length; e < c; e++) {
                    f[e] = this._trimValue(f[e])
                }
                return f
            }
        },
        _trimValue: function (c) {
            if (c < this._valueMin()) {
                c = this._valueMin()
            }
            if (c > this._valueMax()) {
                c = this._valueMax()
            }
            return c
        },
        _valueMin: function () {
            var c = this.options.min;
            return c
        },
        _valueMax: function () {
            var c = this.options.max;
            return c
        },
        _refreshValue: function () {
            var g = this.options.range,
                e = this.options,

                m = this;
            var d = (!this._animateOff) ? e.animate : false;
            if (this.options.values && this.options.values.length) {
                var j, i;
                this.handles.each(function (q, o) {
                    var p = (m.values(q) - m._valueMin()) / (m._valueMax() - m._valueMin()) * 100;
                    var n = {};
                    n[m.orientation == "horizontal" ? "left" : "bottom"] = p + "%";
                    b(this).stop(1, 1)[d ? "animate" : "css"](n, e.animate);
                    if (m.options.range === true) {
                        if (m.orientation == "horizontal") {
                            (q == 0) && m.range.stop(1, 1)[d ? "animate" : "css"]({
                                left: p + "%"
                            }, e.animate);
                            (q == 1) && m.range[d ? "animate" : "css"]({
                                width: (p - lastValPercent) + "%"
                            }, {
                                queue: false,
                                duration: e.animate
                            })
                        } else {
                            (q == 0) && m.range.stop(1, 1)[d ? "animate" : "css"]({
                                bottom: (p) + "%"
                            }, e.animate);
                            (q == 1) && m.range[d ? "animate" : "css"]({
                                height: (p - lastValPercent) + "%"
                            }, {
                                queue: false,
                                duration: e.animate
                            })
                        }
                    }
                    lastValPercent = p
                })
            } else {
                var k = this.value(),
                    h = this._valueMin(),
                    l = this._valueMax(),
                    f = l != h ? (k - h) / (l - h) * 100 : 0;
                var c = {};
                c[m.orientation == "horizontal" ? "left" : "bottom"] = f + "%";
                this.handle.stop(1, 1)[d ? "animate" : "css"](c, e.animate);
                (g == "min") && (this.orientation == "horizontal") && this.range.stop(1, 1)[d ? "animate" : "css"]({
                    width: f + "%"
                }, e.animate);
                (g == "max") && (this.orientation == "horizontal") && this.range[d ? "animate" : "css"]({
                    width: (100 - f) + "%"
                }, {
                    queue: false,
                    duration: e.animate
                });
                (g == "min") && (this.orientation == "vertical") && this.range.stop(1, 1)[d ? "animate" : "css"]({
                    height: f + "%"
                }, e.animate);
                (g == "max") && (this.orientation == "vertical") && this.range[d ? "animate" : "css"]({
                    height: (100 - f) + "%"
                }, {
                    queue: false,
                    duration: e.animate
                })
            }
        }
    });
    b.extend(b.ui.slider, {
        version: "1.8"
    })
})(jQuery);
(function (c) {
    var b = 0,
        a = 0;
    c.widget("ui.tabs", {
        options: {
            add: null,
            ajaxOptions: null,
            cache: false,
            cookie: null,
            collapsible: false,
            disable: null,
            disabled: [],
            enable: null,
            event: "click",
            fx: null,
            idPrefix: "ui-tabs-",
            load: null,
            panelTemplate: "<div></div>",
            remove: null,
            select: null,
            show: null,
            spinner: "<em>Loading&#8230;</em>",
            tabTemplate: '<li><a href="#{href}"><span>#{label}</span></a></li>'
        },
        _create: function () {
            this._tabify(true)
        },
        _setOption: function (d, e) {
            if (d == "selected") {
                if (this.options.collapsible && e == this.options.selected) {
                    return
                }
                this.select(e)
            } else {
                this.options[d] = e;
                this._tabify()
            }
        },
        _tabId: function (d) {
            return d.title && d.title.replace(/\s/g, "_").replace(/[^A-Za-z0-9\-_:\.]/g, "") || this.options.idPrefix + (++b)
        },
        _sanitizeSelector: function (d) {
            return d.replace(/:/g, "\\:")
        },
        _cookie: function () {
            var d = this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + (++a));
            return c.cookie.apply(null, [d].concat(c.makeArray(arguments)))
        },
        _ui: function (e, d) {
            return {
                tab: e,
                panel: d,
                index: this.anchors.index(e)
            }
        },
        _cleanup: function () {
            this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function () {
                var d = c(this);
                d.html(d.data("label.tabs")).removeData("label.tabs")
            })
        },
        _tabify: function (q) {
            this.list = this.element.find("ol,ul").eq(0);
            this.lis = c("li:has(a[href])", this.list);
            this.anchors = this.lis.map(function () {
                return c("a", this)[0]
            });
            this.panels = c([]);
            var r = this,
                f = this.options;
            var e = /^#.+/;
            this.anchors.each(function (u, o) {
                var s = c(o).attr("href");
                var v = s.split("#")[0],
                    w;
                if (v && (v === location.toString().split("#")[0] || (w = c("base")[0]) && v === w.href)) {
                    s = o.hash;
                    o.href = s
                }
                if (e.test(s)) {
                    r.panels = r.panels.add(r._sanitizeSelector(s))
                } else {
                    if (s != "#") {
                        c.data(o, "href.tabs", s);
                        c.data(o, "load.tabs", s.replace(/#.*$/, ""));
                        var y = r._tabId(o);
                        o.href = "#" + y;
                        var x = c("#" + y);
                        if (!x.length) {
                            x = c(f.panelTemplate).attr("id", y).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(r.panels[u - 1] || r.list);
                            x.data("destroy.tabs", true)
                        }
                        r.panels = r.panels.add(x)
                    } else {
                        f.disabled.push(u)
                    }
                }
            });
            if (q) {
                this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all");
                this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
                this.lis.addClass("ui-state-default ui-corner-top");
                this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom");
                if (f.selected === undefined) {
                    if (location.hash) {
                        this.anchors.each(function (s, o) {
                            if (o.hash == location.hash) {
                                f.selected = s;
                                return false
                            }
                        })
                    }
                    if (typeof f.selected != "number" && f.cookie) {
                        f.selected = parseInt(r._cookie(), 10)
                    }
                    if (typeof f.selected != "number" && this.lis.filter(".ui-tabs-selected").length) {
                        f.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
                    }
                    f.selected = f.selected || (this.lis.length ? 0 : -1)
                } else {
                    if (f.selected === null) {
                        f.selected = -1
                    }
                }
                f.selected = ((f.selected >= 0 && this.anchors[f.selected]) || f.selected < 0) ? f.selected : 0;
                f.disabled = c.unique(f.disabled.concat(c.map(this.lis.filter(".ui-state-disabled"), function (s, o) {
                    return r.lis.index(s)
                }))).sort();
                if (c.inArray(f.selected, f.disabled) != -1) {
                    f.disabled.splice(c.inArray(f.selected, f.disabled), 1)
                }
                this.panels.addClass("ui-tabs-hide");
                this.lis.removeClass("ui-tabs-selected ui-state-active");
                if (f.selected >= 0 && this.anchors.length) {
                    this.panels.eq(f.selected).removeClass("ui-tabs-hide");
                    this.lis.eq(f.selected).addClass("ui-tabs-selected ui-state-active");
                    r.element.queue("tabs", function () {
                        r._trigger("show", null, r._ui(r.anchors[f.selected], r.panels[f.selected]))
                    });
                    this.load(f.selected)
                }
                c(window).bind("unload", function () {
                    r.lis.add(r.anchors).unbind(".tabs");
                    r.lis = r.anchors = r.panels = null
                })
            } else {
                f.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
            }
            this.element[f.collapsible ? "addClass" : "removeClass"]("ui-tabs-collapsible");
            if (f.cookie) {
                this._cookie(f.selected, f.cookie)
            }
            for (var j = 0, p;
            (p = this.lis[j]); j++) {
                c(p)[c.inArray(j, f.disabled) != -1 && !c(p).hasClass("ui-tabs-selected") ? "addClass" : "removeClass"]("ui-state-disabled")
            }
            if (f.cache === false) {
                this.anchors.removeData("cache.tabs")
            }
            this.lis.add(this.anchors).unbind(".tabs");
            if (f.event != "mouseover") {
                var h = function (o, i) {
                        if (i.is(":not(.ui-state-disabled)")) {
                            i.addClass("ui-state-" + o)
                        }
                    };
                var l = function (o, i) {
                        i.removeClass("ui-state-" + o)
                    };
                this.lis.bind("mouseover.tabs", function () {
                    h("hover", c(this))
                });
                this.lis.bind("mouseout.tabs", function () {
                    l("hover", c(this))
                });
                this.anchors.bind("focus.tabs", function () {
                    h("focus", c(this).closest("li"))
                });
                this.anchors.bind("blur.tabs", function () {
                    l("focus", c(this).closest("li"))
                })
            }
            var d, k;
            if (f.fx) {
                if (c.isArray(f.fx)) {
                    d = f.fx[0];
                    k = f.fx[1]
                } else {
                    d = k = f.fx
                }
            }
            function g(i, o) {
                i.css({
                    display: ""
                });
                if (!c.support.opacity && o.opacity) {
                    i[0].style.removeAttribute("filter")
                }
            }
            var m = k ?
            function (i, o) {
                c(i).closest("li").addClass("ui-tabs-selected ui-state-active");
                o.hide().removeClass("ui-tabs-hide").animate(k, k.duration || "normal", function () {
                    g(o, k);
                    r._trigger("show", null, r._ui(i, o[0]))
                })
            } : function (i, o) {
                c(i).closest("li").addClass("ui-tabs-selected ui-state-active");
                o.removeClass("ui-tabs-hide");
                r._trigger("show", null, r._ui(i, o[0]))
            };
            var n = d ?
            function (o, i) {
                i.animate(d, d.duration || "normal", function () {
                    r.lis.removeClass("ui-tabs-selected ui-state-active");
                    i.addClass("ui-tabs-hide");
                    g(i, d);
                    r.element.dequeue("tabs")
                })
            } : function (o, i, s) {
                r.lis.removeClass("ui-tabs-selected ui-state-active");
                i.addClass("ui-tabs-hide");
                r.element.dequeue("tabs")
            };
            this.anchors.bind(f.event + ".tabs", function () {
                var o = this,
                    u = c(this).closest("li"),
                    i = r.panels.filter(":not(.ui-tabs-hide)"),
                    s = c(r._sanitizeSelector(this.hash));
                if ((u.hasClass("ui-tabs-selected") && !f.collapsible) || u.hasClass("ui-state-disabled") || u.hasClass("ui-state-processing") || r._trigger("select", null, r._ui(this, s[0])) === false) {
                    this.blur();
                    return false
                }
                f.selected = r.anchors.index(this);
                r.abort();
                if (f.collapsible) {
                    if (u.hasClass("ui-tabs-selected")) {
                        f.selected = -1;
                        if (f.cookie) {
                            r._cookie(f.selected, f.cookie)
                        }
                        r.element.queue("tabs", function () {
                            n(o, i)
                        }).dequeue("tabs");
                        this.blur();
                        return false
                    } else {
                        if (!i.length) {
                            if (f.cookie) {
                                r._cookie(f.selected, f.cookie)
                            }
                            r.element.queue("tabs", function () {
                                m(o, s)
                            });
                            r.load(r.anchors.index(this));
                            this.blur();
                            return false
                        }
                    }
                }
                if (f.cookie) {
                    r._cookie(f.selected, f.cookie)
                }
                if (s.length) {
                    if (i.length) {
                        r.element.queue("tabs", function () {
                            n(o, i)
                        })
                    }
                    r.element.queue("tabs", function () {
                        m(o, s)
                    });
                    r.load(r.anchors.index(this))
                } else {
                    throw "jQuery UI Tabs: Mismatching fragment identifier."
                }
                if (c.browser.msie) {
                    this.blur()
                }
            });
            this.anchors.bind("click.tabs", function () {
                return false
            })
        },
        destroy: function () {
            var d = this.options;
            this.abort();
            this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs");
            this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
            this.anchors.each(function () {
                var e = c.data(this, "href.tabs");
                if (e) {
                    this.href = e
                }
                var f = c(this).unbind(".tabs");
                c.each(["href", "load", "cache"], function (g, h) {
                    f.removeData(h + ".tabs")
                })
            });
            this.lis.unbind(".tabs").add(this.panels).each(function () {
                if (c.data(this, "destroy.tabs")) {
                    c(this).remove()
                } else {
                    c(this).removeClass(["ui-state-default", "ui-corner-top", "ui-tabs-selected", "ui-state-active", "ui-state-hover", "ui-state-focus", "ui-state-disabled", "ui-tabs-panel", "ui-widget-content", "ui-corner-bottom", "ui-tabs-hide"].join(" "))
                }
            });
            if (d.cookie) {
                this._cookie(null, d.cookie)
            }
            return this
        },
        add: function (g, f, e) {
            if (e === undefined) {
                e = this.anchors.length
            }
            var d = this,
                i = this.options,
                k = c(i.tabTemplate.replace(/#\{href\}/g, g).replace(/#\{label\}/g, f)),
                j = !g.indexOf("#") ? g.replace("#", "") : this._tabId(c("a", k)[0]);
            k.addClass("ui-state-default ui-corner-top").data("destroy.tabs", true);
            var h = c("#" + j);
            if (!h.length) {
                h = c(i.panelTemplate).attr("id", j).data("destroy.tabs", true)
            }
            h.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");
            if (e >= this.lis.length) {
                k.appendTo(this.list);
                h.appendTo(this.list[0].parentNode)
            } else {
                k.insertBefore(this.lis[e]);
                h.insertBefore(this.panels[e])
            }
            i.disabled = c.map(i.disabled, function (m, l) {
                return m >= e ? ++m : m
            });
            this._tabify();
            if (this.anchors.length == 1) {
                i.selected = 0;
                k.addClass("ui-tabs-selected ui-state-active");
                h.removeClass("ui-tabs-hide");
                this.element.queue("tabs", function () {
                    d._trigger("show", null, d._ui(d.anchors[0], d.panels[0]))
                });
                this.load(0)
            }
            this._trigger("add", null, this._ui(this.anchors[e], this.panels[e]));
            return this
        },
        remove: function (d) {
            var f = this.options,
                g = this.lis.eq(d).remove(),
                e = this.panels.eq(d).remove();
            if (g.hasClass("ui-tabs-selected") && this.anchors.length > 1) {
                this.select(d + (d + 1 < this.anchors.length ? 1 : -1))
            }
            f.disabled = c.map(c.grep(f.disabled, function (j, h) {
                return j != d
            }), function (j, h) {
                return j >= d ? --j : j
            });
            this._tabify();
            this._trigger("remove", null, this._ui(g.find("a")[0], e[0]));
            return this
        },
        enable: function (d) {
            var e = this.options;
            if (c.inArray(d, e.disabled) == -1) {
                return
            }
            this.lis.eq(d).removeClass("ui-state-disabled");
            e.disabled = c.grep(e.disabled, function (g, f) {
                return g != d
            });
            this._trigger("enable", null, this._ui(this.anchors[d], this.panels[d]));
            return this
        },
        disable: function (e) {
            var d = this,
                f = this.options;
            if (e != f.selected) {
                this.lis.eq(e).addClass("ui-state-disabled");
                f.disabled.push(e);
                f.disabled.sort();
                this._trigger("disable", null, this._ui(this.anchors[e], this.panels[e]))
            }
            return this
        },
        select: function (d) {
            if (typeof d == "string") {
                d = this.anchors.index(this.anchors.filter("[href$=" + d + "]"))
            } else {
                if (d === null) {
                    d = -1
                }
            }
            if (d == -1 && this.options.collapsible) {
                d = this.options.selected
            }
            this.anchors.eq(d).trigger(this.options.event + ".tabs");
            return this
        },
        load: function (g) {
            var e = this,
                i = this.options,
                d = this.anchors.eq(g)[0],
                f = c.data(d, "load.tabs");
            this.abort();
            if (!f || this.element.queue("tabs").length !== 0 && c.data(d, "cache.tabs")) {
                this.element.dequeue("tabs");
                return
            }
            this.lis.eq(g).addClass("ui-state-processing");
            if (i.spinner) {
                var h = c("span", d);
                h.data("label.tabs", h.html()).html(i.spinner)
            }
            this.xhr = c.ajax(c.extend({}, i.ajaxOptions, {
                url: f,
                success: function (k, j) {
                    c(e._sanitizeSelector(d.hash)).html(k);
                    e._cleanup();
                    if (i.cache) {
                        c.data(d, "cache.tabs", true)
                    }
                    e._trigger("load", null, e._ui(e.anchors[g], e.panels[g]));
                    try {
                        i.ajaxOptions.success(k, j)
                    } catch (l) {}
                },
                error: function (l, j, k) {
                    e._cleanup();
                    e._trigger("load", null, e._ui(e.anchors[g], e.panels[g]));
                    try {
                        i.ajaxOptions.error(l, j, g, d)
                    } catch (k) {}
                }
            }));
            e.element.dequeue("tabs");
            return this
        },
        abort: function () {
            this.element.queue([]);
            this.panels.stop(false, true);
            this.element.queue("tabs", this.element.queue("tabs").splice(-2, 2));
            if (this.xhr) {
                this.xhr.abort();
                delete this.xhr
            }
            this._cleanup();
            return this
        },
        url: function (e, d) {
            this.anchors.eq(e).removeData("cache.tabs").data("load.tabs", d);
            return this
        },
        length: function () {
            return this.anchors.length
        }
    });
    c.extend(c.ui.tabs, {
        version: "1.8"
    });
    c.extend(c.ui.tabs.prototype, {
        rotation: null,
        rotate: function (f, h) {
            var d = this,
                i = this.options;
            var e = d._rotate || (d._rotate = function (j) {
                clearTimeout(d.rotation);
                d.rotation = setTimeout(function () {
                    var k = i.selected;
                    d.select(++k < d.anchors.length ? k : 0)
                }, f);
                if (j) {
                    j.stopPropagation()
                }
            });
            var g = d._unrotate || (d._unrotate = !h ?
            function (j) {
                if (j.clientX) {
                    d.rotate(null)
                }
            } : function (j) {
                t = i.selected;
                e()
            });
            if (f) {
                this.element.bind("tabsshow", e);
                this.anchors.bind(i.event + ".tabs", g);
                e()
            } else {
                clearTimeout(d.rotation);
                this.element.unbind("tabsshow", e);
                this.anchors.unbind(i.event + ".tabs", g);
                delete this._rotate;
                delete this._unrotate
            }
            return this
        }
    })
})(jQuery);
(function ($) {
    if (!document.defaultView || !document.defaultView.getComputedStyle) {
        var oldCurCSS = jQuery.curCSS;
        jQuery.curCSS = function (elem, name, force) {
            if (name === 'background-position') {
                name = 'backgroundPosition';
            }
            if (name !== 'backgroundPosition' || !elem.currentStyle || elem.currentStyle[name]) {
                return oldCurCSS.apply(this, arguments);
            }
            var style = elem.style;
            if (!force && style && style[name]) {
                return style[name];
            }
            return oldCurCSS(elem, 'backgroundPositionX', force) + ' ' + oldCurCSS(elem, 'backgroundPositionY', force);
        };
    }
    var oldAnim = $.fn.animate;
    $.fn.animate = function (prop) {
        if ('background-position' in prop) {
            prop.backgroundPosition = prop['background-position'];
            delete prop['background-position'];
        }
        if ('backgroundPosition' in prop) {
            prop.backgroundPosition = '(' + prop.backgroundPosition;
        }
        return oldAnim.apply(this, arguments);
    };

    function toArray(strg) {
        strg = strg.replace(/left|top/g, '0px');
        strg = strg.replace(/right|bottom/g, '100%');
        strg = strg.replace(/([0-9\.]+)(\s|\)|$)/g, "$1px$2");
        var res = strg.match(/(-?[0-9\.]+)(px|\%|em|pt)\s(-?[0-9\.]+)(px|\%|em|pt)/);
        return [parseFloat(res[1], 10), res[2], parseFloat(res[3], 10), res[4]];
    }
    $.fx.step.backgroundPosition = function (fx) {
        if (!fx.bgPosReady) {
            var start = $.curCSS(fx.elem, 'backgroundPosition');
            if (!start) {
                start = '0px 0px';
            }
            start = toArray(start);
            fx.start = [start[0], start[2]];
            var end = toArray(fx.options.curAnim.backgroundPosition);
            fx.end = [end[0], end[2]];
            fx.unit = [end[1], end[3]];
            fx.bgPosReady = true;
        }
        var nowPosX = [];
        nowPosX[0] = ((fx.end[0] - fx.start[0]) * fx.pos) + fx.start[0] + fx.unit[0];
        nowPosX[1] = ((fx.end[1] - fx.start[1]) * fx.pos) + fx.start[1] + fx.unit[1];
        fx.elem.style.backgroundPosition = nowPosX[0] + ' ' + nowPosX[1];
    };
})(jQuery);
(function ($) {
    var keyString = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var uTF8Encode = function (string) {
            string = string.replace(/\x0d\x0a/g, "\x0a");
            var output = "";
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    output += String.fromCharCode(c);
                } else if ((c > 127) && (c < 2048)) {
                    output += String.fromCharCode((c >> 6) | 192);
                    output += String.fromCharCode((c & 63) | 128);
                } else {
                    output += String.fromCharCode((c >> 12) | 224);
                    output += String.fromCharCode(((c >> 6) & 63) | 128);
                    output += String.fromCharCode((c & 63) | 128);
                }
            }
            return output;
        };
    var uTF8Decode = function (input) {
            var string = "";
            var i = 0;
            var c = c1 = c2 = 0;
            while (i < input.length) {
                c = input.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if ((c > 191) && (c < 224)) {
                    c2 = input.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = input.charCodeAt(i + 1);
                    c3 = input.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }
            return string;
        }
    $.extend({
        base64Encode: function (input) {
            var output = "";
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            input = uTF8Encode(input);
            while (i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
                output = output + keyString.charAt(enc1) + keyString.charAt(enc2) + keyString.charAt(enc3) + keyString.charAt(enc4);
            }
            return output;
        },
        base64Decode: function (input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            while (i < input.length) {
                enc1 = keyString.indexOf(input.charAt(i++));
                enc2 = keyString.indexOf(input.charAt(i++));
                enc3 = keyString.indexOf(input.charAt(i++));
                enc4 = keyString.indexOf(input.charAt(i++));
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
                output = output + String.fromCharCode(chr1);
                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }
            }
            output = uTF8Decode(output);
            return output;
        }
    });
})(jQuery);
(function ($) {
    var flashMinVersion = [8, 0, 0];
    var flashMaxVersion = [9, 999, 999];
    var flashDetectedVersion = [0, 0, 0];
    var swfpath;
    var debugging;
    var flashdetect = function (minVersion, maxVersion) {
            var d = null;
            var minVersionOk = false;
            var maxVersionOk = false;
            if (typeof navigator.plugins != "undefined" && typeof navigator.plugins["Shockwave Flash"] == "object") {
                d = navigator.plugins["Shockwave Flash"].description;
                if (d) {
                    d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                    flashDetectedVersion[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10);
                    flashDetectedVersion[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                    if (/r/.test(d)) {
                        flashDetectedVersion[2] = parseInt(d.replace(/^.*r(.*)$/, "$1"), 10);
                    } else {
                        flashDetectedVersion[2] = 0;
                    }
                    if (flashDetectedVersion[0] > minVersion[0] || (flashDetectedVersion[0] == minVersion[0] && flashDetectedVersion[1] > minVersion[1]) || (flashDetectedVersion[0] == minVersion[0] && flashDetectedVersion[1] == minVersion[1] && flashDetectedVersion[2] >= minVersion[2])) {
                        minVersionOk = true;
                    }
                    if (flashDetectedVersion[0] < maxVersion[0] || (flashDetectedVersion[0] == maxVersion[0] && flashDetectedVersion[1] < maxVersion[1]) || (flashDetectedVersion[0] == maxVersion[0] && flashDetectedVersion[1] == maxVersion[1] && flashDetectedVersion[2] <= maxVersion[2])) {
                        maxVersionOk = true;
                    }
                    if (minVersionOk && maxVersionOk) {
                        return true;
                    }
                    return false;
                }
            }
            return false;
        };
    var iecopydetect = function () {
            if (typeof window.clipboardData != "undefined") {
                return true;
            }
        };
    var debug = function (string) {
            if (debugging && typeof console != "undefined" && typeof console.log == "function") {
                console.log(string);
            }
        };
    var swfready = function () {
            if ($.clipboardReady.done) {
                return false;
            }
            if (typeof $.clipboardReady.counter == 'undefined') {
                $.clipboardReady.counter = 0;
            }
            $.clipboardReady.counter++;
            if ($.clipboardReady.counter > 599) {
                clearInterval($.clipboardReady.timer);
                dodebug("Waited " + $.clipboardReady.counter / 10 + " seconds for Flash object to load, terminating.");
                return false;
            }
            if (($.clipboardReady.counter % 100) == 0) {
                dodebug("Waited " + $.clipboardReady.counter / 10 + " seconds for Flash object to load so far...");
            }
            var swf = $("#jquery_clipboard_swf:first");
            var swfdom = $(swf).get(0);
            if (typeof swfdom.jqueryClipboardCopy == "function" && swfdom.jqueryClipboardAvailable) {
                clearInterval($.clipboardReady.timer);
                $.clipboardReady.timer = null;
                $.clipboard.method = 'flash';
                for (var i = 0; i < $.clipboardReady.ready.length; i++) {
                    $.clipboardReady.ready[i]();
                }
                $.clipboardReady.ready = null;
                $.clipboardReady.done = true;
                dodebug("jQuery.clipboard: OK. Initialized and ready to copy using Flash method.");
            }
        };
    $.clipboardReady = function (f, options) {
        options = jQuery.extend({
            swfpath: "/flash/utils/jquery.clipboard.swf",
            debug: true
        }, options);
        swfpath = options.swfpath;
        debugging = options.debug;
        if (iecopydetect()) {
            $.clipboard.method = 'ie';
            dodebug("jQuery.clipboard: OK. Initialized and ready to copy using native IE method.");
            return f();
        }
        if ($.clipboardReady.done) {
            return f();
        }
        if ($.clipboardReady.timer) {
            $.clipboardReady.ready.push(f);
        } else {
            if (flashdetect(flashMinVersion, flashMaxVersion)) {
                $("#jquery_clipboard_swf").remove();
                $("#jquery_clipboard_div").remove();
                var div;
                div = $("<div/>").attr("id", "jquery_clipboard_div").css("width", "0").css("height", "0").appendTo("body").html("");
                var swf;
                swf = $('<embed id="jquery_clipboard_swf" name="jquery_clipboard_swf" src="' + swfpath + '" type="application/x-shockwave-flash"></embed>');
                $(swf).css("width", "0").css("height", "0").appendTo(div);
                $.clipboardReady.ready = [f];
                $.clipboardReady.timer = setInterval(swfready, 100);
                dodebug("jQuery.clipboard: INFO. Waiting for Flash object to become ready. Detected Flash version: " + flashDetectedVersion[0] + "." + flashDetectedVersion[1] + "." + flashDetectedVersion[2]);
            } else if (flashDetectedVersion[0] === 0) {
                dodebug("jQuery.clipboard: ERROR. Flash plugin not detected.");
                return false;
            } else {
                dodebug("jQuery.clipboard: ERROR. Flash version not supported. Minimum: " + flashMinVersion[0] + "." + flashMinVersion[1] + "." + flashMinVersion[2] + " Maximum: " + flashMaxVersion[0] + "." + flashMaxVersion[1] + "." + flashMaxVersion[2] + " Detected: " + flashDetectedVersion[0] + "." + flashDetectedVersion[1] + "." + flashDetectedVersion[2]);
                return false;
            }
        }
    };
    $.clipboard = function (text) {
        if (arguments.length < 1 || typeof text != "string") {
            dodebug("jQuery.clipboard: ERROR. Nothing to copy. You must specify a string as the first parameter.");
            return false;
        }
        if ($.clipboard.method == 'ie') {
            try {
                window.clipboardData.setData("Text", text);
                dodebug("jQuery.clipboard: OK. Copied " + text.length + " bytes to clipboard using native IE method.");
                return true;
            } catch (e) {
                dodebug("jQuery.clipboard: ERROR. Tried to copy using native IE method but an unknown error occurred.");
                return false;
            }
        }
        if ($.clipboard.method == 'flash') {
            var swf = $("#jquery_clipboard_swf:first");
            var swfdom = $(swf).get(0);
            if (swfdom.jqueryClipboardCopy(text)) {
                dodebug("jQuery.clipboard: OK. Copied " + text.length + " bytes to clipboard using Flash method.");
                return true;
            } else {
                dodebug("jQuery.clipboard: ERROR. Tried to copy using Flash method but an unknown error occurred.");
                return false;
            }
        }
        dodebug("jQuery.clipboard: ERROR. You must use $.clipboardReady() in conjunction with $.clipboard().");
        return false;
    };
})(jQuery);
(function ($) {
    function SVGManager() {
        this._settings = [];
        this._extensions = [];
        this.regional = [];
        this.regional[''] = {
            errorLoadingText: 'Error loading',
            notSupportedText: 'This browser does not support SVG'
        };
        this.local = this.regional[''];
        this._uuid = new Date().getTime();
        this._renesis = detectActiveX('RenesisX.RenesisCtrl')
    }
    function detectActiveX(a) {
        try {
            return !!(window.ActiveXObject && new ActiveXObject(a))
        } catch (e) {
            return false
        }
    }
    var p = 'svgwrapper';
    $.extend(SVGManager.prototype, {
        markerClassName: 'hasSVG',
        svgNS: 'http://www.w3.org/2000/svg',
        xlinkNS: 'http://www.w3.org/1999/xlink',
        _wrapperClass: SVGWrapper,
        _attrNames: {
            class_: 'class',
            in_: 'in',
            alignmentBaseline: 'alignment-baseline',
            baselineShift: 'baseline-shift',
            clipPath: 'clip-path',
            clipRule: 'clip-rule',
            colorInterpolation: 'color-interpolation',
            colorInterpolationFilters: 'color-interpolation-filters',
            colorRendering: 'color-rendering',
            dominantBaseline: 'dominant-baseline',
            enableBackground: 'enable-background',
            fillOpacity: 'fill-opacity',
            fillRule: 'fill-rule',
            floodColor: 'flood-color',
            floodOpacity: 'flood-opacity',
            fontFamily: 'font-family',
            fontSize: 'font-size',
            fontSizeAdjust: 'font-size-adjust',
            fontStretch: 'font-stretch',
            fontStyle: 'font-style',
            fontVariant: 'font-variant',
            fontWeight: 'font-weight',
            glyphOrientationHorizontal: 'glyph-orientation-horizontal',
            glyphOrientationVertical: 'glyph-orientation-vertical',
            horizAdvX: 'horiz-adv-x',
            horizOriginX: 'horiz-origin-x',
            imageRendering: 'image-rendering',
            letterSpacing: 'letter-spacing',
            lightingColor: 'lighting-color',
            markerEnd: 'marker-end',
            markerMid: 'marker-mid',
            markerStart: 'marker-start',
            stopColor: 'stop-color',
            stopOpacity: 'stop-opacity',
            strikethroughPosition: 'strikethrough-position',
            strikethroughThickness: 'strikethrough-thickness',
            strokeDashArray: 'stroke-dasharray',
            strokeDashOffset: 'stroke-dashoffset',
            strokeLineCap: 'stroke-linecap',
            strokeLineJoin: 'stroke-linejoin',
            strokeMiterLimit: 'stroke-miterlimit',
            strokeOpacity: 'stroke-opacity',
            strokeWidth: 'stroke-width',
            textAnchor: 'text-anchor',
            textDecoration: 'text-decoration',
            textRendering: 'text-rendering',
            underlinePosition: 'underline-position',
            underlineThickness: 'underline-thickness',
            vertAdvY: 'vert-adv-y',
            vertOriginY: 'vert-origin-y',
            wordSpacing: 'word-spacing',
            writingMode: 'writing-mode'
        },
        _attachSVG: function (a, b) {
            var c = (a.namespaceURI == this.svgNS ? a : null);
            var a = (c ? null : a);
            if ($(a || c).hasClass(this.markerClassName)) {
                return
            }
            if (typeof b == 'string') {
                b = {
                    loadURL: b
                }
            } else if (typeof b == 'function') {
                b = {
                    onLoad: b
                }
            }
            $(a || c).addClass(this.markerClassName);
            try {
                if (!c) {
                    c = document.createElementNS(this.svgNS, 'svg');
                    c.setAttribute('version', '1.1');
                    c.setAttribute('width', a.clientWidth);
                    c.setAttribute('height', a.clientHeight);
                    a.appendChild(c)
                }
                this._afterLoad(a, c, b || {})
            } catch (e) {
                if ($.browser.msie) {
                    if (!a.id) {
                        a.id = 'svg' + (this._uuid++)
                    }
                    this._settings[a.id] = b;
                    a.innerHTML = '<embed type="image/svg+xml" width="100%" ' + 'height="100%" src="' + (b.initPath || '') + 'blank.svg"/>'
                } else {
                    a.innerHTML = '<p class="svg_error">' + this.local.notSupportedText + '</p>'
                }
            }
        },
        _registerSVG: function () {
            for (var i = 0; i < document.embeds.length; i++) {
                var a = document.embeds[i].parentNode;
                if (!$(a).hasClass($.svg.markerClassName) || $.data(a, p)) {
                    continue
                }
                var b = null;
                try {
                    b = document.embeds[i].getSVGDocument()
                } catch (e) {
                    setTimeout($.svg._registerSVG, 250);
                    return
                }
                b = (b ? b.documentElement : null);
                if (b) {
                    $.svg._afterLoad(a, b)
                }
            }
        },
        _afterLoad: function (a, b, c) {
            var c = c || this._settings[a.id];
            this._settings[a ? a.id : ''] = null;
            var d = new this._wrapperClass(b, a);
            $.data(a || b, p, d);
            try {
                if (c.loadURL) {
                    d.load(c.loadURL, c)
                }
                if (c.settings) {
                    d.configure(c.settings)
                }
                if (c.onLoad && !c.loadURL) {
                    c.onLoad.apply(a || b, [d])
                }
            } catch (e) {
                alert(e)
            }
        },
        _getSVG: function (a) {
            a = (typeof a == 'string' ? $(a)[0] : (a.jquery ? a[0] : a));
            return $.data(a, p)
        },
        _destroySVG: function (a) {
            var b = $(a);
            if (!b.hasClass(this.markerClassName)) {
                return
            }
            b.removeClass(this.markerClassName);
            if (a.namespaceURI != this.svgNS) {
                b.empty()
            }
            $.removeData(a, p)
        },
        addExtension: function (a, b) {
            this._extensions.push([a, b])
        }
    });

    function SVGWrapper(a, b) {
        this._svg = a;
        this._container = b;
        for (var i = 0; i < $.svg._extensions.length; i++) {
            var c = $.svg._extensions[i];
            this[c[0]] = new c[1](this)
        }
    }
    $.extend(SVGWrapper.prototype, {
        _width: function () {
            return (this._container ? this._container.clientWidth : this._svg.width)
        },
        _height: function () {
            return (this._container ? this._container.clientHeight : this._svg.height)
        },
        root: function () {
            return this._svg
        },
        configure: function (a, b) {
            if (b) {
                for (var i = this._svg.attributes.length - 1; i >= 0; i--) {

                    var c = this._svg.attributes.item(i);
                    if (!(c.nodeName == 'onload' || c.nodeName == 'version' || c.nodeName.substring(0, 5) == 'xmlns')) {
                        this._svg.attributes.removeNamedItem(c.nodeName)
                    }
                }
            }
            for (var d in a) {
                this._svg.setAttribute(d, a[d])
            }
            return this
        },
        getElementById: function (a) {
            return this._svg.ownerDocument.getElementById(a)
        },
        change: function (a, b) {
            if (a) {
                for (var c in b) {
                    if (b[c] == null) {
                        a.removeAttribute(c)
                    } else {
                        a.setAttribute(c, b[c])
                    }
                }
            }
            return this
        },
        _args: function (b, c, d) {
            c.splice(0, 0, 'parent');
            c.splice(c.length, 0, 'settings');
            var e = {};
            var f = 0;
            if (b[0] != null && b[0].jquery) {
                b[0] = b[0][0]
            }
            if (b[0] != null && !(typeof b[0] == 'object' && b[0].nodeName)) {
                e['parent'] = null;
                f = 1
            }
            for (var i = 0; i < b.length; i++) {
                e[c[i + f]] = b[i]
            }
            if (d) {
                $.each(d, function (i, a) {
                    if (typeof e[a] == 'object') {
                        e.settings = e[a];
                        e[a] = null
                    }
                })
            }
            return e
        },
        title: function (a, b, c) {
            var d = this._args(arguments, ['text']);
            var e = this._makeNode(d.parent, 'title', d.settings || {});
            e.appendChild(this._svg.ownerDocument.createTextNode(d.text));
            return e
        },
        describe: function (a, b, c) {
            var d = this._args(arguments, ['text']);
            var e = this._makeNode(d.parent, 'desc', d.settings || {});
            e.appendChild(this._svg.ownerDocument.createTextNode(d.text));
            return e
        },
        defs: function (a, b, c) {
            var d = this._args(arguments, ['id'], ['id']);
            return this._makeNode(d.parent, 'defs', $.extend((d.id ? {
                id: d.id
            } : {}), d.settings || {}))
        },
        symbol: function (a, b, c, d, e, f, g) {
            var h = this._args(arguments, ['id', 'x1', 'y1', 'width', 'height']);
            return this._makeNode(h.parent, 'symbol', $.extend({
                id: h.id,
                viewBox: h.x1 + ' ' + h.y1 + ' ' + h.width + ' ' + h.height
            }, h.settings || {}))
        },
        marker: function (a, b, c, d, e, f, g, h) {
            var i = this._args(arguments, ['id', 'refX', 'refY', 'mWidth', 'mHeight', 'orient'], ['orient']);
            return this._makeNode(i.parent, 'marker', $.extend({
                id: i.id,
                refX: i.refX,
                refY: i.refY,
                markerWidth: i.mWidth,
                markerHeight: i.mHeight,
                orient: i.orient || 'auto'
            }, i.settings || {}))
        },
        style: function (a, b, c) {
            var d = this._args(arguments, ['styles']);
            var e = this._makeNode(d.parent, 'style', $.extend({
                type: 'text/css'
            }, d.settings || {}));
            e.appendChild(this._svg.ownerDocument.createTextNode(d.styles));
            if ($.browser.opera) {
                $('head').append('<style type="text/css">' + d.styles + '</style>')
            }
            return e
        },
        script: function (a, b, c, d) {
            var e = this._args(arguments, ['script', 'type'], ['type']);
            var f = this._makeNode(e.parent, 'script', $.extend({
                type: e.type || 'text/javascript'
            }, e.settings || {}));
            f.appendChild(this._svg.ownerDocument.createTextNode(this._escapeXML(e.script)));
            if (!$.browser.mozilla) {
                $.globalEval(e.script)
            }
            return f
        },
        linearGradient: function (a, b, c, d, e, f, g, h) {
            var i = this._args(arguments, ['id', 'stops', 'x1', 'y1', 'x2', 'y2'], ['x1']);
            var j = $.extend({
                id: i.id
            }, (i.x1 != null ? {
                x1: i.x1,
                y1: i.y1,
                x2: i.x2,
                y2: i.y2
            } : {}));
            return this._gradient(i.parent, 'linearGradient', $.extend(j, i.settings || {}), i.stops)
        },
        radialGradient: function (a, b, c, d, e, r, f, g, h) {
            var i = this._args(arguments, ['id', 'stops', 'cx', 'cy', 'r', 'fx', 'fy'], ['cx']);
            var j = $.extend({
                id: i.id
            }, (i.cx != null ? {
                cx: i.cx,
                cy: i.cy,
                r: i.r,
                fx: i.fx,
                fy: i.fy
            } : {}));
            return this._gradient(i.parent, 'radialGradient', $.extend(j, i.settings || {}), i.stops)
        },
        _gradient: function (a, b, c, d) {
            var e = this._makeNode(a, b, c);
            for (var i = 0; i < d.length; i++) {
                var f = d[i];
                this._makeNode(e, 'stop', $.extend({
                    offset: f[0],
                    stopColor: f[1]
                }, (f[2] != null ? {
                    stopOpacity: f[2]
                } : {})))
            }
            return e
        },
        pattern: function (a, b, x, y, c, d, e, f, g, h, i) {
            var j = this._args(arguments, ['id', 'x', 'y', 'width', 'height', 'vx', 'vy', 'vwidth', 'vheight'], ['vx']);
            var k = $.extend({
                id: j.id,
                x: j.x,
                y: j.y,
                width: j.width,
                height: j.height
            }, (j.vx != null ? {
                viewBox: j.vx + ' ' + j.vy + ' ' + j.vwidth + ' ' + j.vheight
            } : {}));
            return this._makeNode(j.parent, 'pattern', $.extend(k, j.settings || {}))
        },
        mask: function (a, b, x, y, c, d, e) {
            var f = this._args(arguments, ['id', 'x', 'y', 'width', 'height']);
            return this._makeNode(f.parent, 'mask', $.extend({
                id: f.id,
                x: f.x,
                y: f.y,
                width: f.width,
                height: f.height
            }, f.settings || {}))
        },
        createPath: function () {
            return new SVGPath()
        },
        createText: function () {
            return new SVGText()
        },
        svg: function (a, x, y, b, c, d, e, f, g, h) {
            var i = this._args(arguments, ['x', 'y', 'width', 'height', 'vx', 'vy', 'vwidth', 'vheight'], ['vx']);
            var j = $.extend({
                x: i.x,
                y: i.y,
                width: i.width,
                height: i.height
            }, (i.vx != null ? {
                viewBox: i.vx + ' ' + i.vy + ' ' + i.vwidth + ' ' + i.vheight
            } : {}));
            return this._makeNode(i.parent, 'svg', $.extend(j, i.settings || {}))
        },
        group: function (a, b, c) {
            var d = this._args(arguments, ['id'], ['id']);
            return this._makeNode(d.parent, 'g', $.extend({
                id: d.id
            }, d.settings || {}))
        },
        use: function (a, x, y, b, c, d, e) {
            var f = this._args(arguments, ['x', 'y', 'width', 'height', 'ref']);
            if (typeof f.x == 'string') {
                f.ref = f.x;
                f.settings = f.y;
                f.x = f.y = f.width = f.height = null
            }
            var g = this._makeNode(f.parent, 'use', $.extend({
                x: f.x,
                y: f.y,
                width: f.width,

                height: f.height
            }, f.settings || {}));
            g.setAttributeNS($.svg.xlinkNS, 'href', f.ref);
            return g
        },
        link: function (a, b, c) {
            var d = this._args(arguments, ['ref']);
            var e = this._makeNode(d.parent, 'a', d.settings);
            e.setAttributeNS($.svg.xlinkNS, 'href', d.ref);
            return e
        },
        image: function (a, x, y, b, c, d, e) {
            var f = this._args(arguments, ['x', 'y', 'width', 'height', 'ref']);
            var g = this._makeNode(f.parent, 'image', $.extend({
                x: f.x,
                y: f.y,
                width: f.width,
                height: f.height
            }, f.settings || {}));
            g.setAttributeNS($.svg.xlinkNS, 'href', f.ref);
            return g
        },
        path: function (a, b, c) {
            var d = this._args(arguments, ['path']);
            return this._makeNode(d.parent, 'path', $.extend({
                d: (d.path.path ? d.path.path() : d.path)
            }, d.settings || {}))
        },
        rect: function (a, x, y, b, c, d, e, f) {
            var g = this._args(arguments, ['x', 'y', 'width', 'height', 'rx', 'ry'], ['rx']);
            return this._makeNode(g.parent, 'rect', $.extend({
                x: g.x,
                y: g.y,
                width: g.width,
                height: g.height
            }, (g.rx ? {
                rx: g.rx,
                ry: g.ry
            } : {}), g.settings || {}))
        },
        circle: function (a, b, c, r, d) {
            var e = this._args(arguments, ['cx', 'cy', 'r']);
            return this._makeNode(e.parent, 'circle', $.extend({
                cx: e.cx,
                cy: e.cy,
                r: e.r
            }, e.settings || {}))
        },
        ellipse: function (a, b, c, d, e, f) {
            var g = this._args(arguments, ['cx', 'cy', 'rx', 'ry']);
            return this._makeNode(g.parent, 'ellipse', $.extend({
                cx: g.cx,
                cy: g.cy,
                rx: g.rx,
                ry: g.ry
            }, g.settings || {}))
        },
        line: function (a, b, c, d, e, f) {
            var g = this._args(arguments, ['x1', 'y1', 'x2', 'y2']);
            return this._makeNode(g.parent, 'line', $.extend({
                x1: g.x1,
                y1: g.y1,
                x2: g.x2,
                y2: g.y2
            }, g.settings || {}))
        },
        polyline: function (a, b, c) {
            var d = this._args(arguments, ['points']);
            return this._poly(d.parent, 'polyline', d.points, d.settings)
        },
        polygon: function (a, b, c) {
            var d = this._args(arguments, ['points']);
            return this._poly(d.parent, 'polygon', d.points, d.settings)
        },
        _poly: function (a, b, c, d) {
            var e = '';
            for (var i = 0; i < c.length; i++) {
                e += c[i].join() + ' '
            }
            return this._makeNode(a, b, $.extend({
                points: $.trim(e)
            }, d || {}))
        },
        text: function (a, x, y, b, c) {
            var d = this._args(arguments, ['x', 'y', 'value']);
            if (typeof d.x == 'string' && arguments.length < 4) {
                d.value = d.x;
                d.settings = d.y;
                d.x = d.y = null
            }
            return this._text(d.parent, 'text', d.value, $.extend({
                x: (d.x && isArray(d.x) ? d.x.join(' ') : d.x),
                y: (d.y && isArray(d.y) ? d.y.join(' ') : d.y)
            }, d.settings || {}))
        },
        textpath: function (a, b, c, d) {
            var e = this._args(arguments, ['path', 'value']);
            var f = this._text(e.parent, 'textPath', e.value, e.settings || {});
            f.setAttributeNS($.svg.xlinkNS, 'href', e.path);
            return f
        },
        _text: function (a, b, c, d) {
            var e = this._makeNode(a, b, d);
            if (typeof c == 'string') {
                e.appendChild(e.ownerDocument.createTextNode(c))
            } else {
                for (var i = 0; i < c._parts.length; i++) {
                    var f = c._parts[i];
                    if (f[0] == 'tspan') {
                        var g = this._makeNode(e, f[0], f[2]);
                        g.appendChild(e.ownerDocument.createTextNode(f[1]));
                        e.appendChild(g)
                    } else if (f[0] == 'tref') {
                        var g = this._makeNode(e, f[0], f[2]);
                        g.setAttributeNS($.svg.xlinkNS, 'href', f[1]);
                        e.appendChild(g)
                    } else if (f[0] == 'textpath') {
                        var h = $.extend({}, f[2]);
                        h.href = null;
                        var g = this._makeNode(e, f[0], h);
                        g.setAttributeNS($.svg.xlinkNS, 'href', f[2].href);
                        g.appendChild(e.ownerDocument.createTextNode(f[1]));
                        e.appendChild(g)
                    } else {
                        e.appendChild(e.ownerDocument.createTextNode(f[1]))
                    }
                }
            }
            return e
        },
        other: function (a, b, c) {
            var d = this._args(arguments, ['name']);
            return this._makeNode(d.parent, d.name, d.settings || {})
        },
        _makeNode: function (a, b, c) {
            a = a || this._svg;
            var d = this._svg.ownerDocument.createElementNS($.svg.svgNS, b);
            for (var b in c) {
                var e = c[b];
                if (e != null && e != null && (typeof e != 'string' || e != '')) {
                    d.setAttribute($.svg._attrNames[b] || b, e)
                }
            }
            a.appendChild(d);
            return d
        },
        add: function (b, c) {
            var d = this._args((arguments.length == 1 ? [null, b] : arguments), ['node']);
            var f = this;
            d.parent = d.parent || this._svg;
            try {
                if ($.svg._renesis) {
                    throw 'Force traversal';
                }
                d.parent.appendChild(d.node.cloneNode(true))
            } catch (e) {
                d.node = (d.node.jquery ? d.node : $(d.node));
                d.node.each(function () {
                    var a = f._cloneAsSVG(this);
                    if (a) {
                        d.parent.appendChild(a)
                    }
                })
            }
            return this
        },
        _cloneAsSVG: function (a) {
            var b = null;
            if (a.nodeType == 1) {
                b = this._svg.ownerDocument.createElementNS($.svg.svgNS, this._checkName(a.nodeName));
                for (var i = 0; i < a.attributes.length; i++) {
                    var c = a.attributes.item(i);
                    if (c.nodeName != 'xmlns' && c.nodeValue) {
                        if (c.prefix == 'xlink') {
                            b.setAttributeNS($.svg.xlinkNS, c.localName, c.nodeValue)
                        } else {
                            b.setAttribute(this._checkName(c.nodeName), c.nodeValue)
                        }
                    }
                }
                for (var i = 0; i < a.childNodes.length; i++) {
                    var d = this._cloneAsSVG(a.childNodes[i]);
                    if (d) {
                        b.appendChild(d)
                    }
                }
            } else if (a.nodeType == 3) {
                if ($.trim(a.nodeValue)) {
                    b = this._svg.ownerDocument.createTextNode(a.nodeValue)
                }
            } else if (a.nodeType == 4) {
                if ($.trim(a.nodeValue)) {
                    try {
                        b = this._svg.ownerDocument.createCDATASection(a.nodeValue)
                    } catch (e) {
                        b = this._svg.ownerDocument.createTextNode(a.nodeValue.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'))
                    }
                }
            }
            return b
        },
        _checkName: function (a) {
            a = (a.substring(0, 1) >= 'A' && a.substring(0, 1) <= 'Z' ? a.toLowerCase() : a);
            return (a.substring(0, 4) == 'svg:' ? a.substring(4) : a)
        },
        load: function (h, j) {
            j = (typeof j == 'boolean' ? {
                addTo: j
            } : (typeof j == 'function' ? {
                onLoad: j
            } : j || {}));
            if (!j.addTo) {
                this.clear(false)
            }
            var k = [this._svg.getAttribute('width'), this._svg.getAttribute('height')];
            var l = this;
            var m = function (a) {
                    a = $.svg.local.errorLoadingText + ': ' + a;
                    if (j.onLoad) {
                        j.onLoad.apply(l._container || l._svg, [l, a])
                    } else {
                        l.text(null, 10, 20, a)
                    }
                };
            var n = function (a) {
                    var b = new ActiveXObject('Microsoft.XMLDOM');
                    b.validateOnParse = false;
                    b.resolveExternals = false;
                    b.async = false;
                    b.loadXML(a);
                    if (b.parseError.errorCode != 0) {
                        m(b.parseError.reason);
                        return null
                    }
                    return b
                };
            var o = function (a) {
                    if (!a) {
                        return
                    }
                    if (a.documentElement.nodeName != 'svg') {
                        var b = a.getElementsByTagName('parsererror');
                        var c = (b.length ? b[0].getElementsByTagName('div') : []);
                        m(!b.length ? '???' : (c.length ? c[0] : b[0]).firstChild.nodeValue);
                        return
                    }
                    var d = {};
                    for (var i = 0; i < a.documentElement.attributes.length; i++) {
                        var f = a.documentElement.attributes.item(i);
                        if (!(f.nodeName == 'version' || f.nodeName.substring(0, 5) == 'xmlns')) {
                            d[f.nodeName] = f.nodeValue
                        }
                    }
                    l.configure(d, true);
                    var g = a.documentElement.childNodes;
                    for (var i = 0; i < g.length; i++) {
                        try {
                            if ($.svg._renesis) {
                                throw 'Force traversal';
                            }
                            l._svg.appendChild(g[i].cloneNode(true));
                            if (g[i].nodeName == 'script') {
                                $.globalEval(g[i].textContent)
                            }
                        } catch (e) {
                            l.add(null, g[i])
                        }
                    }
                    if (!j.changeSize) {
                        l.configure({
                            width: k[0],
                            height: k[1]
                        })
                    }
                    if (j.onLoad) {
                        j.onLoad.apply(l._container || l._svg, [l])
                    }
                };
            if (h.match('<svg')) {
                o($.browser.msie ? n(h) : new DOMParser().parseFromString(h, 'text/xml'))
            } else {
                $.ajax({
                    url: h,
                    dataType: ($.browser.msie ? 'text' : 'xml'),
                    success: function (a) {
                        o($.browser.msie ? n(a) : a)
                    },
                    error: function (a, b, c) {
                        m(b + (c ? ' ' + c.message : ''))
                    }
                })
            }
            return this
        },
        remove: function (a) {
            a = (a.jquery ? a[0] : a);
            a.parentNode.removeChild(a);
            return this
        },
        clear: function (a) {
            if (a) {
                this.configure({}, true)
            }
            while (this._svg.firstChild) {
                this._svg.removeChild(this._svg.firstChild)
            }
            return this
        },
        toSVG: function (a) {
            a = a || this._svg;
            return (typeof XMLSerializer == 'undefined' ? this._toSVG(a) : new XMLSerializer().serializeToString(a))
        },
        _toSVG: function (a) {
            var b = '';
            if (!a) {
                return b
            }
            if (a.nodeType == 3) {
                b = a.nodeValue
            } else if (a.nodeType == 4) {
                b = '<![CDATA[' + a.nodeValue + ']]>'
            } else {
                b = '<' + a.nodeName;
                if (a.attributes) {
                    for (var i = 0; i < a.attributes.length; i++) {
                        var c = a.attributes.item(i);
                        if (!($.trim(c.nodeValue) == '' || c.nodeValue.match(/^\[object/) || c.nodeValue.match(/^function/))) {
                            b += ' ' + (c.namespaceURI == $.svg.xlinkNS ? 'xlink:' : '') + c.nodeName + '="' + c.nodeValue + '"'
                        }
                    }
                }
                if (a.firstChild) {
                    b += '>';
                    var d = a.firstChild;
                    while (d) {
                        b += this._toSVG(d);
                        d = d.nextSibling
                    }
                    b += '</' + a.nodeName + '>'
                } else {
                    b += '/>'
                }
            }
            return b
        },
        _escapeXML: function (a) {
            a = a.replace(/&/g, '&amp;');
            a = a.replace(/</g, '&lt;');
            a = a.replace(/>/g, '&gt;');
            return a
        }
    });

    function SVGPath() {
        this._path = ''
    }
    $.extend(SVGPath.prototype, {
        reset: function () {
            this._path = '';
            return this
        },
        move: function (x, y, a) {
            a = (isArray(x) ? y : a);
            return this._coords((a ? 'm' : 'M'), x, y)
        },
        line: function (x, y, a) {
            a = (isArray(x) ? y : a);
            return this._coords((a ? 'l' : 'L'), x, y)
        },
        horiz: function (x, a) {
            this._path += (a ? 'h' : 'H') + (isArray(x) ? x.join(' ') : x);
            return this
        },
        vert: function (y, a) {
            this._path += (a ? 'v' : 'V') + (isArray(y) ? y.join(' ') : y);
            return this
        },
        curveC: function (a, b, c, d, x, y, e) {
            e = (isArray(a) ? b : e);
            return this._coords((e ? 'c' : 'C'), a, b, c, d, x, y)
        },
        smoothC: function (a, b, x, y, c) {
            c = (isArray(a) ? b : c);
            return this._coords((c ? 's' : 'S'), a, b, x, y)
        },
        curveQ: function (a, b, x, y, c) {
            c = (isArray(a) ? b : c);
            return this._coords((c ? 'q' : 'Q'), a, b, x, y)
        },
        smoothQ: function (x, y, a) {
            a = (isArray(x) ? y : a);
            return this._coords((a ? 't' : 'T'), x, y)
        },
        _coords: function (a, b, c, d, e, f, g) {
            if (isArray(b)) {
                for (var i = 0; i < b.length; i++) {
                    var h = b[i];
                    this._path += (i == 0 ? a : ' ') + h[0] + ',' + h[1] + (h.length < 4 ? '' : ' ' + h[2] + ',' + h[3] + (h.length < 6 ? '' : ' ' + h[4] + ',' + h[5]))
                }
            } else {
                this._path += a + b + ',' + c + (d == null ? '' : ' ' + d + ',' + e + (f == null ? '' : ' ' + f + ',' + g))
            }
            return this
        },
        arc: function (a, b, c, d, e, x, y, f) {
            f = (isArray(a) ? b : f);
            this._path += (f ? 'a' : 'A');
            if (isArray(a)) {
                for (var i = 0; i < a.length; i++) {
                    var g = a[i];
                    this._path += (i == 0 ? '' : ' ') + g[0] + ',' + g[1] + ' ' + g[2] + ' ' + (g[3] ? '1' : '0') + ',' + (g[4] ? '1' : '0') + ' ' + g[5] + ',' + g[6]
                }
            } else {
                this._path += a + ',' + b + ' ' + c + ' ' + (d ? '1' : '0') + ',' + (e ? '1' : '0') + ' ' + x + ',' + y
            }
            return this
        },
        close: function () {
            this._path += 'z';
            return this
        },
        path: function () {
            return this._path
        }
    });
    SVGPath.prototype.moveTo = SVGPath.prototype.move;
    SVGPath.prototype.lineTo = SVGPath.prototype.line;
    SVGPath.prototype.horizTo = SVGPath.prototype.horiz;
    SVGPath.prototype.vertTo = SVGPath.prototype.vert;
    SVGPath.prototype.curveCTo = SVGPath.prototype.curveC;
    SVGPath.prototype.smoothCTo = SVGPath.prototype.smoothC;
    SVGPath.prototype.curveQTo = SVGPath.prototype.curveQ;
    SVGPath.prototype.smoothQTo = SVGPath.prototype.smoothQ;
    SVGPath.prototype.arcTo = SVGPath.prototype.arc;

    function SVGText() {
        this._parts = []
    }
    $.extend(SVGText.prototype, {
        reset: function () {
            this._parts = [];
            return this
        },
        string: function (a) {
            this._parts[this._parts.length] = ['text', a];
            return this
        },
        span: function (a, b) {
            this._parts[this._parts.length] = ['tspan', a, b];
            return this
        },
        ref: function (a, b) {
            this._parts[this._parts.length] = ['tref', a, b];
            return this
        },
        path: function (a, b, c) {
            this._parts[this._parts.length] = ['textpath', b, $.extend({
                href: a
            }, c || {})];
            return this
        }
    });
    $.fn.svg = function (a) {
        var b = Array.prototype.slice.call(arguments, 1);
        if (typeof a == 'string' && a == 'get') {
            return $.svg['_' + a + 'SVG'].apply($.svg, [this[0]].concat(b))
        }
        return this.each(function () {
            if (typeof a == 'string') {
                $.svg['_' + a + 'SVG'].apply($.svg, [this].concat(b))
            } else {
                $.svg._attachSVG(this, a || {})
            }
        })
    };

    function isArray(a) {
        return (a && a.constructor == Array)
    }
    $.svg = new SVGManager()
})(jQuery);
(function ($) {
    $.fn.addClass = function (e) {
        return function (d) {
            d = d || '';
            return this.each(function () {
                if (isSVGElem(this)) {
                    var c = this;
                    $.each(d.split(/\s+/), function (i, a) {
                        var b = (c.className ? c.className.baseVal : c.getAttribute('class'));
                        if ($.inArray(a, b.split(/\s+/)) == -1) {
                            b += (b ? ' ' : '') + a;
                            (c.className ? c.className.baseVal = b : c.setAttribute('class', b))
                        }
                    })
                } else {
                    e.apply($(this), [d])
                }
            })
        }
    }($.fn.addClass);
    $.fn.removeClass = function (e) {
        return function (d) {
            d = d || '';
            return this.each(function () {
                if (isSVGElem(this)) {
                    var c = this;
                    $.each(d.split(/\s+/), function (i, a) {
                        var b = (c.className ? c.className.baseVal : c.getAttribute('class'));
                        b = $.grep(b.split(/\s+/), function (n, i) {
                            return n != a
                        }).join(' ');
                        (c.className ? c.className.baseVal = b : c.setAttribute('class', b))
                    })
                } else {
                    e.apply($(this), [d])
                }
            })
        }
    }($.fn.removeClass);
    $.fn.toggleClass = function (c) {
        return function (a, b) {
            return this.each(function () {
                if (isSVGElem(this)) {
                    if (typeof b !== 'boolean') {
                        b = !$(this).hasClass(a)
                    }
                    $(this)[(b ? 'add' : 'remove') + 'Class'](a)
                } else {
                    c.apply($(this), [a, b])
                }
            })
        }
    }($.fn.toggleClass);
    $.fn.hasClass = function (d) {
        return function (b) {
            b = b || '';
            var c = false;
            this.each(function () {
                if (isSVGElem(this)) {
                    var a = (this.className ? this.className.baseVal : this.getAttribute('class')).split(/\s+/);
                    c = ($.inArray(b, a) > -1)
                } else {
                    c = (d.apply($(this), [b]))
                }
                return !c
            });
            return c
        }
    }($.fn.hasClass);
    $.fn.attr = function (h) {
        return function (b, c, d) {
            if (typeof b === 'string' && c === undefined) {
                var e = h.apply(this, [b, c, d]);
                if (e && e.baseVal && e.baseVal.numberOfItems != null) {
                    c = '';
                    e = e.baseVal;
                    for (var i = 0; i < e.numberOfItems; i++) {
                        var f = e.getItem(i);
                        switch (f.type) {
                        case 1:
                            c += ' matrix(' + f.matrix.a + ',' + f.matrix.b + ',' + f.matrix.c + ',' + f.matrix.d + ',' + f.matrix.e + ',' + f.matrix.f + ')';
                            break;
                        case 2:
                            c += ' translate(' + f.matrix.e + ',' + f.matrix.f + ')';
                            break;
                        case 3:
                            c += ' scale(' + f.matrix.a + ',' + f.matrix.d + ')';
                            break;
                        case 4:
                            c += ' rotate(' + f.angle + ')';
                            break;
                        case 5:
                            c += ' skewX(' + f.angle + ')';
                            break;
                        case 6:
                            c += ' skewY(' + f.angle + ')';
                            break
                        }
                    }
                    e = c.substring(1)
                }
                return (e && e.baseVal ? e.baseVal.valueAsString : e)
            }
            var g = b;
            if (typeof b === 'string') {
                g = {};
                g[b] = c
            }
            return this.each(function () {
                if (isSVGElem(this)) {
                    for (var n in g) {
                        var a = ($.isFunction(g[n]) ? g[n]() : g[n]);
                        (d ? this.style[n] = a : this.setAttribute(n, a))
                    }
                } else {
                    h.apply($(this), [b, c, d])
                }
            })
        }
    }($.fn.attr);
    $.fn.removeAttr = function (b) {
        return function (a) {
            return this.each(function () {
                if (isSVGElem(this)) {
                    (this[a] && this[a].baseVal ? this[a].baseVal.value = '' : this.setAttribute(a, ''))
                } else {
                    b.apply($(this), [a])
                }
            })
        }
    }($.fn.removeAttr);

    function anySVG(a) {
        for (var i = 0; i < a.length; i++) {
            if (a[i].nodeType == 1 && a[i].namespaceURI == $.svg.svgNS) {
                return true
            }
        }
        return false
    }
    $.expr.relative['+'] = function (d) {
        return function (a, b, c) {
            d(a, b, c || anySVG(a))
        }
    }($.expr.relative['+']);
    $.expr.relative['>'] = function (d) {
        return function (a, b, c) {
            d(a, b, c || anySVG(a))
        }
    }($.expr.relative['>']);
    $.expr.relative[''] = function (d) {
        return function (a, b, c) {
            d(a, b, c || anySVG(a))
        }
    }($.expr.relative['']);
    $.expr.relative['~'] = function (d) {
        return function (a, b, c) {
            d(a, b, c || anySVG(a))
        }
    }($.expr.relative['~']);
    $.expr.find.ID = function (d) {
        return function (a, b, c) {
            return (isSVGElem(b) ? [b.ownerDocument.getElementById(a[1])] : d(a, b, c))
        }
    }($.expr.find.ID);
    var j = document.createElement('div');
    j.appendChild(document.createComment(''));
    if (j.getElementsByTagName('*').length > 0) {
        $.expr.find.TAG = function (a, b) {
            var c = b.getElementsByTagName(a[1]);
            if (a[1] === '*') {
                var d = [];
                for (var i = 0; c[i] || c.item(i); i++) {
                    if ((c[i] || c.item(i)).nodeType === 1) {
                        d.push(c[i] || c.item(i))
                    }
                }
                c = d
            }
            return c
        }
    }
    $.expr.preFilter.CLASS = function (a, b, c, d, f, g) {
        a = ' ' + a[1].replace(/\\/g, '') + ' ';
        if (g) {
            return a
        }
        for (var i = 0, elem = {}; elem != null; i++) {
            elem = b[i];
            if (!elem) {
                try {
                    elem = b.item(i)
                } catch (e) {}
            }
            if (elem) {
                var h = (!isSVGElem(elem) ? elem.className : (elem.className ? elem.className.baseVal : '') || elem.getAttribute('class'));
                if (f ^ (h && (' ' + h + ' ').indexOf(a) > -1)) {
                    if (!c) d.push(elem)
                } else if (c) {
                    b[i] = false
                }
            }
        }
        return false
    };
    $.expr.filter.CLASS = function (a, b) {
        var c = (!isSVGElem(a) ? a.className : (a.className ? a.className.baseVal : a.getAttribute('class')));
        return (' ' + c + ' ').indexOf(b) > -1
    };
    $.expr.filter.ATTR = function (g) {
        return function (c, d) {
            var e = null;
            if (isSVGElem(c)) {
                e = d[1];
                $.expr.attrHandle[e] = function (a) {
                    var b = a.getAttribute(e);
                    return b && b.baseVal || b
                }
            }
            var f = g(c, d);
            if (e) {
                $.expr.attrHandle[e] = null
            }
            return f
        }
    }($.expr.filter.ATTR);

    function isSVGElem(a) {
        return (a.nodeType == 1 && a.namespaceURI == $.svg.svgNS)
    }
})(jQuery);
(function (f, h, i) {
    function k(a, c) {
        var b = (a[0] || 0) - (c[0] || 0);
        return b > 0 || !b && a.length > 0 && k(a.slice(1), c.slice(1))
    }
    function l(a) {
        if (typeof a != g) return a;
        var c = [],
            b = "";
        for (var d in a) {
            b = typeof a[d] == g ? l(a[d]) : [d, m ? encodeURI(a[d]) : a[d]].join("=");
            c.push(b)
        }
        return c.join("&")
    }
    function n(a) {
        var c = [];
        for (var b in a) a[b] && c.push([b, '="', a[b], '"'].join(""));
        return c.join(" ")
    }
    function o(a) {
        var c = [];
        for (var b in a) c.push(['<param name="', b, '" value="', l(a[b]), '" />'].join(""));
        return c.join("")
    }
    var g = "object",
        m = true;
    try {
        var j = i.description ||
        function () {
            return (new i("ShockwaveFlash.ShockwaveFlash")).GetVariable("$version")
        }()
    } catch (p) {
        j = "Unavailable"
    }
    var e = j.match(/\d+/g) || [0];
    f[h] = {
        available: e[0] > 0,
        activeX: i && !i.name,
        version: {
            original: j,
            array: e,
            string: e.join("."),
            major: parseInt(e[0], 10) || 0,
            minor: parseInt(e[1], 10) || 0,
            release: parseInt(e[2], 10) || 0
        },
        hasVersion: function (a) {
            a = /string|number/.test(typeof a) ? a.toString().split(".") : /object/.test(typeof a) ? [a.major, a.minor] : a || [0, 0];
            return k(e, a)
        },
        encodeParams: true,
        expressInstall: "expressInstall.swf",
        expressInstallIsActive: false,
        create: function (a) {
            if (!a.swf || this.expressInstallIsActive || !this.available && !a.hasVersionFail) return false;
            if (!this.hasVersion(a.hasVersion || 1)) {
                this.expressInstallIsActive = true;
                if (typeof a.hasVersionFail == "function") if (!a.hasVersionFail.apply(a)) return false;
                a = {
                    swf: a.expressInstall || this.expressInstall,
                    height: 137,
                    width: 214,
                    flashvars: {
                        MMredirectURL: location.href,
                        MMplayerType: this.activeX ? "ActiveX" : "PlugIn",
                        MMdoctitle: document.title.slice(0, 47) + " - Flash Player Installation"
                    }
                }
            }
            attrs = {
                data: a.swf,
                type: "application/x-shockwave-flash",
                id: a.id || "flash_" + Math.floor(Math.random() * 999999999),
                width: a.width || 320,
                height: a.height || 180,
                style: a.style || ""
            };
            m = typeof a.useEncode !== "undefined" ? a.useEncode : this.encodeParams;
            a.movie = a.swf;
            a.wmode = a.wmode || "opaque";
            delete a.fallback;
            delete a.hasVersion;
            delete a.hasVersionFail;
            delete a.height;
            delete a.id;
            delete a.swf;
            delete a.useEncode;
            delete a.width;
            var c = document.createElement("div");
            c.innerHTML = ["<object ", n(attrs), ">", o(a), "</object>"].join("");
            return c.firstChild
        }
    };
    f.fn[h] = function (a) {
        var c = this.find(g).andSelf().filter(g);
        /string|object/.test(typeof a) && this.each(function () {
            var b = f(this),
                d;
            a = typeof a == g ? a : {
                swf: a
            };
            a.fallback = this;
            if (d = f[h].create(a)) {
                b.children().remove();
                b.html(d)
            }
        });
        typeof a == "function" && c.each(function () {
            var b = this;
            b.jsInteractionTimeoutMs = b.jsInteractionTimeoutMs || 0;
            if (b.jsInteractionTimeoutMs < 660) b.clientWidth || b.clientHeight ? a.call(b) : setTimeout(function () {
                f(b)[h](a)
            }, b.jsInteractionTimeoutMs + 66)
        });
        return c
    }
})(jQuery, "flash", navigator.plugins["Shockwave Flash"] || window.ActiveXObject);
(function (a) {
    a.uniform = {
        options: {
            selectClass: "selector",
            radioClass: "radio",
            checkboxClass: "checker",
            fileClass: "uploader",
            filenameClass: "filename",
            fileBtnClass: "action",
            fileDefaultText: "No file selected",
            fileBtnText: "Choose File",
            checkedClass: "checked",
            focusClass: "focus",
            disabledClass: "disabled",
            activeClass: "active",
            hoverClass: "hover",
            useID: true,
            idPrefix: "uniform",
            resetSelector: false
        },
        elements: []
    };
    if (a.browser.msie && a.browser.version < 7) {
        a.support.selectOpacity = false
    } else {
        a.support.selectOpacity = true
    }
    a.fn.uniform = function (c) {
        c = a.extend(a.uniform.options, c);
        var e = this;
        if (c.resetSelector != false) {
            a(c.resetSelector).mouseup(function () {
                function i() {
                    a.uniform.update(e)
                }
                setTimeout(i, 10)
            })
        }
        function b(k) {
            var l = a("<div />"),
                i = a("<span />");
            l.addClass(c.selectClass);
            if (c.useID) {
                l.attr("id", c.idPrefix + "-" + k.attr("id"))
            }
            var j = k.find(":selected:first");
            if (j.length == 0) {
                j = k.find("option:first")
            }
            i.html(j.text());
            k.css("opacity", 0);
            k.wrap(l);
            k.before(i);
            l = k.parent("div");
            i = k.siblings("span");
            k.change(function () {
                i.text(k.find(":selected").text());
                l.removeClass(c.activeClass)
            }).focus(function () {
                l.addClass(c.focusClass)
            }).blur(function () {
                l.removeClass(c.focusClass);
                l.removeClass(c.activeClass)
            }).mousedown(function () {
                l.addClass(c.activeClass)
            }).mouseup(function () {
                l.removeClass(c.activeClass)
            }).click(function () {
                l.removeClass(c.activeClass)
            }).hover(function () {
                l.addClass(c.hoverClass)
            }, function () {
                l.removeClass(c.hoverClass)
            }).keyup(function () {
                i.text(k.find(":selected").text())
            });
            if (a(k).attr("disabled")) {
                l.addClass(c.disabledClass)
            }
            a.uniform.noSelect(i);
            h(k)
        }
        function d(j) {
            var k = a("<div />"),
                i = a("<span />");
            k.addClass(c.checkboxClass);
            if (c.useID) {
                k.attr("id", c.idPrefix + "-" + j.attr("id"))
            }
            a(j).wrap(k);
            a(j).wrap(i);
            i = j.parent();
            k = i.parent();
            a(j).css("opacity", 0).focus(function () {
                k.addClass(c.focusClass)
            }).blur(function () {
                k.removeClass(c.focusClass)
            }).click(function () {
                if (!a(j).attr("checked")) {
                    i.removeClass(c.checkedClass)
                } else {
                    i.addClass(c.checkedClass)
                }
            }).mousedown(function () {
                k.addClass(c.activeClass)
            }).mouseup(function () {
                k.removeClass(c.activeClass)
            }).hover(function () {
                k.addClass(c.hoverClass)
            }, function () {
                k.removeClass(c.hoverClass)
            });
            if (a(j).attr("checked")) {
                i.addClass(c.checkedClass)
            }
            if (a(j).attr("disabled")) {
                k.addClass(c.disabledClass)
            }
            h(j)
        }
        function f(j) {
            var k = a("<div />"),
                i = a("<span />");
            k.addClass(c.radioClass);
            if (c.useID) {
                k.attr("id", c.idPrefix + "-" + j.attr("id"))
            }
            a(j).wrap(k);
            a(j).wrap(i);
            i = j.parent();
            k = i.parent();
            a(j).css("opacity", 0).focus(function () {
                k.addClass(c.focusClass)
            }).blur(function () {
                k.removeClass(c.focusClass)
            }).click(function () {
                if (!a(j).attr("checked")) {
                    i.removeClass(c.checkedClass)
                } else {
                    a("." + c.radioClass + " span." + c.checkedClass + ":has([name='" + a(j).attr("name") + "'])").removeClass(c.checkedClass);
                    i.addClass(c.checkedClass)
                }
            }).mousedown(function () {
                if (!a(j).is(":disabled")) {
                    k.addClass(c.activeClass)
                }
            }).mouseup(function () {
                k.removeClass(c.activeClass)
            }).hover(function () {
                k.addClass(c.hoverClass)
            }, function () {
                k.removeClass(c.hoverClass)
            });
            if (a(j).attr("checked")) {
                i.addClass(c.checkedClass)
            }
            if (a(j).attr("disabled")) {
                k.addClass(c.disabledClass)
            }
            h(j)
        }
        function g(l) {
            $el = a(l);
            var m = a("<div />"),
                k = a("<span>" + c.fileDefaultText + "</span>"),
                j = a("<span>" + c.fileBtnText + "</span>");
            m.addClass(c.fileClass);
            k.addClass(c.filenameClass);
            j.addClass(c.fileBtnClass);
            if (c.useID) {
                m.attr("id", c.idPrefix + "-" + $el.attr("id"))
            }
            $el.wrap(m);
            $el.after(j);
            $el.after(k);
            m = $el.closest("div");
            k = $el.siblings("." + c.filenameClass);
            j = $el.siblings("." + c.fileBtnClass);
            if (!$el.attr("size")) {
                var i = m.width();
                $el.attr("size", i / 10)
            }
            $el.css("opacity", 0).focus(function () {
                m.addClass(c.focusClass)
            }).blur(function () {
                m.removeClass(c.focusClass)
            }).change(function () {
                var n = a(this).val();
                n = n.split(/[\/\\]+/);
                n = n[(n.length - 1)];
                k.text(n)
            }).mousedown(function () {
                if (!a(l).is(":disabled")) {
                    m.addClass(c.activeClass)
                }
            }).mouseup(function () {
                m.removeClass(c.activeClass)
            }).hover(function () {
                m.addClass(c.hoverClass)
            }, function () {
                m.removeClass(c.hoverClass)
            });
            if ($el.attr("disabled")) {
                m.addClass(c.disabledClass)
            }
            a.uniform.noSelect(k);
            a.uniform.noSelect(j);
            h(l)
        }
        function h(i) {
            i = a(i).get();
            if (i.length > 1) {
                a.each(i, function (j, k) {
                    a.uniform.elements.push(k)
                })
            } else {
                a.uniform.elements.push(i)
            }
        }
        a.uniform.noSelect = function (i) {
            function j() {
                return false
            }
            a(i).each(function () {
                this.onselectstart = this.ondragstart = j;
                a(this).mousedown(j).css({
                    MozUserSelect: "none"
                })
            })
        };
        a.uniform.update = function (i) {
            if (i == undefined) {
                i = a(a.uniform.elements)
            }
            i = a(i);
            i.each(function () {
                $e = a(this);
                if ($e.is("select")) {
                    spanTag = $e.siblings("span");
                    divTag = $e.parent("div");
                    divTag.removeClass(c.hoverClass + " " + c.focusClass + " " + c.activeClass);
                    spanTag.html($e.find(":selected").text());
                    if ($e.is(":disabled")) {
                        divTag.addClass(c.disabledClass)
                    } else {
                        divTag.removeClass(c.disabledClass)
                    }
                } else {
                    if ($e.is(":checkbox")) {
                        spanTag = $e.closest("span");
                        divTag = $e.closest("div");
                        divTag.removeClass(c.hoverClass + " " + c.focusClass + " " + c.activeClass);
                        spanTag.removeClass(c.checkedClass);
                        if ($e.is(":checked")) {
                            spanTag.addClass(c.checkedClass)
                        }
                        if ($e.is(":disabled")) {
                            divTag.addClass(c.disabledClass)
                        } else {
                            divTag.removeClass(c.disabledClass)
                        }
                    } else {
                        if ($e.is(":radio")) {
                            spanTag = $e.closest("span");
                            divTag = $e.closest("div");
                            divTag.removeClass(c.hoverClass + " " + c.focusClass + " " + c.activeClass);
                            spanTag.removeClass(c.checkedClass);
                            if ($e.is(":checked")) {
                                spanTag.addClass(c.checkedClass)
                            }
                            if ($e.is(":disabled")) {
                                divTag.addClass(c.disabledClass)
                            } else {
                                divTag.removeClass(c.disabledClass)
                            }
                        } else {
                            if ($e.is(":file")) {
                                divTag = $e.parent("div");
                                filenameTag = $e.siblings(c.filenameClass);
                                btnTag = $e.siblings(c.fileBtnClass);
                                divTag.removeClass(c.hoverClass + " " + c.focusClass + " " + c.activeClass);
                                filenameTag.text($e.val());
                                if ($e.is(":disabled")) {
                                    divTag.addClass(c.disabledClass)
                                } else {
                                    divTag.removeClass(c.disabledClass)
                                }
                            }
                        }
                    }
                }
            })
        };
        return this.each(function () {
            if (a.support.selectOpacity) {
                var i = a(this);
                if (i.is("select")) {
                    if (i.attr("multiple") != true) {
                        b(i)
                    }
                } else {
                    if (i.is(":checkbox")) {
                        d(i)
                    } else {
                        if (i.is(":radio")) {
                            f(i)
                        } else {
                            if (i.is(":file")) {
                                g(i)
                            }
                        }
                    }
                }
            }
        })
    }
})(jQuery);
if (jQuery) {
    (function (a) {
        a.extend(a.fn, {
            uploadify: function (b) {
                a(this).each(function () {
                    settings = a.extend({
                        id: a(this).attr("id"),
                        uploader: "uploadify.swf",
						//script: "http://www.techsturedevelopment.com/upload.ashx",
                        script: "http://192.168.19.28:5069/upload.ashx",
						//script: "http://www.tsmaapplication.com/upload.ashx",
                        expressInstall: null,
                        folder: "",
                        height: 30,
                        width: 110,
                        cancelImg: "cancel.png",
                        wmode: "opaque",
                        scriptAccess: "sameDomain",
                        fileDataName: "Filedata",
                        method: "POST",
                        queueSizeLimit: 2000,
                        simUploadLimit: 2,
                        queueID: false,
                        displayData: "percentage",
                        onInit: function () {},
                        onSelect: function () {},
                        onQueueFull: function () {},
                        onCheck: function () {},
                        onCancel: function () {},
                        onError: function () {},
                        onProgress: function () {},
                        onComplete: function () {},
                        onAllComplete: function () {}
                    }, b);
                    var e = location.pathname;
                    e = e.split("/");
                    e.pop();
                    e = e.join("/") + "/";
                    var f = {};
                    f.uploadifyID = settings.id;
                    f.pagepath = e;
                    if (settings.buttonImg) {
                        f.buttonImg = escape(settings.buttonImg)
                    }
                    if (settings.buttonText) {
                        f.buttonText = escape(settings.buttonText)
                    }
                    if (settings.rollover) {
                        f.rollover = true
                    }
                    f.script = settings.script;
                    f.folder = escape(settings.folder);
                    if (settings.scriptData) {
                        var g = "";
                        for (var d in settings.scriptData) {
                            g += "&" + d + "=" + settings.scriptData[d]
                        }
                        f.scriptData = escape(g.substr(1))
                    }
                    f.width = settings.width;
                    f.height = settings.height;
                    f.wmode = settings.wmode;
                    f.method = settings.method;
                    f.queueSizeLimit = settings.queueSizeLimit;
                    f.simUploadLimit = settings.simUploadLimit;
                    if (settings.hideButton) {
                        f.hideButton = true
                    }
                    if (settings.fileDesc) {
                        f.fileDesc = settings.fileDesc
                    }
                    if (settings.fileExt) {
                        f.fileExt = settings.fileExt
                    }
                    if (settings.multi) {
                        f.multi = true
                    }
                    if (settings.auto) {
                        f.auto = true
                    }
                    if (settings.sizeLimit) {
                        f.sizeLimit = settings.sizeLimit
                    }
                    if (settings.checkScript) {
                        f.checkScript = settings.checkScript
                    }
                    if (settings.fileDataName) {
                        f.fileDataName = settings.fileDataName
                    }
                    if (settings.queueID) {
                        f.queueID = settings.queueID
                    }
                    if (settings.onInit() !== false) {
                        a(this).css("display", "none");
                        a(this).after('<div id="' + a(this).attr("id") + 'Uploader"></div>');
                        swfobject.embedSWF(settings.uploader, settings.id + "Uploader", settings.width, settings.height, "9.0.24", settings.expressInstall, f, {
                            quality: "high",
                            wmode: settings.wmode,
                            allowScriptAccess: settings.scriptAccess
                        });
                        if (settings.queueID == false) {
                            a("#" + a(this).attr("id") + "Uploader").after('<div id="' + a(this).attr("id") + 'Queue" class="uploadifyQueue"></div>')
                        }
                    }
                    if (typeof (settings.onOpen) == "function") {
                        a(this).bind("uploadifyOpen", settings.onOpen)
                    }
                    a(this).bind("uploadifySelect", {
                        action: settings.onSelect,
                        queueID: settings.queueID
                    }, function (j, h, i) {
                        if (j.data.action(j, h, i) !== false) {
                            var k = Math.round(i.size / 1024 * 100) * 0.01;
                            var l = "KB";
                            if (k > 1000) {
                                k = Math.round(k * 0.001 * 100) * 0.01;
                                l = "MB"
                            }
                            var m = k.toString().split(".");
                            if (m.length > 1) {
                                k = m[0] + "." + m[1].substr(0, 2)
                            } else {
                                k = m[0]
                            }
                            if (i.name.length > 20) {
                                fileName = i.name.substr(0, 20) + "..."
                            } else {
                                fileName = i.name
                            }
                            queue = "#" + a(this).attr("id") + "Queue";
                            if (j.data.queueID) {
                                queue = "#" + j.data.queueID
                            }
                            a(queue).append('<div id="' + a(this).attr("id") + h + '" class="uploadifyQueueItem"><div class="cancel"><a href="javascript:jQuery(\'#' + a(this).attr("id") + "').uploadifyCancel('" + h + '\')"><img src="' + settings.cancelImg + '" border="0" /></a></div><span class="fileName">' + fileName + " (" + k + l + ')</span><span class="percentage"></span><div class="uploadifyProgress"><div id="' + a(this).attr("id") + h + 'ProgressBar" class="uploadifyProgressBar"><!--Progress Bar--></div></div></div>')
                        }
                    });
                    if (typeof (settings.onSelectOnce) == "function") {
                        a(this).bind("uploadifySelectOnce", settings.onSelectOnce)
                    }
                    a(this).bind("uploadifyQueueFull", {
                        action: settings.onQueueFull
                    }, function (h, i) {
                        if (h.data.action(h, i) !== false) {
                            alert("The queue is full.  The max size is " + i + ".")
                        }
                    });
                    a(this).bind("uploadifyCheckExist", {
                        action: settings.onCheck
                    }, function (m, l, k, j, o) {
                        var i = new Object();
                        i = k;
                        i.folder = e + j;
                        if (o) {
                            for (var h in k) {
                                var n = h
                            }
                        }
                        a.post(l, i, function (r) {
                            for (var p in r) {
                                if (m.data.action(m, l, k, j, o) !== false) {
                                    var q = confirm("Do you want to replace the file " + r[p] + "?");
                                    if (!q) {
                                        document.getElementById(a(m.target).attr("id") + "Uploader").cancelFileUpload(p, true, true)
                                    }
                                }
                            }
                            if (o) {
                                document.getElementById(a(m.target).attr("id") + "Uploader").startFileUpload(n, true)
                            } else {
                                document.getElementById(a(m.target).attr("id") + "Uploader").startFileUpload(null, true)
                            }
                        }, "json")
                    });
                    a(this).bind("uploadifyCancel", {
                        action: settings.onCancel
                    }, function (l, h, k, m, j) {
                        if (l.data.action(l, h, k, m, j) !== false) {
                            var i = (j == true) ? 0 : 250;
                            a("#" + a(this).attr("id") + h).fadeOut(i, function () {
                                a(this).remove()
                            })
                        }
                    });
                    if (typeof (settings.onClearQueue) == "function") {
                        a(this).bind("uploadifyClearQueue", settings.onClearQueue)
                    }
                    var c = [];
                    a(this).bind("uploadifyError", {
                        action: settings.onError
                    }, function (l, h, k, j) {
                        if (l.data.action(l, h, k, j) !== false) {
                            var i = new Array(h, k, j);
                            c.push(i);
                            a("#" + a(this).attr("id") + h + " .percentage").text(" - " + j.type + " Error");
                            a("#" + a(this).attr("id") + h).addClass("uploadifyError")
                        }
                    });
                    a(this).bind("uploadifyProgress", {
                        action: settings.onProgress,
                        toDisplay: settings.displayData
                    }, function (j, h, i, k) {
                        if (j.data.action(j, h, i, k) !== false) {
                            a("#" + a(this).attr("id") + h + "ProgressBar").css("width", k.percentage + "%");
                            if (j.data.toDisplay == "percentage") {
                                displayData = " - " + k.percentage + "%"
                            }
                            if (j.data.toDisplay == "speed") {
                                displayData = " - " + k.speed + "KB/s"
                            }
                            if (j.data.toDisplay == null) {
                                displayData = " "
                            }
                            a("#" + a(this).attr("id") + h + " .percentage").text(displayData)
                        }
                    });
                    a(this).bind("uploadifyComplete", {
                        action: settings.onComplete
                    }, function (k, h, j, i, l) {
                        if (k.data.action(k, h, j, unescape(i), l) !== false) {
                            a("#" + a(this).attr("id") + h + " .percentage").text(" - Completed");
                            a("#" + a(this).attr("id") + h).fadeOut(250, function () {
                                a(this).remove()
                            })
                        }
                    });
                    if (typeof (settings.onAllComplete) == "function") {
                        a(this).bind("uploadifyAllComplete", {
                            action: settings.onAllComplete
                        }, function (h, i) {
                            if (h.data.action(h, i) !== false) {
                                c = []
                            }
                        })
                    }
                })
            },
            uploadifySettings: function (f, j, c) {
                var g = false;
                a(this).each(function () {
                    if (f == "scriptData" && j != null) {
                        if (c) {
                            var i = j
                        } else {
                            var i = a.extend(settings.scriptData, j)
                        }
                        var l = "";
                        for (var k in i) {
                            l += "&" + k + "=" + escape(i[k])
                        }
                        j = l.substr(1);
                    }
                    g = document.getElementById(a(this).attr("id") + "Uploader").updateSettings(f, j)
                });
                if (j == null) {
                    if (f == "scriptData") {
                        var b = unescape(g).split("&");
                        var e = new Object();
                        for (var d = 0; d < b.length; d++) {
                            var h = b[d].split("=");
                            e[h[0]] = h[1]
                        }
                        g = e
                    }
                    return g

                }
            },
            uploadifyUpload: function (b) {
                a(this).each(function () {
                    document.getElementById(a(this).attr("id") + "Uploader").startFileUpload(b, false)
                })
            },
            uploadifyCancel: function (b) {
                a(this).each(function () {
                    document.getElementById(a(this).attr("id") + "Uploader").cancelFileUpload(b, true, false)
                })
            },
            uploadifyClearQueue: function () {
                a(this).each(function () {
                    document.getElementById(a(this).attr("id") + "Uploader").clearFileUploadQueue(false)
                })
            }
        })
    })(jQuery)
};
(function ($) {
    $.extend($.fn, {
        validate: function (options) {
            if (!this.length) {
                options && options.debug && window.console && console.warn("nothing selected, can't validate, returning nothing");
                return;
            }
            var validator = $.data(this[0], 'validator');
            if (validator) {
                return validator;
            }
            validator = new $.validator(options, this[0]);
            $.data(this[0], 'validator', validator);
            if (validator.settings.onsubmit) {
                this.find("input, button").filter(".cancel").click(function () {
                    validator.cancelSubmit = true;
                });
                if (validator.settings.submitHandler) {
                    this.find("input, button").filter(":submit").click(function () {
                        validator.submitButton = this;
                    });
                }
                this.submit(function (event) {
                    if (validator.settings.debug) event.preventDefault();

                    function handle() {
                        if (validator.settings.submitHandler) {
                            if (validator.submitButton) {
                                var hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
                            }
                            validator.settings.submitHandler.call(validator, validator.currentForm);
                            if (validator.submitButton) {
                                hidden.remove();
                            }
                            return false;
                        }
                        return true;
                    }
                    if (validator.cancelSubmit) {
                        validator.cancelSubmit = false;
                        return handle();
                    }
                    if (validator.form()) {
                        if (validator.pendingRequest) {
                            validator.formSubmitted = true;
                            return false;
                        }
                        return handle();
                    } else {
                        validator.focusInvalid();
                        return false;
                    }
                });
            }
            return validator;
        },
        valid: function () {
            if ($(this[0]).is('form')) {
                return this.validate().form();
            } else {
                var valid = true;
                var validator = $(this[0].form).validate();
                this.each(function () {
                    valid &= validator.element(this);
                });
                return valid;
            }
        },
        removeAttrs: function (attributes) {
            var result = {},
                $element = this;
            $.each(attributes.split(/\s/), function (index, value) {
                result[value] = $element.attr(value);
                $element.removeAttr(value);
            });
            return result;
        },
        rules: function (command, argument) {
            var element = this[0];
            if (command) {
                var settings = $.data(element.form, 'validator').settings;
                var staticRules = settings.rules;
                var existingRules = $.validator.staticRules(element);
                switch (command) {
                case "add":
                    $.extend(existingRules, $.validator.normalizeRule(argument));
                    staticRules[element.name] = existingRules;
                    if (argument.messages) settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
                    break;
                case "remove":
                    if (!argument) {
                        delete staticRules[element.name];
                        return existingRules;
                    }
                    var filtered = {};
                    $.each(argument.split(/\s/), function (index, method) {
                        filtered[method] = existingRules[method];
                        delete existingRules[method];
                    });
                    return filtered;
                }
            }
            var data = $.validator.normalizeRules($.extend({}, $.validator.metadataRules(element), $.validator.classRules(element), $.validator.attributeRules(element), $.validator.staticRules(element)), element);
            if (data.required) {
                var param = data.required;
                delete data.required;
                data = $.extend({
                    required: param
                }, data);
            }
            return data;
        }
    });
    $.extend($.expr[":"], {
        blank: function (a) {
            return !$.trim("" + a.value);
        },
        filled: function (a) {
            return !!$.trim("" + a.value);
        },
        unchecked: function (a) {
            return !a.checked;
        }
    });
    $.validator = function (options, form) {
        this.settings = $.extend(true, {}, $.validator.defaults, options);
        this.currentForm = form;
        this.init();
    };
    $.validator.format = function (source, params) {
        if (arguments.length == 1) return function () {
            var args = $.makeArray(arguments);
            args.unshift(source);
            return $.validator.format.apply(this, args);
        };
        if (arguments.length > 2 && params.constructor != Array) {
            params = $.makeArray(arguments).slice(1);
        }
        if (params.constructor != Array) {
            params = [params];
        }
        $.each(params, function (i, n) {
            source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
        });
        return source;
    };
    $.extend($.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            validClass: "valid",
            errorElement: "label",
            focusInvalid: true,
            errorContainer: $([]),
            errorLabelContainer: $([]),
            onsubmit: true,
            ignore: [],
            ignoreTitle: false,
            onfocusin: function (element) {
                this.lastActive = element;
                if (this.settings.focusCleanup && !this.blockFocusCleanup) {
                    this.settings.unhighlight && this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
                    this.errorsFor(element).hide();
                }
            },
            onfocusout: function (element) {
                if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
                    this.element(element);
                }
            },
            onkeyup: function (element) {
                if (element.name in this.submitted || element == this.lastElement) {
                    this.element(element);
                }
            },
            onclick: function (element) {
                if (element.name in this.submitted) this.element(element);
                else if (element.parentNode.name in this.submitted) this.element(element.parentNode);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass(errorClass).removeClass(validClass);
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass(errorClass).addClass(validClass);
            }
        },
        setDefaults: function (settings) {
            $.extend($.validator.defaults, settings);
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            accept: "Please enter a value with a valid extension.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}.")
        },
        autoCreateRanges: false,
        prototype: {
            init: function () {
                this.labelContainer = $(this.settings.errorLabelContainer);
                this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
                this.submitted = {};
                this.valueCache = {};
                this.pendingRequest = 0;
                this.pending = {};
                this.invalid = {};
                this.reset();
                var groups = (this.groups = {});
                $.each(this.settings.groups, function (key, value) {
                    $.each(value.split(/\s/), function (index, name) {
                        groups[name] = key;
                    });
                });
                var rules = this.settings.rules;
                $.each(rules, function (key, value) {
                    rules[key] = $.validator.normalizeRule(value);
                });

                function delegate(event) {
                    var validator = $.data(this[0].form, "validator"),
                        eventType = "on" + event.type.replace(/^validate/, "");
                    validator.settings[eventType] && validator.settings[eventType].call(validator, this[0]);
                }
                $(this.currentForm).validateDelegate(":text, :password, :file, select, textarea", "focusin focusout keyup", delegate).validateDelegate(":radio, :checkbox, select, option", "click", delegate);
                if (this.settings.invalidHandler) $(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
            },
            form: function () {
                this.checkForm();
                $.extend(this.submitted, this.errorMap);
                this.invalid = $.extend({}, this.errorMap);
                if (!this.valid()) $(this.currentForm).triggerHandler("invalid-form", [this]);
                this.showErrors();
                return this.valid();
            },
            checkForm: function () {
                this.prepareForm();
                for (var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++) {
                    this.check(elements[i]);
                }
                return this.valid();
            },
            element: function (element) {
                element = this.clean(element);
                this.lastElement = element;
                this.prepareElement(element);
                this.currentElements = $(element);
                var result = this.check(element);
                if (result) {
                    delete this.invalid[element.name];
                } else {
                    this.invalid[element.name] = true;
                }
                if (!this.numberOfInvalids()) {
                    this.toHide = this.toHide.add(this.containers);
                }
                this.showErrors();
                return result;
            },
            showErrors: function (errors) {
                if (errors) {
                    $.extend(this.errorMap, errors);
                    this.errorList = [];
                    for (var name in errors) {
                        this.errorList.push({
                            message: errors[name],
                            element: this.findByName(name)[0]
                        });
                    }
                    this.successList = $.grep(this.successList, function (element) {
                        return !(element.name in errors);
                    });
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();
            },
            resetForm: function () {
                if ($.fn.resetForm) $(this.currentForm).resetForm();
                this.submitted = {};
                this.prepareForm();
                this.hideErrors();
                this.elements().removeClass(this.settings.errorClass);
            },
            numberOfInvalids: function () {
                return this.objectLength(this.invalid);
            },
            objectLength: function (obj) {
                var count = 0;
                for (var i in obj) count++;
                return count;
            },
            hideErrors: function () {
                this.addWrapper(this.toHide).hide();
            },
            valid: function () {
                return this.size() == 0;
            },
            size: function () {
                return this.errorList.length;
            },
            focusInvalid: function () {
                if (this.settings.focusInvalid) {
                    try {
                        $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin");
                    } catch (e) {}
                }
            },
            findLastActive: function () {
                var lastActive = this.lastActive;
                return lastActive && $.grep(this.errorList, function (n) {
                    return n.element.name == lastActive.name;
                }).length == 1 && lastActive;
            },
            elements: function () {
                var validator = this,
                    rulesCache = {};
                return $([]).add(this.currentForm.elements).filter(":input").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function () {
                    !this.name && validator.settings.debug && window.console && console.error("%o has no name assigned", this);
                    if (this.name in rulesCache || !validator.objectLength($(this).rules())) return false;
                    rulesCache[this.name] = true;
                    return true;
                });
            },
            clean: function (selector) {
                return $(selector)[0];
            },
            errors: function () {
                return $(this.settings.errorElement + "." + this.settings.errorClass, this.errorContext);
            },
            reset: function () {
                this.successList = [];
                this.errorList = [];
                this.errorMap = {};
                this.toShow = $([]);
                this.toHide = $([]);
                this.currentElements = $([]);
            },
            prepareForm: function () {
                this.reset();
                this.toHide = this.errors().add(this.containers);
            },
            prepareElement: function (element) {
                this.reset();
                this.toHide = this.errorsFor(element);
            },
            check: function (element) {
                element = this.clean(element);
                if (this.checkable(element)) {
                    element = this.findByName(element.name)[0];
                }
                var rules = $(element).rules();
                var dependencyMismatch = false;
                for (method in rules) {
                    var rule = {
                        method: method,
                        parameters: rules[method]
                    };
                    try {
                        var result = $.validator.methods[method].call(this, element.value.replace(/\r/g, ""), element, rule.parameters);
                        if (result == "dependency-mismatch") {
                            dependencyMismatch = true;
                            continue;
                        }
                        dependencyMismatch = false;
                        if (result == "pending") {
                            this.toHide = this.toHide.not(this.errorsFor(element));
                            return;
                        }
                        if (!result) {
                            this.formatAndAdd(element, rule);
                            return false;
                        }
                    } catch (e) {
                        this.settings.debug && window.console && console.log("exception occured when checking element " + element.id + ", check the '" + rule.method + "' method", e);
                        throw e;
                    }
                }
                if (dependencyMismatch) return;
                if (this.objectLength(rules)) this.successList.push(element);
                return true;
            },
            customMetaMessage: function (element, method) {
                if (!$.metadata) return;
                var meta = this.settings.meta ? $(element).metadata()[this.settings.meta] : $(element).metadata();
                return meta && meta.messages && meta.messages[method];
            },
            customMessage: function (name, method) {
                var m = this.settings.messages[name];
                return m && (m.constructor == String ? m : m[method]);
            },
            findDefined: function () {
                for (var i = 0; i < arguments.length; i++) {
                    if (arguments[i] !== undefined) return arguments[i];
                }
                return undefined;
            },
            defaultMessage: function (element, method) {
                return this.findDefined(this.customMessage(element.name, method), this.customMetaMessage(element, method), !this.settings.ignoreTitle && element.title || undefined, $.validator.messages[method], "<strong>Warning: No message defined for " + element.name + "</strong>");
            },
            formatAndAdd: function (element, rule) {
                var message = this.defaultMessage(element, rule.method),
                    theregex = /\$?\{(\d+)\}/g;
                if (typeof message == "function") {
                    message = message.call(this, rule.parameters, element);
                } else if (theregex.test(message)) {
                    message = jQuery.format(message.replace(theregex, '{$1}'), rule.parameters);
                }
                this.errorList.push({
                    message: message,
                    element: element
                });
                this.errorMap[element.name] = message;
                this.submitted[element.name] = message;
            },
            addWrapper: function (toToggle) {
                if (this.settings.wrapper) toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
                return toToggle;
            },
            defaultShowErrors: function () {
                for (var i = 0; this.errorList[i]; i++) {
                    var error = this.errorList[i];
                    this.settings.highlight && this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
                    this.showLabel(error.element, error.message);
                }
                if (this.errorList.length) {
                    this.toShow = this.toShow.add(this.containers);
                }
                if (this.settings.success) {
                    for (var i = 0; this.successList[i]; i++) {
                        this.showLabel(this.successList[i]);
                    }
                }
                if (this.settings.unhighlight) {
                    for (var i = 0, elements = this.validElements(); elements[i]; i++) {
                        this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                    }
                }
                this.toHide = this.toHide.not(this.toShow);
                this.hideErrors();
                this.addWrapper(this.toShow).show();
            },
            validElements: function () {
                return this.currentElements.not(this.invalidElements());
            },
            invalidElements: function () {
                return $(this.errorList).map(function () {
                    return this.element;
                });
            },
            showLabel: function (element, message) {
                var label = this.errorsFor(element);
                if (label.length) {
                    label.removeClass().addClass(this.settings.errorClass);
                    label.attr("generated") && label.html(message);
                } else {
                    label = $("<" + this.settings.errorElement + "/>").attr({
                        "for": this.idOrName(element),
                        generated: true
                    }).addClass(this.settings.errorClass).html(message || "");
                    if (this.settings.wrapper) {
                        label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                    }
                    if (!this.labelContainer.append(label).length) this.settings.errorPlacement ? this.settings.errorPlacement(label, $(element)) : label.insertAfter(element);
                }
                if (!message && this.settings.success) {
                    label.text("");
                    typeof this.settings.success == "string" ? label.addClass(this.settings.success) : this.settings.success(label);
                }
                this.toShow = this.toShow.add(label);
            },
            errorsFor: function (element) {
                var name = this.idOrName(element);
                return this.errors().filter(function () {
                    return $(this).attr('for') == name;
                });
            },
            idOrName: function (element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },
            checkable: function (element) {
                return /radio|checkbox/i.test(element.type);
            },
            findByName: function (name) {
                var form = this.currentForm;
                return $(document.getElementsByName(name)).map(function (index, element) {
                    return element.form == form && element.name == name && element || null;
                });
            },
            getLength: function (value, element) {
                switch (element.nodeName.toLowerCase()) {
                case 'select':
                    return $("option:selected", element).length;
                case 'input':
                    if (this.checkable(element)) return this.findByName(element.name).filter(':checked').length;
                }
                return value.length;
            },
            depend: function (param, element) {
                return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
            },
            dependTypes: {
                "boolean": function (param, element) {
                    return param;
                },
                "string": function (param, element) {
                    return !!$(param, element.form).length;
                },
                "function": function (param, element) {
                    return param(element);
                }
            },
            optional: function (element) {
                return !$.validator.methods.required.call(this, $.trim(element.value), element) && "dependency-mismatch";
            },
            startRequest: function (element) {
                if (!this.pending[element.name]) {
                    this.pendingRequest++;
                    this.pending[element.name] = true;
                }
            },
            stopRequest: function (element, valid) {
                this.pendingRequest--;
                if (this.pendingRequest < 0) this.pendingRequest = 0;
                delete this.pending[element.name];
                if (valid && this.pendingRequest == 0 && this.formSubmitted && this.form()) {
                    $(this.currentForm).submit();
                    this.formSubmitted = false;
                } else if (!valid && this.pendingRequest == 0 && this.formSubmitted) {
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                    this.formSubmitted = false;
                }
            },
            previousValue: function (element) {
                return $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: true,
                    message: this.defaultMessage(element, "remote")
                });
            }
        },
        classRuleSettings: {
            required: {
                required: true
            },
            email: {
                email: true
            },
            url: {
                url: true
            },
            date: {
                date: true
            },
            dateISO: {
                dateISO: true
            },
            dateDE: {
                dateDE: true
            },
            number: {
                number: true
            },
            numberDE: {
                numberDE: true
            },
            digits: {
                digits: true
            },
            creditcard: {
                creditcard: true
            }
        },
        addClassRules: function (className, rules) {
            className.constructor == String ? this.classRuleSettings[className] = rules : $.extend(this.classRuleSettings, className);
        },
        classRules: function (element) {
            var rules = {};
            var classes = $(element).attr('class');
            classes && $.each(classes.split(' '), function () {
                if (this in $.validator.classRuleSettings) {
                    $.extend(rules, $.validator.classRuleSettings[this]);
                }
            });
            return rules;
        },
        attributeRules: function (element) {
            var rules = {};
            var $element = $(element);
            for (method in $.validator.methods) {
                var value = $element.attr(method);
                if (value) {
                    rules[method] = value;
                }
            }
            if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
                delete rules.maxlength;

            }
            return rules;
        },
        metadataRules: function (element) {
            if (!$.metadata) return {};
            var meta = $.data(element.form, 'validator').settings.meta;
            return meta ? $(element).metadata()[meta] : $(element).metadata();
        },
        staticRules: function (element) {
            var rules = {};
            var validator = $.data(element.form, 'validator');
            if (validator.settings.rules) {
                rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
            }
            return rules;
        },
        normalizeRules: function (rules, element) {
            $.each(rules, function (prop, val) {
                if (val === false) {
                    delete rules[prop];
                    return;
                }
                if (val.param || val.depends) {
                    var keepRule = true;
                    switch (typeof val.depends) {
                    case "string":
                        keepRule = !! $(val.depends, element.form).length;
                        break;
                    case "function":
                        keepRule = val.depends.call(element, element);
                        break;
                    }
                    if (keepRule) {
                        rules[prop] = val.param !== undefined ? val.param : true;
                    } else {
                        delete rules[prop];
                    }
                }
            });
            $.each(rules, function (rule, parameter) {
                rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
            });
            $.each(['minlength', 'maxlength', 'min', 'max'], function () {
                if (rules[this]) {
                    rules[this] = Number(rules[this]);
                }
            });
            $.each(['rangelength', 'range'], function () {
                if (rules[this]) {
                    rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
                }
            });
            if ($.validator.autoCreateRanges) {
                if (rules.min && rules.max) {
                    rules.range = [rules.min, rules.max];
                    delete rules.min;
                    delete rules.max;
                }
                if (rules.minlength && rules.maxlength) {
                    rules.rangelength = [rules.minlength, rules.maxlength];
                    delete rules.minlength;
                    delete rules.maxlength;
                }
            }
            if (rules.messages) {
                delete rules.messages;
            }
            return rules;
        },
        normalizeRule: function (data) {
            if (typeof data == "string") {
                var transformed = {};
                $.each(data.split(/\s/), function () {
                    transformed[this] = true;
                });
                data = transformed;
            }
            return data;
        },
        addMethod: function (name, method, message) {
            $.validator.methods[name] = method;
            $.validator.messages[name] = message != undefined ? message : $.validator.messages[name];
            if (method.length < 3) {
                $.validator.addClassRules(name, $.validator.normalizeRule(name));
            }
        },
        methods: {
            required: function (value, element, param) {
                if (!this.depend(param, element)) return "dependency-mismatch";
                switch (element.nodeName.toLowerCase()) {
                case 'select':
                    var val = $(element).val();
                    return val && val.length > 0;
                case 'input':
                    if (this.checkable(element)) return this.getLength(value, element) > 0;
                default:
                    return $.trim(value).length > 0;
                }
            },
            remote: function (value, element, param) {
                if (this.optional(element)) return "dependency-mismatch";
                var previous = this.previousValue(element);
                if (!this.settings.messages[element.name]) this.settings.messages[element.name] = {};
                previous.originalMessage = this.settings.messages[element.name].remote;
                this.settings.messages[element.name].remote = previous.message;
                param = typeof param == "string" && {
                    url: param
                } || param;
                if (previous.old !== value) {
                    previous.old = value;
                    var validator = this;
                    this.startRequest(element);
                    var data = {};
                    data[element.name] = value;
                    $.ajax($.extend(true, {
                        url: param,
                        mode: "abort",
                        port: "validate" + element.name,
                        dataType: "json",
                        data: data,
                        success: function (response) {
                            validator.settings.messages[element.name].remote = previous.originalMessage;
                            var valid = response === true;
                            if (valid) {
                                var submitted = validator.formSubmitted;
                                validator.prepareElement(element);
                                validator.formSubmitted = submitted;
                                validator.successList.push(element);
                                validator.showErrors();
                            } else {
                                var errors = {};
                                var message = (previous.message = response || validator.defaultMessage(element, "remote"));
                                errors[element.name] = $.isFunction(message) ? message(value) : message;
                                validator.showErrors(errors);
                            }
                            previous.valid = valid;
                            validator.stopRequest(element, valid);
                        }
                    }, param));
                    return "pending";
                } else if (this.pending[element.name]) {
                    return "pending";
                }
                return previous.valid;
            },
            minlength: function (value, element, param) {
                return this.optional(element) || this.getLength($.trim(value), element) >= param;
            },
            maxlength: function (value, element, param) {
                return this.optional(element) || this.getLength($.trim(value), element) <= param;
            },
            rangelength: function (value, element, param) {
                var length = this.getLength($.trim(value), element);
                return this.optional(element) || (length >= param[0] && length <= param[1]);
            },
            min: function (value, element, param) {
                return this.optional(element) || value >= param;
            },
            max: function (value, element, param) {
                return this.optional(element) || value <= param;
            },
            range: function (value, element, param) {
                return this.optional(element) || (value >= param[0] && value <= param[1]);
            },
            email: function (value, element) {
                return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
            },
            url: function (value, element) {
                return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
            },
            date: function (value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
            },
            dateISO: function (value, element) {
                return this.optional(element) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value);
            },
            number: function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value);
            },
            digits: function (value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },
            creditcard: function (value, element) {
                if (this.optional(element)) return "dependency-mismatch";
                if (/[^0-9-]+/.test(value)) return false;
                var nCheck = 0,
                    nDigit = 0,
                    bEven = false;
                value = value.replace(/\D/g, "");
                for (var n = value.length - 1; n >= 0; n--) {
                    var cDigit = value.charAt(n);
                    var nDigit = parseInt(cDigit, 10);
                    if (bEven) {
                        if ((nDigit *= 2) > 9) nDigit -= 9;
                    }
                    nCheck += nDigit;
                    bEven = !bEven;
                }
                return (nCheck % 10) == 0;
            },
            accept: function (value, element, param) {
                param = typeof param == "string" ? param.replace(/,/g, '|') : "png|jpe?g|gif";
                return this.optional(element) || value.match(new RegExp(".(" + param + ")$", "i"));
            },
            equalTo: function (value, element, param) {
                var target = $(param).unbind(".validate-equalTo").bind("blur.validate-equalTo", function () {
                    $(element).valid();
                });
                return value == target.val();
            }
        }
    });
    $.format = $.validator.format;
})(jQuery);;
(function ($) {
    var ajax = $.ajax;
    var pendingRequests = {};
    $.ajax = function (settings) {
        settings = $.extend(settings, $.extend({}, $.ajaxSettings, settings));
        var port = settings.port;
        if (settings.mode == "abort") {
            if (pendingRequests[port]) {
                pendingRequests[port].abort();
            }
            return (pendingRequests[port] = ajax.apply(this, arguments));
        }
        return ajax.apply(this, arguments);
    };
})(jQuery);;
(function ($) {
    if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) {
        $.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function (original, fix) {
            $.event.special[fix] = {
                setup: function () {
                    this.addEventListener(original, handler, true);
                },
                teardown: function () {
                    this.removeEventListener(original, handler, true);
                },
                handler: function (e) {
                    arguments[0] = $.event.fix(e);
                    arguments[0].type = fix;
                    return $.event.handle.apply(this, arguments);
                }
            };

            function handler(e) {
                e = $.event.fix(e);
                e.type = fix;
                return $.event.handle.call(this, e);
            }
        });
    };
    $.extend($.fn, {
        validateDelegate: function (delegate, type, handler) {
            return this.bind(type, function (event) {
                var target = $(event.target);
                if (target.is(delegate)) {
                    return handler.apply(target, arguments);
                }
            });
        }
    });
})(jQuery);
var swfobject = function () {
        var UNDEF = "undefined",
            OBJECT = "object",
            SHOCKWAVE_FLASH = "Shockwave Flash",
            SHOCKWAVE_FLASH_AX = "ShockwaveFlash.ShockwaveFlash",
            FLASH_MIME_TYPE = "application/x-shockwave-flash",
            EXPRESS_INSTALL_ID = "SWFObjectExprInst",
            ON_READY_STATE_CHANGE = "onreadystatechange",
            win = window,
            doc = document,
            nav = navigator,
            plugin = false,
            domLoadFnArr = [main],
            regObjArr = [],
            objIdArr = [],
            listenersArr = [],
            storedAltContent, storedAltContentId, storedCallbackFn, storedCallbackObj, isDomLoaded = false,
            isExpressInstallActive = false,
            dynamicStylesheet, dynamicStylesheetMedia, autoHideShow = true,
            ua = function () {
                var w3cdom = typeof doc.getElementById != UNDEF && typeof doc.getElementsByTagName != UNDEF && typeof doc.createElement != UNDEF,
                    u = nav.userAgent.toLowerCase(),
                    p = nav.platform.toLowerCase(),
                    windows = p ? /win/.test(p) : /win/.test(u),
                    mac = p ? /mac/.test(p) : /mac/.test(u),
                    webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false,
                    ie = !+"\v1",
                    playerVersion = [0, 0, 0],
                    d = null;
                if (typeof nav.plugins != UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] == OBJECT) {
                    d = nav.plugins[SHOCKWAVE_FLASH].description;
                    if (d && !(typeof nav.mimeTypes != UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && !nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) {
                        plugin = true;
                        ie = false;
                        d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                        playerVersion[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10);
                        playerVersion[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                        playerVersion[2] = /[a-zA-Z]/.test(d) ? parseInt(d.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0;
                    }
                } else if (typeof win.ActiveXObject != UNDEF) {
                    try {
                        var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);
                        if (a) {
                            d = a.GetVariable("$version");
                            if (d) {
                                ie = true;
                                d = d.split(" ")[1].split(",");
                                playerVersion = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
                            }
                        }
                    } catch (e) {}
                }
                return {
                    w3: w3cdom,
                    pv: playerVersion,
                    wk: webkit,
                    ie: ie,
                    win: windows,
                    mac: mac
                };
            }(),
            onDomLoad = function () {
                if (!ua.w3) {
                    return;
                }
                if ((typeof doc.readyState != UNDEF && doc.readyState == "complete") || (typeof doc.readyState == UNDEF && (doc.getElementsByTagName("body")[0] || doc.body))) {
                    callDomLoadFunctions();
                }
                if (!isDomLoaded) {
                    if (typeof doc.addEventListener != UNDEF) {
                        doc.addEventListener("DOMContentLoaded", callDomLoadFunctions, false);
                    }
                    if (ua.ie && ua.win) {
                        doc.attachEvent(ON_READY_STATE_CHANGE, function () {
                            if (doc.readyState == "complete") {
                                doc.detachEvent(ON_READY_STATE_CHANGE, arguments.callee);
                                callDomLoadFunctions();
                            }
                        });
                        if (win == top) {
                            (function () {
                                if (isDomLoaded) {
                                    return;
                                }
                                try {
                                    doc.documentElement.doScroll("left");
                                } catch (e) {
                                    setTimeout(arguments.callee, 0);
                                    return;
                                }
                                callDomLoadFunctions();
                            })();
                        }
                    }
                    if (ua.wk) {
                        (function () {
                            if (isDomLoaded) {
                                return;
                            }
                            if (!/loaded|complete/.test(doc.readyState)) {
                                setTimeout(arguments.callee, 0);
                                return;
                            }
                            callDomLoadFunctions();
                        })();
                    }
                    addLoadEvent(callDomLoadFunctions);
                }
            }();

        function callDomLoadFunctions() {
            if (isDomLoaded) {
                return;
            }
            try {
                var t = doc.getElementsByTagName("body")[0].appendChild(createElement("span"));
                t.parentNode.removeChild(t);
            } catch (e) {
                return;
            }
            isDomLoaded = true;
            var dl = domLoadFnArr.length;
            for (var i = 0; i < dl; i++) {
                domLoadFnArr[i]();
            }
        }

        function addDomLoadEvent(fn) {
            if (isDomLoaded) {
                fn();
            } else {
                domLoadFnArr[domLoadFnArr.length] = fn;
            }
        }

        function addLoadEvent(fn) {
            if (typeof win.addEventListener != UNDEF) {
                win.addEventListener("load", fn, false);
            } else if (typeof doc.addEventListener != UNDEF) {
                doc.addEventListener("load", fn, false);
            } else if (typeof win.attachEvent != UNDEF) {
                addListener(win, "onload", fn);
            } else if (typeof win.onload == "function") {
                var fnOld = win.onload;
                win.onload = function () {
                    fnOld();
                    fn();
                };
            } else {
                win.onload = fn;
            }
        }

        function main() {
            if (plugin) {
                testPlayerVersion();
            } else {
                matchVersions();
            }
        }

        function testPlayerVersion() {
            var b = doc.getElementsByTagName("body")[0];
            var o = createElement(OBJECT);
            o.setAttribute("type", FLASH_MIME_TYPE);
            var t = b.appendChild(o);
            if (t) {
                var counter = 0;
                (function () {
                    if (typeof t.GetVariable != UNDEF) {
                        var d = t.GetVariable("$version");
                        if (d) {
                            d = d.split(" ")[1].split(",");
                            ua.pv = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
                        }
                    } else if (counter < 10) {
                        counter++;
                        setTimeout(arguments.callee, 10);
                        return;
                    }
                    b.removeChild(o);
                    t = null;
                    matchVersions();
                })();
            } else {
                matchVersions();
            }
        }

        function matchVersions() {
            var rl = regObjArr.length;
            if (rl > 0) {
                for (var i = 0; i < rl; i++) {
                    var id = regObjArr[i].id;
                    var cb = regObjArr[i].callbackFn;
                    var cbObj = {
                        success: false,
                        id: id
                    };
                    if (ua.pv[0] > 0) {
                        var obj = getElementById(id);
                        if (obj) {
                            if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) {
                                setVisibility(id, true);
                                if (cb) {
                                    cbObj.success = true;
                                    cbObj.ref = getObjectById(id);
                                    cb(cbObj);
                                }
                            } else if (regObjArr[i].expressInstall && canExpressInstall()) {
                                var att = {};
                                att.data = regObjArr[i].expressInstall;
                                att.width = obj.getAttribute("width") || "0";
                                att.height = obj.getAttribute("height") || "0";
                                if (obj.getAttribute("class")) {
                                    att.styleclass = obj.getAttribute("class");
                                }
                                if (obj.getAttribute("align")) {
                                    att.align = obj.getAttribute("align");
                                }
                                var par = {};
                                var p = obj.getElementsByTagName("param");
                                var pl = p.length;
                                for (var j = 0; j < pl; j++) {
                                    if (p[j].getAttribute("name").toLowerCase() != "movie") {
                                        par[p[j].getAttribute("name")] = p[j].getAttribute("value");
                                    }
                                }
                                showExpressInstall(att, par, id, cb);
                            } else {
                                displayAltContent(obj);
                                if (cb) {
                                    cb(cbObj);
                                }
                            }
                        }
                    } else {
                        setVisibility(id, true);
                        if (cb) {
                            var o = getObjectById(id);
                            if (o && typeof o.SetVariable != UNDEF) {
                                cbObj.success = true;
                                cbObj.ref = o;
                            }
                            cb(cbObj);
                        }
                    }
                }
            }
        }

        function getObjectById(objectIdStr) {
            var r = null;
            var o = getElementById(objectIdStr);
            if (o && o.nodeName == "OBJECT") {
                if (typeof o.SetVariable != UNDEF) {
                    r = o;
                } else {
                    var n = o.getElementsByTagName(OBJECT)[0];
                    if (n) {
                        r = n;
                    }
                }
            }
            return r;
        }

        function canExpressInstall() {
            return !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);
        }

        function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {
            isExpressInstallActive = true;
            storedCallbackFn = callbackFn || null;
            storedCallbackObj = {
                success: false,
                id: replaceElemIdStr
            };
            var obj = getElementById(replaceElemIdStr);
            if (obj) {
                if (obj.nodeName == "OBJECT") {
                    storedAltContent = abstractAltContent(obj);
                    storedAltContentId = null;
                } else {
                    storedAltContent = obj;
                    storedAltContentId = replaceElemIdStr;
                }
                att.id = EXPRESS_INSTALL_ID;
                if (typeof att.width == UNDEF || (!/%$/.test(att.width) && parseInt(att.width, 10) < 310)) {
                    att.width = "310";
                }
                if (typeof att.height == UNDEF || (!/%$/.test(att.height) && parseInt(att.height, 10) < 137)) {
                    att.height = "137";
                }
                doc.title = doc.title.slice(0, 47) + " - Flash Player Installation";
                var pt = ua.ie && ua.win ? "ActiveX" : "PlugIn",
                    fv = "MMredirectURL=" + win.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + pt + "&MMdoctitle=" + doc.title;
                if (typeof par.flashvars != UNDEF) {
                    par.flashvars += "&" + fv;
                } else {
                    par.flashvars = fv;
                }
                if (ua.ie && ua.win && obj.readyState != 4) {
                    var newObj = createElement("div");
                    replaceElemIdStr += "SWFObjectNew";
                    newObj.setAttribute("id", replaceElemIdStr);
                    obj.parentNode.insertBefore(newObj, obj);
                    obj.style.display = "none";
                    (function () {
                        if (obj.readyState == 4) {
                            obj.parentNode.removeChild(obj);
                        } else {
                            setTimeout(arguments.callee, 10);
                        }
                    })();
                }
                createSWF(att, par, replaceElemIdStr);
            }
        }

        function displayAltContent(obj) {
            if (ua.ie && ua.win && obj.readyState != 4) {
                var el = createElement("div");
                obj.parentNode.insertBefore(el, obj);
                el.parentNode.replaceChild(abstractAltContent(obj), el);
                obj.style.display = "none";
                (function () {
                    if (obj.readyState == 4) {
                        obj.parentNode.removeChild(obj);
                    } else {
                        setTimeout(arguments.callee, 10);
                    }
                })();
            } else {
                obj.parentNode.replaceChild(abstractAltContent(obj), obj);
            }
        }

        function abstractAltContent(obj) {
            var ac = createElement("div");
            if (ua.win && ua.ie) {
                ac.innerHTML = obj.innerHTML;
            } else {
                var nestedObj = obj.getElementsByTagName(OBJECT)[0];
                if (nestedObj) {
                    var c = nestedObj.childNodes;
                    if (c) {
                        var cl = c.length;
                        for (var i = 0; i < cl; i++) {
                            if (!(c[i].nodeType == 1 && c[i].nodeName == "PARAM") && !(c[i].nodeType == 8)) {
                                ac.appendChild(c[i].cloneNode(true));
                            }
                        }
                    }
                }
            }
            return ac;
        }

        function createSWF(attObj, parObj, id) {
            var r, el = getElementById(id);
            if (ua.wk && ua.wk < 312) {
                return r;
            }
            if (el) {
                if (typeof attObj.id == UNDEF) {
                    attObj.id = id;
                }
                if (ua.ie && ua.win) {
                    var att = "";
                    for (var i in attObj) {
                        if (attObj[i] != Object.prototype[i]) {
                            if (i.toLowerCase() == "data") {
                                parObj.movie = attObj[i];
                            } else if (i.toLowerCase() == "styleclass") {
                                att += ' class="' + attObj[i] + '"';
                            } else if (i.toLowerCase() != "classid") {
                                att += ' ' + i + '="' + attObj[i] + '"';
                            }
                        }
                    }
                    var par = "";
                    for (var j in parObj) {
                        if (parObj[j] != Object.prototype[j]) {
                            par += '<param name="' + j + '" value="' + parObj[j] + '" />';
                        }
                    }
                    el.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + att + '>' + par + '</object>';
                    objIdArr[objIdArr.length] = attObj.id;
                    r = getElementById(attObj.id);
                } else {
                    var o = createElement(OBJECT);
                    o.setAttribute("type", FLASH_MIME_TYPE);
                    for (var m in attObj) {
                        if (attObj[m] != Object.prototype[m]) {
                            if (m.toLowerCase() == "styleclass") {
                                o.setAttribute("class", attObj[m]);
                            } else if (m.toLowerCase() != "classid") {
                                o.setAttribute(m, attObj[m]);
                            }
                        }
                    }
                    for (var n in parObj) {
                        if (parObj[n] != Object.prototype[n] && n.toLowerCase() != "movie") {
                            createObjParam(o, n, parObj[n]);
                        }
                    }
                    el.parentNode.replaceChild(o, el);
                    r = o;
                }
            }
            return r;
        }

        function createObjParam(el, pName, pValue) {
            var p = createElement("param");
            p.setAttribute("name", pName);
            p.setAttribute("value", pValue);
            el.appendChild(p);
        }

        function removeSWF(id) {
            var obj = getElementById(id);
            if (obj && obj.nodeName == "OBJECT") {
                if (ua.ie && ua.win) {
                    obj.style.display = "none";
                    (function () {
                        if (obj.readyState == 4) {
                            removeObjectInIE(id);
                        } else {
                            setTimeout(arguments.callee, 10);
                        }
                    })();
                } else {
                    obj.parentNode.removeChild(obj);
                }
            }
        }

        function removeObjectInIE(id) {
            var obj = getElementById(id);
            if (obj) {
                for (var i in obj) {
                    if (typeof obj[i] == "function") {
                        obj[i] = null;
                    }
                }
                obj.parentNode.removeChild(obj);
            }
        }

        function getElementById(id) {
            var el = null;
            try {
                el = doc.getElementById(id);
            } catch (e) {}
            return el;
        }

        function createElement(el) {
            return doc.createElement(el);
        }

        function addListener(target, eventType, fn) {
            target.attachEvent(eventType, fn);
            listenersArr[listenersArr.length] = [target, eventType, fn];
        }

        function hasPlayerVersion(rv) {
            var pv = ua.pv,
                v = rv.split(".");
            v[0] = parseInt(v[0], 10);
            v[1] = parseInt(v[1], 10) || 0;
            v[2] = parseInt(v[2], 10) || 0;
            return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;
        }

        function createCSS(sel, decl, media, newStyle) {
            if (ua.ie && ua.mac) {
                return;
            }
            var h = doc.getElementsByTagName("head")[0];
            if (!h) {
                return;
            }
            var m = (media && typeof media == "string") ? media : "screen";
            if (newStyle) {
                dynamicStylesheet = null;
                dynamicStylesheetMedia = null;
            }
            if (!dynamicStylesheet || dynamicStylesheetMedia != m) {
                var s = createElement("style");
                s.setAttribute("type", "text/css");
                s.setAttribute("media", m);
                dynamicStylesheet = h.appendChild(s);
                if (ua.ie && ua.win && typeof doc.styleSheets != UNDEF && doc.styleSheets.length > 0) {
                    dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];
                }
                dynamicStylesheetMedia = m;
            }
            if (ua.ie && ua.win) {
                if (dynamicStylesheet && typeof dynamicStylesheet.addRule == OBJECT) {
                    dynamicStylesheet.addRule(sel, decl);
                }
            } else {
                if (dynamicStylesheet && typeof doc.createTextNode != UNDEF) {
                    dynamicStylesheet.appendChild(doc.createTextNode(sel + " {" + decl + "}"));
                }
            }
        }

        function setVisibility(id, isVisible) {
            if (!autoHideShow) {
                return;
            }
            var v = isVisible ? "visible" : "hidden";
            if (isDomLoaded && getElementById(id)) {
                getElementById(id).style.visibility = v;
            } else {
                createCSS("#" + id, "visibility:" + v);
            }
        }

        function urlEncodeIfNecessary(s) {
            var regex = /[\\\"<>\.;]/;
            var hasBadChars = regex.exec(s) != null;
            return hasBadChars && typeof encodeURIComponent != UNDEF ? encodeURIComponent(s) : s;
        }
        var cleanup = function () {
                if (ua.ie && ua.win) {
                    window.attachEvent("onunload", function () {
                        var ll = listenersArr.length;
                        for (var i = 0; i < ll; i++) {
                            listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);
                        }
                        var il = objIdArr.length;
                        for (var j = 0; j < il; j++) {
                            removeSWF(objIdArr[j]);
                        }
                        for (var k in ua) {
                            ua[k] = null;
                        }
                        ua = null;
                        for (var l in swfobject) {
                            swfobject[l] = null;
                        }
                        swfobject = null;
                    });
                }
            }();
        return {
            registerObject: function (objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {
                if (ua.w3 && objectIdStr && swfVersionStr) {
                    var regObj = {};
                    regObj.id = objectIdStr;
                    regObj.swfVersion = swfVersionStr;
                    regObj.expressInstall = xiSwfUrlStr;
                    regObj.callbackFn = callbackFn;
                    regObjArr[regObjArr.length] = regObj;
                    setVisibility(objectIdStr, false);
                } else if (callbackFn) {
                    callbackFn({
                        success: false,
                        id: objectIdStr
                    });
                }
            },
            getObjectById: function (objectIdStr) {
                if (ua.w3) {
                    return getObjectById(objectIdStr);
                }
            },
            embedSWF: function (swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj, callbackFn) {
                var callbackObj = {
                    success: false,
                    id: replaceElemIdStr
                };
                if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {
                    setVisibility(replaceElemIdStr, false);
                    addDomLoadEvent(function () {
                        widthStr += "";
                        heightStr += "";
                        var att = {};
                        if (attObj && typeof attObj === OBJECT) {
                            for (var i in attObj) {
                                att[i] = attObj[i];
                            }
                        }
                        att.data = swfUrlStr;
                        att.width = widthStr;
                        att.height = heightStr;
                        var par = {};
                        if (parObj && typeof parObj === OBJECT) {
                            for (var j in parObj) {
                                par[j] = parObj[j];
                            }
                        }
                        if (flashvarsObj && typeof flashvarsObj === OBJECT) {
                            for (var k in flashvarsObj) {
                                if (typeof par.flashvars != UNDEF) {
                                    par.flashvars += "&" + k + "=" + flashvarsObj[k];
                                } else {
                                    par.flashvars = k + "=" + flashvarsObj[k];
                                }
                            }
                        }
                        if (hasPlayerVersion(swfVersionStr)) {
                            var obj = createSWF(att, par, replaceElemIdStr);
                            if (att.id == replaceElemIdStr) {
                                setVisibility(replaceElemIdStr, true);
                            }
                            callbackObj.success = true;
                            callbackObj.ref = obj;
                        } else if (xiSwfUrlStr && canExpressInstall()) {
                            att.data = xiSwfUrlStr;
                            showExpressInstall(att, par, replaceElemIdStr, callbackFn);
                            return;
                        } else {
                            setVisibility(replaceElemIdStr, true);
                        }
                        if (callbackFn) {
                            callbackFn(callbackObj);
                        }
                    });
                } else if (callbackFn) {
                    callbackFn(callbackObj);
                }
            },
            switchOffAutoHideShow: function () {
                autoHideShow = false;
            },
            ua: ua,
            getFlashPlayerVersion: function () {
                return {
                    major: ua.pv[0],
                    minor: ua.pv[1],
                    release: ua.pv[2]
                };
            },
            hasFlashPlayerVersion: hasPlayerVersion,
            createSWF: function (attObj, parObj, replaceElemIdStr) {
                if (ua.w3) {
                    return createSWF(attObj, parObj, replaceElemIdStr);
                } else {
                    return undefined;
                }
            },
            showExpressInstall: function (att, par, replaceElemIdStr, callbackFn) {
                if (ua.w3 && canExpressInstall()) {
                    showExpressInstall(att, par, replaceElemIdStr, callbackFn);
                }
            },
            removeSWF: function (objElemIdStr) {
                if (ua.w3) {
                    removeSWF(objElemIdStr);
                }
            },
            createCSS: function (selStr, declStr, mediaStr, newStyleBoolean) {
                if (ua.w3) {
                    createCSS(selStr, declStr, mediaStr, newStyleBoolean);
                }
            },
            addDomLoadEvent: addDomLoadEvent,
            addLoadEvent: addLoadEvent,
            getQueryParamValue: function (param) {
                var q = doc.location.search || doc.location.hash;
                if (q) {
                    if (/\?/.test(q)) {
                        q = q.split("?")[1];
                    }
                    if (param == null) {
                        return urlEncodeIfNecessary(q);
                    }
                    var pairs = q.split("&");
                    for (var i = 0; i < pairs.length; i++) {
                        if (pairs[i].substring(0, pairs[i].indexOf("=")) == param) {
                            return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf("=") + 1)));
                        }
                    }
                }
                return "";
            },
            expressInstallCallback: function () {
                if (isExpressInstallActive) {
                    var obj = getElementById(EXPRESS_INSTALL_ID);
                    if (obj && storedAltContent) {
                        obj.parentNode.replaceChild(storedAltContent, obj);
                        if (storedAltContentId) {
                            setVisibility(storedAltContentId, true);
                            if (ua.ie && ua.win) {
                                storedAltContent.style.display = "block";
                            }
                        }
                        if (storedCallbackFn) {
                            storedCallbackFn(storedCallbackObj);
                        }
                    }
                    isExpressInstallActive = false;
                }
            }
        };
    }();
var s = (function (window, undefined) {
    var _console = {
        log: [],
        warn: [],
        error: []
    };
    if (Array.prototype['last'] === undefined) {
        Array.prototype.last = function () {
            if (this.length > 0) {
                return this[this.length - 1];
            }
        }
    };
    if (!Array.prototype.filter) {
        Array.prototype.filter = function (fun) {
            if (typeof fun != "function") {
                throw new TypeError("Invalid Argument, Expected Function, got " + typeof fun);
            }
            var len = this.length,
                res = new Array(),
                thisp = arguments[1];
            for (var i = 0; i < len; i++) {
                if (i in this) {
                    var val = this[i];
                    if (fun.call(thisp, val, i, this)) {
                        res.push(val);
                    }
                }
            }
            return res;
        };
    };
    if (typeof Object.create !== 'function') {
        Object.create = function (o) {
            function F() {}
            F.prototype = o;
            return new F();
        };
    };
    if (typeof Array.prototype.upsert !== 'function') {
        Array.prototype.upsert = function (obj, key) {
            if (key === undefined) return;
            for (i in this) {
                if (this[i][key] == obj[key]) {
                    this[i] = $.extend({}, this[i], obj);
                    return;
                }
            }
            this.push(obj);
        };
    };
    window['debug'] = function () {
        var args = arguments;
        if (Array.prototype['slice'] !== undefined) {
            args = Array.prototype.slice.call(arguments, 0);
        } else {
            for (var i in arguments) {
                if (arguments.hasOwnProperty(i) && typeof arguments[i] !== 'function') {
                    args.push(arguments[i]);
                }
            }
        }
        var console_type = 'log';
        if (['warn', 'error', 'log'].indexOf(args.last()) > -1) {
            console_type = args.pop();
        };
        args = [(new Date().toUTCString())].concat(args);
        if (window['console'] !== undefined) {
            for (k in args) {
                if (args.hasOwnProperty(k)) {
                    if (true) {
                        window['console'][console_type](args[k]);
                    } else {
                        _console[console_type].push(args[k]);
                    }
                }
            }
        } else {
            _console[console_type] = _console[console_type].concat(args);
        }
    }
    return {
        console: _console
    }
})(window);

function error() {
    args = Array.prototype.slice.call(arguments, 0).concat(['error']);
    debug.call(args);
};

function isset(variable) {
    return (typeof (window[variable]) !== 'undefined');
}

function showError(error) { /*if(error){alert(error);try{console.log(error);}catch(err){}}*/
}

function checkTime() {
    var serverdate = false,
        clientdate = false;
    $.ajax({
        async: false,
        cache: false,
        type: 'get',
        url: '/getajax/getTime/',
        success: function (time) {
            if (time) {
                serverdate = time;
                clientdate = new Date().getTime() / 1000;
            }
        }
    });
    setGlobal('serverdate', serverdate);
    setGlobal('clientdate', clientdate);
    diff = Math.abs(clientdate - serverdate);
    if (diff > 3600 * 2) {
        return false;
    }
    return true;
}
$.plugin = function (name, object) {
    $.fn[name] = function (options) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.each(function () {
            var instance = $.data(this, name);
            if (instance) {
                instance[options].apply(instance, args);
            } else {
                instance = $.data(this, name, Object.create(object).init(options, this));
            }
        });
    }
}
$.fn.scramble = function (op, options) {
    if (typeof (op) === 'object') {
        options = $.extend({}, op);
        op = 'start';
    }
    var endval = 0,
        digits = 2,
        decimal = 2,
        length = 700,
        interval = 70,
        step = 0;
    if (options) {
        if (options.endval !== undefined) {
            endval = new Number(options.endval);
        }
        if (options.digits !== undefined) {
            digits = parseInt(options.digits);
        }
        if (options.decimal !== undefined) {
            decimal = parseInt(options.decimal);
        }
        if (options.length !== undefined) {
            length = parseInt(options.length);
        }
    }
    var $this = $(this);
    switch (op) {
    case 'step':
        return $this.each(function () {
            var step_num = parseInt($this.data('scramble.step')) || 0;
            if ((step_num * interval) < length) {
                setTimeout(function () {
                    var number = new Number(Math.random() * Math.pow(10, digits));
                    if (decimal > 0) {
                        number = number.toFixed(decimal);
                    } else {
                        number = Math.round(number);
                    }
                    if (number.delimit) {
                        number = number.delimit();
                    }
                    $this.data('scramble.step', ++step_num).text(number).scramble('step', options);
                }, interval);
            } else {
                var number = new Number(endval);
                if (decimal > 0) {
                    number = number.toFixed(decimal);
                } else {
                    number = Math.round(number);
                }
                if (number.delimit) {
                    number = number.delimit();
                }
                $this.text(number).data('scramble.step', 0);
            }
        });
        break;
    case 'start':
        return $this.scramble('step', options);
    default:
        break;
    }
    return $this;
};

function getVar(var_name) {
    return getGlobal(var_name);
}

function setGlobal(key, value) {
    try {
        if (REQUEST_DATA === undefined) {
            throw (RM_Exception.GLOBAL_SPACE_UNDEFINED);
        }
        if (REQUEST_DATA.hasOwnProperty(key)) {
            error('setGlobal, overriding existing key ' + key + ': ' + REQUEST_DATA[key] + ' with ' + value);
        }
        REQUEST_DATA[key] = value;
    } catch (err) {
        error('setGlobal:: error setting global value for key ' + key + ': ' + err);
    }
}

function getGlobal(key) {
    try {
        if (REQUEST_DATA === undefined || !REQUEST_DATA.hasOwnProperty(key)) {
            error('getGlobal::unable to get key ' + key);
            return;
        }
        return REQUEST_DATA[key];
    } catch (err) {
        error('getGlobal:: global variable possibly undefined: ' + err);
    }
}
var Environment = (function () {
    var ENV_DEVELOPMENT = 'development';
    var ENV_TESTING = 'testing';
    var ENV_STAGING = 'staging';
    var ENV_PRODUCTION = 'production';
    return {
        isDevelopment: function () {
            return getGlobal('env') === ENV_DEVELOPMENT;
        },
        isTesting: function () {
            return getGlobal('env') === ENV_TESTING;
        },
        isStaging: function () {
            return getGlobal('env') === ENV_STAGING;
        },
        isProduction: function () {
            return getGlobal('env') === ENV_PRODUCTION;
        },
        getHost: function () {
            return getGlobal('host');
        }
    };
})();
var RM_Exception = {
    VAR_NOT_FOUND: -1
};
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (value) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] == value) return i;
        }
        return -1;
    };
}
if (!Array.prototype.indexOfProp) {
    Array.prototype.indexOfProp = function (key, value) {
        for (var i = 0, elem; elem = this[i]; i++) {
            if (elem[key]) {
                if (typeof (value) == 'number' && parseInt(elem[key] == value)) {
                    return i;
                } else if (elem[key] == value) {
                    return i;
                }
            }
        }
        return -1;
    };
}
if (!String.prototype.trim) {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, "");
    };
}
if (!String.prototype.addslashes) {
    String.prototype.addslashes = function () {
        return this.replace(/\\/g, '\\\\').replace(/\'/g, '\\\'').replace(/\"/g, '\\"').replace(/\0/g, '\\0');
    }
}
if (!String.prototype.camelToHyphen) {
    String.prototype.camelToHyphen = function () {
        var search = new RegExp("[A-Z]", "g");
        var matches = search.exec(this);
        if (matches) {
            for (var i = 0; i < matches.length; i++) {
                return this.replace(matches[i], '-' + matches[i].toLowerCase());
            }
        }
        return this;
    };
}
if (!String.prototype.hyphenToCamel) {
    String.prototype.hyphenToCamel = function () {
        var search = new RegExp("-[a-z]", "g");
        var matches = search.exec(this);
        if (matches) {
            for (var i = 0; i < matches.length; i++) {
                return this.replace(matches[i], matches[i].toUpperCase().substr(1));
            }
        }
        return this;
    };
}
if (!Number.prototype.delimit) {
    Number.prototype.delimit = function (separator, chunk_size) {
        if (separator === undefined) {
            separator = ',';
        }
        if (chunk_size === undefined) {
            chunk_size = 3;
        }
        var result = [];
        var num = this.valueOf();
        if (num < Math.pow(10, chunk_size)) {
            return '' + num;
        }
        var n = '';
        n += num;
        narr = n.split('');
        while (narr.length > 0) {
            var x = (narr.length % chunk_size > 0) ? narr.length % chunk_size : chunk_size;
            result.push(narr.splice(0, x).join(''));
        }
        return result.join(separator);
    }
}
var LoginService = (function () {
    dodebug('INITIALIZING LOGIN SERVICE');
    var _callbacks = {
        success: [],
        error: []
    };
    if (!Environment.isDevelopment()) {
        $(function () {
            try {
                dodebug('initializing FB library, appId = ' + getGlobal('fbKey'));
                FB.init({
                    appId: getGlobal('fbKey'),
                    status: true,
                    cookie: true,
                    xfbml: true,
                    channelUrl: Environment.getHost() + '/channel.html'
                });
                dodebug('subscribing to logout...');
                FB.Event.subscribe('auth.logout', function (response) {
                    checkValidLogout();
                });
                dodebug('logout event subscribed.');
            } catch (err) {
                dodebug("FB::auth.logout init, error calling FB library: " + err);
                showError("We couldn't establish a connection to Facebook for verifying your account, please try reloading the page." + err);
            }
        });
    }
    var runSuccessCallbacks = function () {
            var success_handler;
            for (var i = 0; i < _callbacks.success.length; i++) {
                success_handler = _callbacks.success[i];
                success_handler.callback.call(document, success_handler.args);
            }
        };
    var runErrorCallbacks = function () {
            var error_handler;
            for (var i = 0; i < _callbacks.error.length; i++) {
                error_handler = _callbacks.error[i];
                error_handler.callback.call(document, error_handler.args);
            }
        };
    var doLogin = function () {
            if (Environment.isDevelopment()) {
                runSuccessCallbacks();
            } else {
                var loggedIn = false;
                dodebug('LoginService::doLogin, not on development, checking FB session...');
                try {
                    FB.getLoginStatus(function (response) {
                        dodebug('LoginService::doLogin, got FB session callback, making sure user time ok...');
                        if (checkTime()) {
                            dodebug('LoginService::doLogin, user time is OK, checking FB session response...');
                            if (response.session) {
                                dodebug('LoginService::doLogin, user is logged in!');
                                return runSuccessCallbacks();
                            } else {
                                dodebug('LoginService::doLogin, no session response, bringing up login...');
                                FB.login(function (response) {
                                    if (response.session) {
                                        return runSuccessCallbacks();
                                    } else {
                                        return runErrorCallbacks();
                                    }
                                }, {});
                            }
                        } else {
                            showError("The time on your computer's clock is not what we expected.\nAre you sure it's set to the current date and time?\n\nPlease correct this and restart your browser to avoid any login troubles :)");
                            return runErrorCallbacks();
                        }
                    });
                } catch (err) {
                    showError("We couldn't establish a connection to Facebook for verifying your account, please try again...");
                    return runErrorCallbacks();
                }
            }
        };
    var checkValidLogout = function () {
            dodebug('Checking for valid FB logout...');
            try {
                FB.getLoginStatus(function (response) {
                    dodebug('checking valid session...');
                    if (response.session) {
                        dodebug('valid session found!');
                        return false;
                    }
                    dodebug('logging out...');
                    doLogout();
                });
            } catch (err) {
                dodebug("LoginService::checkValidLogout, error calling FB library: " + err);
            }
        };
    var doLogout = function () {
            //showError("You have been logged out. If you did not log out of Facebook, you probably have third-party cookies disabled.\n\nPlease enable third party cookies in your web browser in order for " + getGlobal('vendor') + " to be able to communicate with Facebook.");
            //window.location = "/logout";
        };
    return {
        addLoginCallback: function (callback, args, type) {
            var _type = 'success';
            if (type !== undefined) {
                _type = type;
            }
            _callbacks[_type].push({
                callback: callback,
                args: args
            });
        },
        login: function () {
            dodebug('LoginService::login, trying login...');
            doLogin();
        }
    };
})();
$(function () {
    dodebug('initializing ready-hooks');
    LoginService.addLoginCallback(function () {
        window.location = '/edit';
    });
});
$(function () {
    dodebug('common/header:: init');
    $("#logout-button").css({
        height: 0,
        paddingTop: 0,
        paddingBottom: 0
    }).bind('click', function () {
        logoutAndRedirect();
        return false;
    });
    $("#user-login").bind('mouseenter', function (event) {
        $(event.currentTarget).data("hovering", true);
        setTimeout(function () {
            if ($(event.currentTarget).data("hovering")) $("#logout-button").stop().animate({
                height: '1em',
                paddingTop: '8px',
                paddingBottom: '8px'
            }, 250);
        }, 500);
    }).bind('mouseleave', function (event) {
        var login_pane = $(event.currentTarget);
        login_pane.data("hovering", false);
        setTimeout(function () {
            if (!login_pane.data("hovering")) $("#logout-button").stop().animate({
                height: 0,
                paddingTop: 0,
                paddingBottom: 0
            }, 250);
        }, 500);
    });
});

function logoutAndRedirect() {
    if (Environment.isDevelopment()) {
        //window.location = "/logout";
    } else {
        if (confirm('This will log you out from both Facebook and ' + getGlobal('vendor') + '.')) {
            FB.logout(function (response) {
                //window.location = "/logout";
            });
        }
    }
    return false;
}
$(function () {
    dodebug('templates/common: init');
    $('.hidden').hide().removeClass('hidden');
    $('a.help').live('click', function (event) {
        var msg = $(event.currentTarget).siblings('.help-message');
        var offset = msg.hasClass('right') ? ($(event.currentTarget).position().left - 215) : ($(event.currentTarget).position().left - 100);
        var offsetY = msg.hasClass('right') ? ($(event.currentTarget).position().top + 30) : 0;
        msg.css({
            left: offset + 'px',
            top: offsetY + 'px'
        });
        msg.slideToggle();
        return false;
    });
    $('.help-message').live('click', function (event) {
        var msg = $(event.currentTarget);
        if (!msg.is(':hidden')) {
            msg.slideUp();
        }
        return false;
    });
    $('.help-message > p > a').live('click', function (event) {
        var msg = $(event.currentTarget);
        msg.preventDefault();
    });
    $(document).click(function (event) {
        $(event.currentTarget).find('.help-message').slideUp();
    });
    $('.hover-tip').live('mouseover mouseout mousemove', function (event) {
        switch (event.type) {
        case 'mouseover':
            $(event.currentTarget).data('hovering', true);
            var helpWindow = $(event.currentTarget).siblings('.hover-tip-window');
            helpWindow.css({
                top: (event.clientY + 15) + 'px',
                left: (event.clientX + 15) + 'px'
            });
            setTimeout(function () {
                if ($(event.currentTarget).data('hovering')) {
                    helpWindow.fadeIn('fast');
                }
            }, 350);
            break;
        case 'mouseout':
            $(event.currentTarget).data('hovering', false);
            var helpWindow = $(event.currentTarget).siblings('.hover-tip-window');
            helpWindow.fadeOut('fast');
            break;
        case 'mousemove':
            var helpWindow = $(event.currentTarget).siblings('.hover-tip-window');
            helpWindow.css({
                top: (event.clientY + 15) + 'px',
                left: (event.clientX + 15) + 'px'
            });
            break;
        default:
            break;
        }
    });
    $('.rm-collapsable').each(function () {
        var collapsableContainer = $(this);
        var collapsedContent = collapsableContainer.children('.rm-collapsable-content');
        if (collapsableContainer.hasClass('collapsed')) {
            collapsedContent.hide();
        }
        var collapsableControl = collapsableContainer.find('.rm-collapsable-control').first();
        collapsableControl.bind('click', function (event) {
            if (collapsableContainer.hasClass('collapsed')) {
                collapsedContent.slideDown();
                collapsableContainer.removeClass('collapsed');
            } else {
                collapsedContent.slideUp();
                collapsableContainer.addClass('collapsed');
            }
        });
    });
    if (!Environment.isDevelopment()) {
        var host = getGlobal('host');
        loadFanbox(host);
        var ga = getGlobal('ga');
        loadGoogleAnalytics();
        loadChartbeat();
    }
});

function loadGoogleAnalytics() {
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('async', 'true');
    e.setAttribute('src', (('https:' == document.location.protocol) ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js');
    document.body.appendChild(e);
}

function loadChartbeat() {
    window._sf_endpt = (new Date()).getTime();
    var e = document.createElement('script');
    e.setAttribute('language', 'javascript');
    e.setAttribute('type', 'text/javascript');
    e.setAttribute('async', 'true');
    e.setAttribute('src', (("https:" == document.location.protocol) ? "https://s3.amazonaws.com/" : "http://") + "static.chartbeat.com/js/chartbeat.js");
    document.body.appendChild(e);
}

function loadFanbox(host) {
    try {
        var domTarget = document.getElementById("like-box");
        FB.XFBML.parse(domTarget);
    } catch (err) {}
}
$(function () {
    dodebug('widget/appearance:: init');
    var rmPageId = getGlobal('pageId');
    Saver.addSaveRule('rm-appearance-style', 'saveStyles.php', {
        rmPageId: rmPageId,
        styles: ':param.css',
        index: ':param.seq'
    });
    Saver.addSaveRule('banner-height', '/saveAjax/saveBannerHeight/', {
        rmPageId: rmPageId,
        height: ':param'
    });
    Saver.addSaveRule('disable-multi-banners', '/rest/style', {
        rmPageId: rmPageId
    }, 'PUT');
    Saver.addSaveRule('style-create', '/rest/style', {
        rmPageId: rmPageId,
        element: ':param.element',
        style: ':param.style',
        attributes: ':param.attributes',
        image: ':param.image',
        seq: ':param.seq'
    }, 'POST');
    Saver.addSaveRule('style-update', '/rest/style', {
        rmPageId: rmPageId,
        element: ':param.element',
        style: ':param.style'
    }, 'PUT');
    Saver.addSaveRule('style-reset', '/rest/style', {
        op: 'reset',
        rmPageId: rmPageId
    }, 'PUT');
    Saver.addSaveRule('style-reorder', '/rest/style', {
        op: 'reorder',
        rmPageId: rmPageId,
        element: ':param.element',
        oldPosition: ':param.oldPosition',
        newPosition: ':param.newPosition'
    }, 'PUT');
    Saver.addSaveRule('style-delete', '/rest/style', {
        rmPageId: rmPageId,
        element: ':param.element',
        index: ':param.index'
    }, 'DELETE');
    var cssEditor = new CSSEditWidget();
    $("#rm-content-launch").attr('href', '#launch-content').bind('click', {
        controller: this
    }, function (e) {
        $(e.currentTarget).siblings().removeClass("active").end().addClass("active");
        RMUIWidgetRelay.relayEvent(RMUIEvent.EDITOR_MODE_CHANGE, 'content');
        return false;
    });
    $('#rm-css-launch').removeClass('disabled').attr('href', '#launch-css').bind('click', function (event) {
        $(event.currentTarget).siblings().removeClass('active').end().addClass('active');
        RMUIWidgetRelay.relayEvent(RMUIEvent.EDITOR_MODE_CHANGE, 'css');
        return false;
    });
});
$(function () {
    dodebug('widget/date_schedule:: init');
    var bandId = getGlobal('pageId');
    var ms_per_day = (1000 * 60 * 60 * 24);
    var today = Math.floor((new Date()).getTime() / ms_per_day) * ms_per_day;
    Saver.addSaveRule('show-add', '/saveajax/addShow', {
        bandId: bandId,
        date: today,
        name: ':param.name',
        price: ':param.price',
        venueName: ':param.venue',
        city: ':param.city'
    });
    Saver.addSaveRule('show-remove', '/saveajax/removeShow', {
        bandId: bandId,
        showId: ':param'
    });
    Saver.addSaveRule('show-date', '/saveajax/updateShowDate', {
        bandId: bandId,
        showId: ':param.showId',
        date: ':param.date'
    });
    Saver.addSaveRule('show-city', '/saveajax/updateShowCity', {
        bandId: bandId,
        showId: ':param.showId',
        city: ':param.value'
    });
    Saver.addSaveRule('show-venue', '/saveajax/updateShowVenue', {
        bandId: bandId,
        showId: ':param.showId',
        venueName: ':param.value'
    });
    Saver.addSaveRule('show-venue-sonicliving', '/saveajax/updateShowVenue', {
        bandId: bandId,
        showId: ':param.showId',
        venueName: ':param.venueName',
        sonicLivingId: ':param.sonicLivingId',
        address: ':param.address',
        phone: ':param.phone',
        latitude: ':param.latitude',
        longitude: ':param.longitude',
        location: ':param.location'
    });
    Saver.addSaveRule('show-supporting', '/saveajax/updateShowSupportingAct', {
        bandId: bandId,
        showId: ':param.showId',
        bands: ':param.value'
    });

    Saver.addSaveRule('show-price', '/saveajax/updateShowPrice', {
        bandId: bandId,
        showId: ':param.showId',
        price: ':param.value'
    });
    Saver.addSaveRule('show-purchase-url', '/saveajax/updateShowPurchaseUrl', {
        bandId: bandId,
        showId: ':param.showId',
        purchaseUrl: ':param.value'
    });
    Saver.addSaveRule('artistdata-key', '/saveajax/getArtistDataKey', {
        bandId: bandId
    });
    var artist_data_modal = new ModalUtility($('#editor-pane-container'), true);
    $('#action-artistdata-connect').bind('click', function (event) {
        if (!artist_data_modal.hasContent()) {
            artist_data_modal.showDialog($('#artistdata-setup-modal').show().detach(), function () {
                $('#action-generate-key').one('click', function (event) {
                    dodebug('generating AD key...');
                    var generateButton = $(event.currentTarget);
                    generateButton.addClass('loading');
                    Saver.save('artistdata-key', '', {
                        success: function (data) {
                            var key = data.artistDataBandKey;
                            dodebug('fading out button!');
                            generateButton.fadeOut('fast', function () {
                                $(this).after('<p class="key-display">Your key is <strong>' + key + '</strong></p>');
                                $(this).remove();
                            });
                            RMUIWidgetRelay.relayEvent('artistdata-connect', key);
                        }
                    });
                });
            });
        } else {
            artist_data_modal.showDialog();
        }
        return false;
    });
    var _toursched = new TouringScheduleWidget($('#rm-tour-sched'), {
        date: today,
        prompts: {
            'show-date': 'When\'s the gig?',
            'show-venue': 'Venue name',
            'show-city': 'City',
            'show-supporting': 'Enter opening / supporting acts',
            'show-price': 'TBA'
        }
    });
});
$(function () {
    dodebug('widget/drop_down_pane:: init');
    var _context = $('#editor-main-hover-layer');
    var rmPageId = getGlobal('fanPageId');
    var bandId = getGlobal('pageId');
    Saver.addSaveRule('genreGroup', '/saveajax/saveGenreGroup/', {
        bandId: bandId,
        mainGenre: ':param.main',
        subGenre: ':param.sub',
        group: ':param.group'
    });
    Saver.addSaveRule('genreCustom', '/saveajax/saveCustomGenre/', {
        bandId: bandId,
        customGenre: ':param'
    });
    Saver.addSaveRule($('#genreOn').attr('name'), '/saveajax/setShowGenre/', {
        rmPageId: rmPageId,
        show: ':param'
    });
    Saver.addSaveRule($('#messageOn').attr('name'), '/saveajax/setShowMessage/', {
        rmPageId: rmPageId,
        show: ':param'
    });
    Saver.addSaveRule($('#emailOn').attr('name'), '/saveajax/setShowEmail/', {
        rmPageId: rmPageId,
        show: ':param'
    });
    Saver.addSaveRule($('#phoneOn').attr('name'), '/saveajax/setShowPhone/', {
        rmPageId: rmPageId,
        show: ':param'
    });
    Saver.addSaveRule('phone', '/saveajax/saveBandPhone/', {
        bandId: bandId,
        phone: ':param'
    });
    Saver.addSaveRule('bio', '/saveajax/saveBio/', {
        rmPageId: rmPageId,
        bio: ':param'
    });
    Saver.addSaveRule('website', '/saveajax/updateBandWebsite/', {
        bandId: bandId,
        websiteId: ':param.id',
        title: ':param.websiteTitle',
        url: ':param.websiteUrl'
    });
    Saver.addSaveRule('website-remove', '/saveajax/removeBandWebsite/', {
        bandId: bandId,
        websiteId: ':param'
    });
    Saver.addSaveRule('website-add', '/saveajax/addBandWebsite/', {
        bandId: bandId,
        title: ':param.websiteTitle',
        url: ':param.websiteUrl'
    });
    Saver.addSaveRule('email', '/saveajax/updateBandEmail/', {
        bandId: bandId,
        emailId: ':param.id',
        title: ':param.emailTitle',
        email: ':param.emailAddress'
    });
    Saver.addSaveRule('email-remove', '/saveajax/removeBandEmail/', {
        bandId: bandId,
        emailId: ':param'
    });
    Saver.addSaveRule('email-add', '/saveajax/addBandEmail/', {
        bandId: bandId,
        title: ':param.emailTitle',
        email: ':param.emailAddress'
    });
    Saver.addSaveRule('open-more-info', '/saveajax/updateOpenMoreInfo/', {
        fanPageId: rmPageId,
        openMoreInfo: ':param'
    });
    var $pin_dock = $('.pin-dock', _context);
    $pin_dock.find('.pin-toggle').bind('click', function (event) {
        var input = $('input[name="open-more-info"]', _context)[0];
        input.checked = !input.checked;
        var $pin = $('.pin-icon', event.currentTarget),
            $notification = $('.notification', $(event.currentTarget).closest('.pin-dock'));
        var pos = $pin.show().position();
        if (input.checked) {
            $pin.css({
                opacity: 0,
                top: (pos.top - 15) + 'px',
                left: (pos.left + 5) + 'px'
            }).animate({
                opacity: 1,
                top: pos.top + 'px',
                left: pos.left + 'px'
            }, 250);
            $notification.text('Cool! Your "More Info" pane will now be open by default.').stop().fadeIn(250).delay(1500).fadeOut();
        } else {
            $pin.animate({
                opacity: 0,
                top: '-=15px',
                left: '+=5px'
            }, 250, function () {
                $(this).css({
                    opacity: '',
                    top: pos.top + 'px',
                    left: pos.left + 'px'
                }).hide();
            });
            $notification.text('Your "More Info" pane is now closed by default.').stop().fadeIn(250).delay(1500).fadeOut();
        }
        $(input).change();
        return false;
    });
    $('input[name="open-more-info"]', _context).bind('change', function (event) {
        var open_more_info = this.checked;
        Saver.save($(this).attr('name'), open_more_info);
    });
    var genreEditor = new GenreSevenWidget($('#rm-genre-seven-widget', _context), {});
    $('#genreOn').bind('change', function (event) {
        var show = $('#genreOn:checked').val();
        if (show != undefined) {
            show = "true";
        } else {
            show = "false";
        }
        Saver.save($(event.currentTarget).attr('name'), show);
    });
    var emailEditor = new MultivalWidget($('.rm-multival[name="emails"]', _context), {
        autoAdd: true,
        validate: 'email'
    });
    $('#emailOn').bind('change', function (event) {
        var show = $('#emailOn:checked').val();
        if (show != undefined) {
            show = "true";
        } else {
            show = "false";
        }
        Saver.save($(event.currentTarget).attr('name'), show);
        var emailInput = emailEditor._domTarget;
        if (emailInput.is(':hidden')) {
            emailInput.slideDown();
        } else {
            emailInput.slideUp();
        }
    });
    $('#messageOn').bind('change', function (event) {
        var show = $('#messageOn:checked').val();
        if (show != undefined) {
            show = "true";
        } else {
            show = "false";
        }
        Saver.save($(event.currentTarget).attr('name'), show);
    });
    var phoneEditor = new TextInlineEditWidget($('.rm-inline-edit[name="phone"]', _context), {
        prompt: 'not set'
    });
    $('#phoneOn').bind('change', function (event) {
        var show = $('#phoneOn:checked').val();
        if (show != undefined) {
            show = "true";
        } else {
            show = "false";
        }
        Saver.save($(event.currentTarget).attr('name'), show);
        var phoneInput = phoneEditor._domTarget;
        if (phoneInput.is(':hidden')) {
            phoneInput.slideDown();
        } else {
            phoneInput.slideUp();
        }
    });
    var websiteEditor = new MultivalWidget($('.rm-multival[name="websites"]', _context), {
        autoAdd: true,
        validate: 'url'
    });
    var bioEditor = new TextInlineEditWidget($('.rm-inline-edit[name="bio"]', _context));
    var showDropDown = function () {
            $('#editor-main-info').show().siblings().hide();
            $('#editor-more-info-button').addClass('active');
            $('#editor-main-hover-layer').slideDown('fast', function () {
                if (editor_mode !== 'css') {
                    $('.pin-dock', this).fadeIn();
                }
            }).click(function (e) {
                e.stopPropagation();
            });
        };
    var hideDropDown = function () {
            $('#editor-main-hover-layer').slideUp('fast', function () {
                $('#editor-main-info').hide();
                $('#editor-more-info-button').removeClass('active');
                $('.pin-dock', this).hide();
            });
        };
    var toggleDropDownDisplay = function (event) {
            if ($('#editor-main-info').is(':hidden')) {
                showDropDown();
            } else {
                hideDropDown();
            }
            event.stopPropagation();
            return false;
        };
    $('#editor-more-info-button, #editor-hover-close-button').bind('click', toggleDropDownDisplay);
    var editor_mode = 'content';
    RMUIWidgetRelay.addCallback(RMUIEvent.EDITOR_MODE_CHANGE, null, function (mode) {
        switch (mode) {
        case 'css':
            if ($('#editor-main-info').is(':hidden')) {
                showDropDown();
            }
            $('#editor-hover-close-button').unbind('click');
            $pin_dock.hide();
            break;
        case 'content':
            $('#editor-hover-close-button').bind('click', toggleDropDownDisplay);
            if ($('#editor-main-info').is(':visible')) {
                $pin_dock.fadeIn();
            }
            break;
        default:
            break;
        }
        editor_mode = mode;
    });
});
$(function () {
    dodebug('widget/media_player:: init');
    var bandId = getGlobal('pageId');
    Saver.addSaveRule('playlist-update-order', '/saveajax/updateTrackOrder', {
        bandId: bandId,
        trackIds: ':param'
    });
    Saver.addSaveRule('track-add', '/saveajax/addTrackToPlaylist', {
        bandId: bandId,
        sourceType: ':param.sourceType',
        sourceId: ':param.sourceId',
        title: ':param.title',
        description: ':param.description',
        duration: ':param.duration',
        artworkUrl: ':param.artworkUrl',
        downloadable: ':param.downloadable',
        purchasable: ':param.purchasable',
        purchaseUrl: ':param.purchaseUrl',
        streamUrl: ':param.streamUrl'
    });
    Saver.addSaveRule('track-update', '/saveajax/updateTrack', {
        bandId: bandId,
        trackId: ':param.trackId',
        title: ':param.title',
        description: ':param.description',
        artworkUrl: ':param.artworkUrl',
        purchaseUrl: ':param.purchaseUrl',
        downloadable: ':param.downloadable',
        purchasable: ':param.purchasable'
    });
    Saver.addSaveRule('track-remove', '/saveajax/removeTrackFromPlaylist', {
        bandId: bandId,
        trackId: ':param'
    });
    var rmPlayerSecondaryColor = $('#editor-pane-container .rmplayer-secondary-ui').css('background-color');
    $('#rmplayer-playbutton .rmplayer-icon').css({
        backgroundColor: 'transparent'
    }).svg(function (thisSvg) {
        thisSvg.polygon([
            [6.43, 2.656],
            [18.57, 12],
            [6.43, 21.344]
        ], {
            fill: rmPlayerSecondaryColor
        });
    });
    $('#rmplayer-volume .rmplayer-icon').css({
        backgroundColor: 'transparent'
    }).svg(function (thisSvg) {
        thisSvg.polygon([
            [20, 0],
            [9.796, 3.571],
            [9.796, 16.429],
            [20, 20]
        ], {
            fill: rmPlayerSecondaryColor
        });
        thisSvg.rect(0, 6.429, 7.755, 7.143, {
            fill: rmPlayerSecondaryColor
        });
    });
    var scConnect = getGlobal('scConnect');
    var _trackManager = new TrackManagerWidget($('#rm-track-manager'), {
        scConnect: scConnect
    });
});
$(function () {
    dodebug('widget/nav_bar:: init');
    var modal_photo = new ModalUtility('#editor-pane-container');
    var modal_video = new ModalUtility('#editor-pane-container', true);
    var handleButtons = function (event) {
            var id = $(event.currentTarget).attr('id');
            switch (id) {
            case 'editor-photo-button':
                if (!modal_photo.hasContent()) {
                    modal_photo.showDialog($('#rm-photos').show().detach());
                } else {
                    modal_photo.showDialog();
                }
                break;
            case 'editor-video-button':
                if (!modal_video.hasContent()) {
                    modal_video.showDialog($('#rm-videos').show().detach());
                } else {
                    modal_video.showDialog();
                }
                RMUIWidgetRelay.relayEvent('video-pane-activate');
                break;
            default:
                break;
            }
            return false;
        };
    var handleModeChange = function (mode) {
            dodebug('handling mode change...');
            switch (mode) {
            case 'css':
                $('#editor-photo-button, #editor-video-button').unbind('click');
                break;
            case 'content':
                $('#editor-photo-button, #editor-video-button').bind('click', handleButtons);
                break;
            default:
                break;
            }
        };
    RMUIWidgetRelay.addCallback(RMUIEvent.EDITOR_MODE_CHANGE, this, handleModeChange);
    $('#editor-photo-button, #editor-video-button').bind('click', handleButtons);
});
$(function () {
    var rmPageId = getGlobal('fanPageId');
    var title = $('#editor-page-title > h3');
    if (title.length) {
        var title_editor = new TextInlineEditWidget(title);
        Saver.addSaveRule(title.attr('name'), '/saveajax/saveTitle/', {
            title: ':param',
            rmPageId: rmPageId
        });
    }
    var location = $('#editor-page-location');
    if (location.length) {
        var location_editor = new TextInlineEditWidget(location);
        Saver.addSaveRule(location.attr('name'), '/saveajax/saveLocation/', {
            location: ':param',
            rmPageId: rmPageId
        });
    }
});
$(function () {
    var bandId = getGlobal('pageId');
    Saver.addSaveRule('add-video-vimeo', '/saveajax/saveVimeo/', {
        bandId: bandId,
        link: ':param'
    });
    Saver.addSaveRule('add-video-youtube', '/saveajax/saveYoutube/', {
        bandId: bandId,
        link: ':param'
    });
    Saver.addSaveRule('remove-video', '/saveajax/removeVideo/', {
        bandId: bandId,
        videoId: ':param'
    });
    var video_editors = new Array();
    $('.rm-video-edit', '#rm-videos').each(function () {
        var options = {
            type: false
        };
        if ($(this).hasClass('youtube')) {
            options.type = 'youtube';
        } else if ($(this).hasClass('vimeo')) {
            options.type = 'vimeo';
        }
        video_editors.push(new VideoEditWidget($(this), options));
    });
    var _gotVideos = false;
    var getFbVideos = function () {
            if (_gotVideos) {
                return false;
            }
            var fbVideoDOM = $('#fb-videos');
            $('.loading', fbVideoDOM.selector + ' .fb-status').siblings().hide().end().fadeIn();
            $.ajax({
                type: 'post',
                url: '/getajax/getFbVideos',
                dataType: 'json',
                data: {
                    fbPageId: getGlobal('fbPageId')
                },
                success: function (data, response) {
                    if (!data || data.status < 0) {
                        $('.empty', fbVideoDOM.selector + ' .fb-status').siblings().hide().end().fadeIn();
                        return false;
                    }
                    if (data.videos.length < 1) {
                        $('.empty', fbVideoDOM.selector + ' .fb-status').siblings().hide().end().fadeIn();
                        return false;
                    }
                    dodebug(data);
                    $('.not-empty', fbVideoDOM.selector + ' .fb-status').siblings().hide().end().fadeIn();
                    $('.not-empty', fbVideoDOM.selector + ' .fb-status').children('.video-count-display').text(data.videos.length + ' videos');
                    var dom_template = $('.template', fbVideoDOM.selector + ' .video-items').get(0);
                    dodebug(dom_template);
                    $.each(data.videos, function (indx, vid) {
                        var chk_exists = $('li[rel="' + vid.vid + '"]', fbVideoDOM);
                        dodebug('Checking if this FB video exists: ' + chk_exists.length);
                        if (!chk_exists.length) {
                            var fb_video_dom = $(dom_template.cloneNode(true));
                            $('.title', fb_video_dom).text(vid.title);
                            $('.video-thumb', fb_video_dom).attr('src', vid.image).attr('alt', vid.title);
                            fb_video_dom.attr('rel', vid.vid);
                            fb_video_dom.appendTo($('.video-items', fbVideoDOM)).show();
                        }
                    });
                    return true;
                },
                error: function (err) {}
            });
        };
    RMUIWidgetRelay.addCallback('video-pane-activate', this, getFbVideos);
});
$(function () {
    dodebug('common/header/nav:: init.');
    var loading_graphic = $(new Image()).attr('src', 'http://b.ak.static-abc.com/images/common/ajax-loader-trans.gif?v=2.70').attr('id', 'loading_graphic');
    loading_graphic.css({
        display: 'inline-block',
        marginLeft: '0.5em'
    });
    $('#mainnav-sign-in').bind('click', function (event) {
        $(event.currentTarget).css({
            color: '#666',
            background: 'transparent'
        }).text('loading').append(loading_graphic);
        LoginService.login();
        return false;
    });
});
$(function () {
    var modal_facebook = new ModalUtility('#editor-pane-container', true);
    $('#fb-instructions-button').bind('click', function (event) {
        if (modal_facebook.hasContent()) {
            modal_facebook.showDialog();
        } else {
            modal_facebook.showDialog($('#rm-fb-instructions').show().detach());
        }
        $('#autoshare-activate-button').data('fbPageId', $('#autoshare-fbPageId').val()).data('rmPageId', $('#autoshare-rmPageId').val());
        RMFBAutoshare.init($('#autoshare-activate-button'));
        event.stopImmediatePropagation();
        return false;
    });
    $('.fb-nav-step', '#rm-fb-instructions').bind('click', function (event) {
        var idTokens = $(event.currentTarget).attr('id').split('-');
        var id = idTokens[idTokens.length - 1];
        if ($('#fb-install-step-' + id).is(':hidden')) {
            $('.fb-nav-step', '#rm-fb-instructions').removeClass('active');
            $(event.currentTarget).addClass('active');
            $('#fb-install-step-' + id).siblings().hide().end().fadeIn();
        }
        return false;
    });
    $('.fb-install-next-link', '#rm-fb-instructions').bind('click', function (event) {
        var hrefTokens = $(event.currentTarget).attr('href').split('-');
        var id = hrefTokens[hrefTokens.length - 1];
        if ($('#fb-install-step-' + id).is(':hidden')) {
            $('.fb-nav-step', '#rm-fb-instructions').removeClass('active');
            $('#fb-nav-step-' + id).addClass('active');
            $('#fb-install-step-' + id).siblings().hide().end().fadeIn();
        }
        return false;
    });
});
$(function () {
    $('#fb-sidebar-overlay').bind('mouseenter mouseleave', function (event) {
        var message = $('#fb-sidebar-description');
        var shade = $('#fb-sidebar-shade');
        switch (event.type) {
        case 'mouseenter':
            shade.stop().animate({
                opacity: 0.75
            }, 250);
            message.fadeIn('fast');
            break;
        case 'mouseleave':
            shade.stop().animate({
                opacity: 0.2
            }, 250);
            message.fadeOut('fast');
            break;
        default:
            break;
        }
    });
});
$(function () {
    var _context = '#editor-footer';
    var rmPageId = getGlobal('fanPageId');
    var twitter_widget = false;
    var twitter_list_widget = false;
    var rss_widget = false;
    $('.rm-inline-edit', _context).each(function () {
        var widget = new TextInlineEditWidget($(this));
        switch ($(this).attr('name')) {
        case 'twitter':
            widget.addCallback('update', FeedLivePreview, FeedLivePreview.updateTwitterUI);
            twitter_widget = widget;
            break;
        case 'twitterList':
            widget.addCallback('update', FeedLivePreview, FeedLivePreview.updateTwitterListUI);
            twitter_list_widget = widget;
            break;
        case 'rssFeed':
            widget.addCallback('update', FeedLivePreview, FeedLivePreview.updateRSSUI);
            rss_widget = widget;
            break;
        default:
            break;
        }
    });
    FeedLivePreview.init({
        twitter_username: twitter_widget,
        twitter_listname: twitter_list_widget,
        rss_feed_url: rss_widget
    });
    Saver.addSaveRule($('#edit-wall-filter').attr('name'), '/saveajax/saveWallFilter/', {
        wallFilter: ':param',
        rmPageId: rmPageId
    });
    Saver.addSaveRule($('#rm-edit-twitter').attr('name'), '/saveajax/saveTwitter/', {
        twitter: ':param',
        rmPageId: rmPageId
    });
    Saver.addSaveRule($('#rm-edit-twitter-list').attr('name'), '/saveajax/saveTwitterList/', {
        twitterList: ':param',
        rmPageId: rmPageId
    });
    Saver.addSaveRule($('#rm-edit-feed').attr('name'), '/saveajax/saveRssFeed/', {
        rssFeed: ':param',
        rmPageId: rmPageId
    });
    Saver.addSaveRule($('#rm-edit-feed-title').attr('name'), '/saveajax/saveRssTitle/', {
        rssTitle: ':param',
        rmPageId: rmPageId
    });
    Saver.addSaveRule('set-default-feed', '/saveajax/setDefaultFeed/', {
        fanPageId: rmPageId,
        feedIdentifier: ':param'
    })
    $('#edit-wall-filter').bind('change', function (event) {
        Saver.save($(event.currentTarget).attr('name'), $(event.currentTarget).val());
    });
    var updateFeedView = function (event) {
            var feed_type = $(event.currentTarget).attr('id').split('-').shift();
            if (FeedWidget.supports(feed_type)) {
                FeedWidget.setCurrentFeed(feed_type);
                switch (feed_type) {
                case 'twitter':
                    FeedLivePreview.updateTwitterUI();
                    break;
                case 'rss':
                    FeedLivePreview.updateRSSUI();
                    break;
                }
                DefaultFeedToggler.setFeedView(feed_type);
            }
            return false;
        };
    $('#wall-show, #twitter-show, #rss-show').bind('click', updateFeedView);
    var DefaultFeedToggler = function () {
            var $dock = $('.pin-dock', _context);
            var $pin = $dock.find('.pin-icon');
            var $notification = $dock.find('.notification');
            var $input = $('input[name="set-default-feed"]', _context);
            var _default_feed = getGlobal('default_feed_type');
            $dock.bind('click', function (event) {
                if (_default_feed === FeedWidget.getCurrentFeed() && _default_feed === FeedWidget.FEED_TYPE_FACEBOOK) {
                    showMessage('Click me when on "Twitter" or "RSS" to switch the default Feed view!');
                    return false;
                }
                var input = $input[0];
                input.checked = !input.checked;
                var initial_feed = _default_feed;
                if (input.checked) {
                    _default_feed = FeedWidget.getCurrentFeed();
                    showMessage('Cool! This Feed will now be open by default.');
                } else {
                    _default_feed = FeedWidget.FEED_TYPE_FACEBOOK;
                    showMessage('Your Wall will now be the default Feed.');
                }
                $input.change();
                updatePinStatus();
                return false;
            });
            $input.bind('change', function (event) {
                var $this = $(this);
                if (!_default_feed) {
                    dodebug('Saving new default feed: invalid feed type given! type = "' + _default_feed + '"');
                    return false;
                }
                Saver.save($this.attr('name'), _default_feed);
                return false;
            });
            var showMessage = function (message) {
                    $notification.text(message).stop().fadeIn(250).delay(1500).fadeOut();
                };
            var updatePinStatus = function () {
                    if (_default_feed === FeedWidget.getCurrentFeed()) {
                        $input[0].checked = true;
                        attachPin();
                    } else {
                        $input[0].checked = false;
                        detachPin();
                    }
                };
            var attachPin = function () {
                    if ($pin.is(':hidden')) {
                        var pos = $pin.show().position();
                        $pin.css({
                            opacity: 0,
                            top: (pos.top - 15) + 'px',
                            left: (pos.left + 5) + 'px'
                        }).animate({
                            opacity: 1,
                            top: pos.top + 'px',
                            left: pos.left + 'px'
                        }, 250);
                    }
                };
            var detachPin = function () {
                    if ($pin.is(':visible')) {
                        var pos = $pin.show().position();
                        $pin.animate({
                            opacity: 0,
                            top: '-=15px',
                            left: '+=5px'
                        }, 250, function () {
                            $(this).css({
                                opacity: '',
                                top: pos.top + 'px',
                                left: pos.left + 'px'
                            }).hide();
                        });
                    }
                };
            return {
                show: function () {
                    $dock.fadeIn();
                },
                hide: function () {
                    $dock.fadeOut();
                },
                setFeedView: function (feed_type) {
                    updatePinStatus(feed_type);
                }
            };
        }();
    DefaultFeedToggler.show();
    RMUIWidgetRelay.addCallback(RMUIEvent.EDITOR_MODE_CHANGE, null, function (mode) {
        switch (mode) {
        case 'css':
            $('#wall-show, #twitter-show, #rss-show').unbind('click').removeAttr('href');
            FeedWidget.close();
            DefaultFeedToggler.hide();
            break;
        case 'content':
            $('#wall-show, #twitter-show, #rss-show').bind('click', updateFeedView).attr('href', '#open-tab');
            FeedWidget.open();
            DefaultFeedToggler.show();
            break;
        default:
            break;
        }
    });
});
var FeedLivePreview = (function () {
    var twitter_username = false;
    var twitter_listname = false;
    var rss_feed_url = false;
    return {
        init: function (options) {
            if (options.hasOwnProperty('twitter_username')) {
                twitter_username = options.twitter_username;
            }
            if (options.hasOwnProperty('twitter_listname')) {
                twitter_listname = options.twitter_listname;
            }
            if (options.hasOwnProperty('rss_feed_url')) {
                rss_feed_url = options.rss_feed_url;
            }
        },
        updateTwitterUI: function () {
            if (twitter_listname && !twitter_listname._empty) {
                if (twitter_listname._empty && $('#twitter-feed-extra').is(':visible')) {
                    $('#twitter-feed-extra').fadeOut('fast');
                }
                return false;
            }
            if (!twitter_username._empty && $('#twitter-feed-extra').is(':hidden')) {
                $('#twitter-feed-extra').fadeIn('fast');
                $('#twitter-preview').fadeIn('fast');
            } else if (twitter_username._empty && $('#twitter-feed-extra').is(':visible')) {
                $('#twitter-feed-extra').fadeOut('fast');
                $('#twitter-preview').fadeIn('fast');
            }
            $('#twitter-preview').html('').hide();
            $('#twitter-preview-loading').show();
            var url = '/getajax/getTwitterPreview/';
            var params = {
                twitterName: twitter_username.getValue()
            };
            if (!twitter_username._empty) {
                $.ajax({
                    url: url,
                    type: 'post',
                    data: params,
                    dataType: 'json',
                    success: function (json, response) {
                        $('#twitter-preview-loading').hide();
                        if (json.status >= 0) {
                            $('#twitter-preview').html(json.html).fadeIn('fast').show();
                        } else {
                            $('#twitter-preview').html('');
                            dodebug('FeedWidget::updateTwitterUI: an error occurred: ' + json.error);
                        }
                    }
                });
            }
        },
        updateTwitterListUI: function () {
            $('#twitter-preview').html('').hide();
            $('#twitter-preview-loading').show();
            var twitter = twitter_username.getValue();
            var twitterListName = twitter_listname.getValue();
            if (twitterListName) {
                url = '/getajax/getTwitterListPreview/';
                params = {
                    twitterName: twitter,
                    twitterList: twitterListName
                };
            } else {
                url = '/getajax/getTwitterPreview/';
                params = {
                    twitterName: twitter
                };
            }
            if (twitter || twitterListName) {
                $.ajax({
                    url: url,
                    type: 'post',
                    data: params,
                    dataType: 'json',
                    success: function (json, response) {
                        $('#twitter-preview-loading').hide();
                        if (json.status >= 0) {
                            $('#twitter-preview').html(json.html).fadeIn('fast').show();
                        } else {
                            $('#twitter-preview').html("");
                            dodebug('FeedWidget::updateTwitterListUI: an error occurred: ' + json.error);
                        }
                    }
                });
            }
        },
        updateRSSUI: function () {
            if (!rss_feed_url._empty && $('#rss-feed-extra').is(':hidden')) {
                $('#rss-feed-extra').fadeIn('fast');
                $('#rss-preview').fadeIn('fast');
            } else if (rss_feed_url._empty && $('#rss-feed-extra').is(':visible')) {
                $('#rss-feed-extra').fadeOut('fast');
                $('#rss-preview').fadeOut('fast');
            }
            $('#rss-preview').html('');
            if (!rss_feed_url._empty) {
                $('#rss-preview-loading').show();
                $.ajax({
                    url: '/getajax/getRSSPreview/',
                    type: 'post',
                    data: {
                        feedUrl: rss_feed_url.getValue()
                    },
                    dataType: 'json',
                    success: function (json, response) {
                        $('#rss-preview-loading').hide();
                        if (json.status >= 0) {
                            $('#rss-preview').html(json.html).show();
                        } else {
                            $('#rss-preview').html('');
                            dodebug('FeedWidget::updateRSSUI: an error occurred: ' + json.error);
                        }
                    }
                });
            }
        }
    };
})();
var FeedWidget = (function () {
    var FEED_TYPE_FACEBOOK = 'wall';
    var FEED_TYPE_TWITTER = 'twitter';
    var FEED_TYPE_RSS = 'rss';
    var _current_feed = FEED_TYPE_FACEBOOK;
    var showMediaPane = function (which) {
            if (which === undefined) {
                which = FEED_TYPE_FACEBOOK;
            }
            $('a', '#nav-tabs').removeClass('active');
            switch (which) {
            case FEED_TYPE_FACEBOOK:
                if ($('#wall-media-options').is(':visible')) {
                    $('#edit-media-options').slideUp(function () {
                        $('#wall-media-options').hide();
                    });
                } else {
                    if ($('#twitter-media-options').is(':visible')) {
                        $('#twitter-media-options').removeClass('active').hide();
                    }
                    if ($('#rss-media-options').is(':visible')) {
                        $('#rss-media-options').removeClass('active').hide();
                    }
                    if ($('#edit-media-options').is(':hidden')) {
                        $('#edit-media-options').addClass('active').slideDown();
                    }
                    $('#wall-media-options').fadeIn('fast');
                    $('#wall-show').addClass('active');
                }
                break;
            case FEED_TYPE_TWITTER:
                if ($('#twitter-media-options').is(':visible')) {
                    $('#edit-media-options').slideUp(function () {
                        $('#twitter-media-options').hide();
                    });
                } else {
                    if ($('#wall-media-options').is(':visible')) {
                        $('#wall-media-options').removeClass('active').hide();
                    }
                    if ($('#rss-media-options').is(':visible')) {
                        $('#rss-media-options').removeClass('active').hide();
                    }
                    if ($('#edit-media-options').is(':hidden')) {
                        $('#edit-media-options').addClass('active').slideDown();
                    }
                    $('#twitter-media-options').fadeIn('fast');
                    $('#twitter-show').addClass('active');
                }
                break;
            case FEED_TYPE_RSS:
                if ($('#rss-media-options').is(':visible')) {
                    $('#edit-media-options').slideUp(function () {
                        $('#rss-media-options').hide();
                    });
                } else {
                    if ($('#wall-media-options').is(':visible')) {
                        $('#wall-media-options').removeClass('active').hide();
                    }
                    if ($('#twitter-media-options').is(':visible')) {
                        $('#twitter-media-options').removeClass('active').hide();
                    }
                    if ($('#edit-media-options').is(':hidden')) {
                        $('#edit-media-options').addClass('active').slideDown();
                    }
                    $('#rss-media-options').fadeIn('fast');
                    $('#rss-show').addClass('active');
                }
                break;
            default:
                break;
            }
        };
    return {
        FEED_TYPE_FACEBOOK: FEED_TYPE_FACEBOOK,
        FEED_TYPE_TWITTER: FEED_TYPE_TWITTER,
        FEED_TYPE_RSS: FEED_TYPE_RSS,
        close: function () {
            $('a', '#nav-tabs').removeClass('active');
            if ($('#wall-media-options').is(':visible')) {
                $('#edit-media-options').slideUp(function () {
                    $('#wall-media-options').hide();
                    $('#twitter-media-options').hide();
                    $('#rss-media-options').hide();
                });
            }
        },
        open: function () {
            showMediaPane(_current_feed);
        },
        getCurrentFeed: function () {
            return _current_feed;
        },
        setCurrentFeed: function (feed_type) {
            _current_feed = feed_type;
            showMediaPane(feed_type);
        },
        supports: function (feed_type) {
            return [FEED_TYPE_FACEBOOK, FEED_TYPE_TWITTER, FEED_TYPE_RSS].indexOf(feed_type) > -1;
        }
    };
})();
$(function () {
    dodebug('pages/editor: init.');
    try {
        if (!$.support.boxModel || !$.support.cssFloat || !$.support.opacity || !$.support.noCloneEvent) {
            var browser_version = parseFloat($.browser.version);
            if ($.browser.webkit) {
                var is_chrome = /chrome/.test(navigator.userAgent.toLowerCase());
                if (is_chrome) {
                    dodebug('User needs to upgrade their Chrome browser');
                } else {
                    dodebug('User needs to upgrade their Safari browser');
                }
            } else if ($.browser.mozilla) {
                dodebug('User needs to upgrade their Firefox browser');
            } else if ($.browser.opera) {
                dodebug('User needs to upgrade their Opera browser');
            } else if ($.browser.msie) {
                dodebug('User needs to upgrade to Chrome, Firefox, or equivalent');
                var modal_browser = new ModalUtility('#editor-pane-container', true);
                if (!modal_browser.hasContent()) {
                    modal_browser.showDialog($('#internet-explorer-modal').show().detach());
                } else {
                    modal_browser.showDialog();
                }
            }
        }
    } catch (err) {
        dodebug('Error performing feature tests on browser: ' + err);
    }
    var saveNotifier = new SaveNotifier();
});
$(function () {
    Saver.addSaveRule('tutorial-viewed', '/saveAjax/saveIntroSeen/', {
        introType: ':param'
    });
    $('#short-url-addon').bind('click', function (event) {
        var linkDisplay = $(event.currentTarget).find('.short-url-link');
        if (linkDisplay && (!$(event.target).hasClass('help') || linkDisplay.is(':hidden'))) {
            linkDisplay.slideToggle();
        }
    });
    var videos = {
        editor: 'BsUVgFg9juM',
        css: 'KZAzTTorOoc',
        'fb-export': 'Q_pcge8mWKs'
    };
    var video_player = new VideoPlayerWidget('body');
    var showContentTutorial = getGlobal('showContentTutorial');
    if (showContentTutorial) {
        dodebug('VIDEO show me the content tutorial');
        video_player.play(videos['editor']);
        Saver.save('tutorial-viewed', 'editor');
    }
    var level = getGlobal('level');
    var showAppearanceTutorial = getGlobal('showAppearanceTutorial');
    if (showAppearanceTutorial && level > 0) {
        dodebug('VIDEO show me the visual tutorial');
        $('#rm-css-launch').one('click', function (e) {
            video_player.play(videos['css']);
            Saver.save('tutorial-viewed', 'css');
            return false;
        });
    }
    $('#open-fb-export-video').bind('click', function (e) {
        video_player.play(videos['fb-export']);
        return false;
    });
});

function isset(variable) {
    return (typeof (window[variable]) != "undefined");
}

function parseSize(cssSize) {
    if (cssSize) return parseFloat(cssSize.replace(/px|em/, ""));
    else return false;
}
$.fn.safeHide = function () {
    return $(this).css({
        position: 'absolute',
        top: '-9999px',
        visibility: 'hidden'
    });
};
$.fn.safeShow = function () {
    return $(this).css({
        position: '',
        top: '',
        visibility: ''
    });
};
$.fn.safeSlideUp = function (callback) {
    return $(this).animate({
        height: 0,
        paddingTop: 0,
        paddingBottom: 0,
        marginTop: 0,
        marginBottom: 0
    }, 500, function () {
        $(this).safeHide().css({
            height: '',
            paddingTop: '',
            paddingBottom: '',
            marginTop: '',
            marginBottom: ''
        });
        if (callback) {
            callback.call(this);
        }
    });
};
$.fn.safeSlideDown = function (callback) {
    var paddingTop = $(this).css('paddingTop');
    var paddingBottom = $(this).css('paddingBottom');
    var marginTop = $(this).css('marginTop');
    var marginBottom = $(this).css('marginBottom');
    var height = $(this).height();
    return $(this).safeShow().css({
        height: 0,
        paddingTop: 0,
        paddingBottom: 0,
        marginTop: 0,
        marginBottom: 0
    }).animate({
        height: height + 'px',
        paddingTop: paddingTop,
        paddingBottom: paddingBottom,
        marginTop: marginTop,
        marginBottom: marginBottom
    }, 500, function () {
        $(this).css({
            height: '',
            paddingTop: '',
            paddingBottom: '',
            marginTop: '',
            marginBottom: ''
        }).safeShow();
        if (callback) {
            callback.call(this);
        }
    });
};
$.fn.safeFadeIn = function (callback) {
    var opacity = $(this).css('opacity');
    return $(this).safeShow().css({
        opacity: 0
    }).animate({
        opacity: opacity
    }, 300, function () {
        $(this).css({
            opacity: ''
        });
        if (callback) {
            callback.call(this);
        }
    });
};
$.fn.safeFadeOut = function (callback) {
    return $(this).animate({
        opacity: 0
    }, 300, function () {
        $(this).safeHide().css({
            opacity: ''
        });
        if (callback) {
            callback.call(this);
        }
    });
};
(function () {
    var initializing = false,
        fnTest = /xyz/.test(function () {
            xyz;
        }) ? /\b_super\b/ : /.*/;
    this.Class = function () {};
    Class.extend = function (prop) {
        var _super = this.prototype;
        initializing = true;
        var prototype = new this();
        initializing = false;
        for (var name in prop) {
            prototype[name] = typeof prop[name] == "function" && typeof _super[name] == "function" && fnTest.test(prop[name]) ? (function (name, fn) {
                return function () {
                    var tmp = this._super;
                    this._super = _super[name];
                    var ret = fn.apply(this, arguments);
                    this._super = tmp;
                    return ret;
                };
            })(name, prop[name]) : prop[name];
        }

        function Class() {
            if (!initializing && this.init) this.init.apply(this, arguments);
        }
        Class.prototype = prototype;
        Class.constructor = Class;
        Class.extend = arguments.callee;
        return Class;
    };
})();
var RMUIWidgetRelay = (function () {
    var _name = "RMUIWidgetRelay";
    var _callbacks = {};
    return {
        addCallback: function (type, caller, callback, args) {
            if (_callbacks[type] === undefined) {
                _callbacks[type] = new Array();
            }
            if (!this.callbackExists(type, caller, callback, args)) {
                _callbacks[type].push({
                    caller: caller,
                    fn: callback,
                    args: args
                });
            }
        },
        callbackExists: function (type, caller, callback, args) {
            if (_callbacks[type] === undefined) {
                return false;
            }
            var callbackObj;
            for (var i = 0; i < _callbacks[type]; i++) {
                callbackObj = _callbacks[type][i];
                if (callbackObj.caller == caller && callbackObj.callback == callback && callbackObj.args == args) {
                    return true;
                }
            }
            return false;
        },
        relayEvent: function (type, args) {
            var callbacks = _callbacks[type];
            if (callbacks === undefined) {
                dodebug(_name + '::relayEvent, no callbacks registered for type ' + type + '!');
                return false;
            }
            for (var i = 0; i < callbacks.length; i++) {
                try {
                    if (args) {
                        callbacks[i]['fn'].call(callbacks[i]['caller'], args, callbacks['args'], RMUIWidgetRelay);
                    } else {
                        callbacks[i]['fn'].call(callbacks[i]['caller'], callbacks[i]['args'], RMUIWidgetRelay);
                    }
                } catch (err) {
                    dodebug(_name + '::relayEvent, error relaying event type ' + type + ' to listeners: ' + err);
                }
            }
        }
    };
})();
var RMUIEvent = (function () {
    return {
        EDITOR_MODE_CHANGE: 'editor-mode-change',
        STATE_CHANGE: 'state-change',
        UPDATE: 'update',
        STYLE_CHANGE: 'style-change',
        STYLE_SAVE: 'style-save',
        STYLE_SELECT: 'style-select'
    };
})();
var RMUIWidget = Class.extend({
    STATE_DISABLED: 'disabled',
    STATE_ENABLED: 'enabled',
    STATE_ACTIVE: 'active',
    STATE_INACTIVE: 'inactive',
    _name: 'RMUIWidget',
    _domTarget: false,
    _origDom: false,
    _active: false,
    _callbacks: false,
    _enabled: true,
    _enableGlobalCallbacks: true,
    _saveData: {},
    _saveRuleData: {},
    init: function (targetElement, options) {
        if (this._name) {
            this._name = this._name;
        }
        this._callbacks = {};
        this._saveData = {};
        this._saveRuleData = {};
        this._enabled = true;
        this._enableGlobalCallbacks = true;
        if (options && options.hasOwnProperty('enableGlobalCallbacks')) {
            this._enableGlobalCallbacks = options.enableGlobalCallbacks;
        }
        if (this._enableGlobalCallbacks) {
            this.addGlobalCallback(RMUIEvent.EDITOR_MODE_CHANGE, this, this.changeMode);
        }
        this.setTarget(targetElement);
    },
    setTarget: function (target, copy) {
        if (copy === undefined) {
            copy = false;
        }
        if (typeof (target) === 'string') {
            target = $(target);
        }
        if (!target.selector && target.length < 1) {
            dodebug(this._name + '::setTarget, invalid target given - either no DOM node or not a valid jQuery object');
            return false;
        }
        if (this.getTarget() && !copy) {
            this.uninstall();
        }
        try {
            this._origDom = target.clone(true);
        } catch (err) {
            dodebug(this._name + '::setTarget, an error occurred cloning the original dom: ' + err, 'warn');
        }
        this._domTarget = target;
        this.install();
    },
    getTarget: function () {
        return this._domTarget;
    },
    install: function () {
        var target = this.getTarget();
        if (!target) {
            dodebug(this._name + '::install: ERROR, attempted install without setting DOM target!');
            return false;
        }
        var assoc_widgets = target.data('widgets');
        if (!assoc_widgets) {
            assoc_widgets = new Array();
        }
        assoc_widgets.push(this);
        target.data('widgets', assoc_widgets).addClass('rm-widget');
        target.data(this._name, this);
    },
    uninstall: function () {
        var target = this.getTarget();
        if (!target) {
            dodebug(this._name + '::uninstall: ERROR, attempted to uninstall before install!');
            return false;
        }
        var assoc_widgets = target.data('widgets');
        for (var i = 0; i < assoc_widgets.length; i++) {
            if (assoc_widgets[i] == this) {
                assoc_widgets.splice(i, 1);
            }
        }
        target.data('widgets', assoc_widgets).removeClass('rm-widget');
        if (assoc_widgets.length == 0) {
            target.removeData('widgets');
        }
        var insertionPoint = target.next();
        if (insertionPoint.length) {
            insertionPoint.before(this._origDom);
        } else {
            target.parent().append(this._origDom);
        }
        target.remove();
        return this._origDom;
    },
    enable: function () {
        this._enabled = true;
        this.getTarget().removeClass('disabled');
    },
    disable: function () {
        this._enabled = false;
        this.getTarget().addClass('disabled');
    },
    isEnabled: function () {
        return this._enabled;
    },
    isActive: function () {
        return this._active;
    },
    activate: function () {
        if (!this.isEnabled() || this.isActive() || !this.getTarget()) return false;
        this._active = true;
        return true;
    },
    deactivate: function () {
        if (!this.isEnabled() || !this.isActive() || !this.getTarget()) {
            return false;
        }
        this._active = false;
        return true;
    },
    changeMode: function (mode) {
        switch (mode) {
        case 'css':
            this.disable();
            break;
        case 'content':
            this.enable();
            break;
        default:
            break;
        }
    },
    copy: function () {
        return this._origDom.clone();
    },
    setSaveData: function (key, val, rule) {
        var store = this._saveData;
        if (rule && typeof (rule) === 'string') {
            if (!this._saveRuleData[rule]) {
                this._saveRuleData[rule] = {};
            }
            store = this._saveRuleData[rule];
        }
        store[key] = val;
        return this;
    },
    clearSaveData: function (key) {
        if (this._saveData.hasOwnProperty(key)) {
            delete(this._saveData[key]);
        }
        return this;
    },
    getSaveData: function (rule) {
        if (rule && this._saveRuleData.hasOwnProperty(rule)) {
            return this._saveRuleData[rule];
        } else if (!rule) {
            return this._saveData;
        }
        return {};
    },
    processUserEvent: function (event, doSuper) {
        return false;
    },
    addCallback: function (type, caller, callback, args) {
        if (this._callbacks[type]) {
            var len = this._callbacks[type].length;
            if (this._callbacks[type][len] && this._callbacks[type][len][caller].fn != callback) {
                this._callbacks[type][len] = {
                    caller: caller,
                    fn: callback,
                    args: args
                };
            } else {
                this._callbacks[type][len] = {};
                this._callbacks[type][len] = {
                    caller: caller,
                    fn: callback,
                    args: args
                };
            }
        } else {
            this._callbacks[type] = new Array();
            this._callbacks[type][0] = {};
            this._callbacks[type][0] = {
                caller: caller,
                fn: callback,
                args: args
            };
        }
        return this;
    },
    addGlobalCallback: function (type, caller, callback, args) {
        RMUIWidgetRelay.addCallback(type, caller, callback, args);
        return this;
    },
    triggerEvent: function (type, args, localized) {
        if (localized === undefined) {
            localized = true;
        }
        if (this._callbacks[type]) {
            dodebug(this._name + '::triggerEvent(' + type + '): triggering event to listeners');
            for (var i = 0; i < this._callbacks[type].length; i++) {
                try {
                    var arg_list = new Array();
                    if (args !== undefined) {
                        arg_list.push(args);
                    }
                    if (this._callbacks[type][i]['args'] !== undefined) {
                        arg_list.push(this._callbacks[type][i]['args']);
                    }
                    arg_list.push(this);
                    this._callbacks[type][i]['fn'].apply(this._callbacks[type][i]['caller'], arg_list);
                } catch (err) {
                    dodebug(err);
                }
            }
        }
        if (!localized) {
            RMUIWidgetRelay.relayEvent(type, args);
        }
        return this;
    },
    getWidget: function (name, domTarget) {
        if (name === undefined) {
            name = this._name;
        }
        if (domTarget === undefined) {
            domTarget = this._domTarget;
        }
        var assoc_widgets = this.getWidgets(domTarget);
        if (!assoc_widgets) {
            dodebug(this._name + '::getWidget, no associated widget data exists!');
            return false;
        }
        for (var i = 0; i < assoc_widgets.length; i++) {
            if (assoc_widgets[i]._name == name) {
                return assoc_widgets[i];
            }
        }
        return false;
    },
    getWidgets: function (target) {
        if (!target) {
            target = this.getTarget();
            if (!target) {
                dodebug(this._name + '::getWidgets, ERROR: invalid DOM target node');
                return false;
            }
        }
        return target.data('widgets');
    }
});
var VideoPlayerWidget = RMUIWidget.extend({
    _name: 'VideoPlayerWidget',
    VIDEO_TYPE_YOUTUBE: 'youtube',
    VIDEO_TYPE_VIMEO: 'vimeo',
    VIDEO_STATE_UNSTARTED: 'state-unstarted',
    VIDEO_STATE_PLAYING: 'state-playing',
    VIDEO_STATE_PAUSED: 'state-paused',
    DOM: {
        modal: '<div id="rm-video-modal">' + '<div class="rm-video-container rc-m">' + '<div class="rm-video-wrapper"></div>' + '<p class="rm-video-caption hidden"></p>' + '<div class="rm-video-controls">' + '<a href="#close-video" class="rm-ui-button rc-m small rm-video-close-button" title="Close video?">Close</a>' + '</div>' + '</div>' + '</div>'
    },
    CSS: {
        '#rm-video-modal': {
            position: 'absolute',
            top: '0px',
            left: '0px',
            width: '100%',
            height: '100%',
            'z-index': 10001
        },
        '#rm-video-modal .rm-video-container': {
            '-webkit-box-shadow': 'rgba(0, 0, 0, 0.199219) 0px 5px 15px',
            background: '#ffffff',
            margin: '30px auto 0',
            padding: '20px'
        },
        '#rm-video-modal .rm-video-controls': {
            padding: '10px 0 10px',
            'text-align': 'center'
        }
    },
    init: function (target, options) {
        this._super(target, options);
        if (options) {
            this.setOptions(options);
        }
        this.videos = {};
        this.state = this.VIDEO_STATE_UNSTARTED;
        this.current_video = false;
    },
    install: function () {
        this._super();
        dodebug(this._name + '::install, starting install...');
        var $target = this.getTarget();
        var $overlay = $target.children('.modal-shade');
        if ($overlay.length < 1) {
            $overlay = $('<div class="modal-shade"></div>').hide();
        }
        this.getTarget().prepend($overlay);
        this.$modal_shade = $overlay;
        this.$modal = $(this.DOM.modal).safeHide().appendTo($target).delegate('.rm-video-container', 'click', function (event) {
            event.stopPropagation();
            return false;
        }).delegate('.rm-video-close-button', 'click', $.proxy(function (event) {
            this.deactivate();
        }, this));
        var youtubeHandler = window['onYouTubePlayerReady'];
        window['onYouTubePlayerReady'] = $.proxy(function (yt_player_id) {
            if (typeof (youtubeHandler) === 'function') {
                youtubeHandler.apply(null, [yt_player_id]);
            }
            var player = document.getElementById(yt_player_id);
            player.addEventListener('onStateChange', 'onYouTubeStateChange');
        }, this);
        window['onYouTubeStateChange'] = $.proxy(this, 'handleYouTubeStateChange');
        dodebug(this._name + '::install, finished install!');
        this.style();
    },
    style: function () {
        var style_str = '';
        for (var rule in this.CSS) {
            style_str += rule + '{ ';
            for (var prop in this.CSS[rule]) {
                style_str += prop + ': ' + this.CSS[rule][prop] + ';\n';
            }
            style_str += '}';
        }
        var $style = $('style[name=rm-video-player]', 'head');
        if ($style.length > 0) {
            $style.html(style_str);
        } else {
            $style = $('<style name="rm-video-player" type="text/css">' + style_str + '</style>').appendTo('head');
        }
    },
    setOptions: function (options, allowed, filters) {
        for (var key in options) {
            if (allowed) {
                if (allowed.indexOf(key) < 0) {
                    continue;
                }
            }
            if (filters && filters[key]) {
                var filter = filters[key];
                if (typeof (filter) === 'function') {
                    if (!filter.apply(this, [options[key], key])) {
                        continue;
                    }
                }
            }
            this[key] = options[key];
        }
    },
    activate: function () {
        this._super();
        this.$modal_shade.fadeIn($.proxy(function () {
            this.$modal.safeFadeIn().find('.rm-video-container').css({
                width: this.getCurrentVideo().width + 'px'
            });
        }, this));
        this.getTarget().one('click', $.proxy(function (event) {
            this.deactivate();
        }, this));
    },
    deactivate: function () {
        this._super();
        this.stop();
        this.$modal.safeSlideUp($.proxy(function () {
            this.$modal_shade.fadeOut();
        }, this));
    },
    load: function (id, container, type) {
        if (!container) {
            container = this.$modal.find('.rm-video-wrapper');
        }
        if (!type) {
            type = this.VIDEO_TYPE_YOUTUBE;
        }
        var src = '',
            params = {
                autoplay: 1
            },
            flashvars = {
                allowFullScreen: true,
                allowScriptAccess: 'always'
            },
            width = 780,
            height = 520;
        switch (type) {
        case this.VIDEO_TYPE_YOUTUBE:
            src = 'http://www.youtube.com/v/' + id;
            $.extend(params, {
                enablejsapi: 1,
                version: 3,
                hl: 'en_US',
                rel: 0,
                playerapiid: 'rm-video-swf-' + id
            });
            break;
        case this.VIDEO_TYPE_VIMDEO:
            src = 'http://www.vimeo.com/' + id;
            $.extend(params, {});
            break;
        }
        src += '?';
        for (var key in params) {
            src += key + '=' + params[key] + '&';
        }
        src = src.substr(0, src.length - 1);
        var video = {
            id: id,
            type: type,
            container: container,
            type: type,
            src: src,
            params: params,
            flashvars: flashvars,
            width: width,
            height: height
        };
        var $dom = $('<div id="rm-video-' + video.id + '" class="rm-video"></div>');
        $(container).append($dom);
        $dom.flash({
            swf: video.src,
            id: 'rm-video-swf-' + id,
            width: width,
            height: height,
            allowFullScreen: true,
            allowScriptAccess: 'always',
            wmode: 'transparent',
            flashvars: video.flashvars
        });
        this.videos[id] = video;
    },
    isLoaded: function (id) {
        if (!id) {
            id = this.current_video;
        }
        return (this.videos[id] !== undefined);
    },
    play: function (id, options) {
        if (!id) {
            id = this.current_video;
        }
        if (!this.isLoaded(id)) {
            this.load(id);
        } else {
            var video = this.videos[id],
                player = document.getElementById('rm-video-swf-' + id);
            switch (video.type) {
            case this.VIDEO_TYPE_YOUTUBE:
                player.playVideo();
                break;
            case this.VIDEO_TYPE_VIMEO:
                break;
            }
        }
        this.current_video = id;
        if (options) {
            this.videos[id] = $.extend(this.videos[id], options);
        }
        $('#rm-video-' + id).safeShow().siblings().safeHide();
        if (!this.isActive()) {
            this.activate();
        }
    },
    pause: function (id) {
        if (!id) {
            id = this.current_video;
        }
        if (!this.isLoaded(id)) {
            return false;
        }
        var video = this.videos[id],
            player = document.getElementById('rm-video-swf-' + id);
        switch (video.type) {
        case this.VIDEO_TYPE_YOUTUBE:
            player.pauseVideo();
            break;
        case this.VIDEO_TYPE_VIMEO:
            break;
        }
    },
    stop: function (id) {
        if (!id) {
            id = this.current_video;
        }
        var video = this.videos[id],
            player = document.getElementById('rm-video-swf-' + id);
        switch (video.type) {
        case this.VIDEO_TYPE_YOUTUBE:
            player.stopVideo();
            break;
        case this.VIDEO_TYPE_VIMEO:
            break;
        }
    },
    getCurrentVideo: function () {
        return this.videos[this.current_video];
    },
    handleYouTubeStateChange: function (state) {
        var video = this.getCurrentVideo();
        switch (state) {
        case -1:
            break;
        case 0:
            dodebug('VIDEO COMPLETE!', video, 'warn');
            this.deactivate();
            if (video.complete) {
                dodebug('firing complete handler...');
                video.complete();
            }
            break;
        case 1:
        case 2:
        case 3:
        case 5:
        default:
            break;
        }
    }
});
var Saver = (function () {
    var _callbacks = {
        before: new Array(),
        success: new Array(),
        error: new Array()
    };
    var _savers = new Array();
    var supported_attrs = ['href', 'id', 'name', 'rel', 'src', 'title'];

    function _runCallbacks(save_type, callbacks, data) {
        for (var i = 0; i < callbacks.length; i++) {
            if (save_type && (!callbacks[i].save_types || callbacks.save_types.indexOf(save_type) >= 0)) {
                callbacks[i].callback.call(callbacks[i].caller, data);
            }
        }
    }

    function saveSuccessCallbacks(save_type, data, custom_callback, custom_first) {
        if (custom_callback && custom_first) {
            custom_callback.call(document, data);
        }
        _runCallbacks(save_type, _callbacks.success, data);
        if (custom_callback && !custom_first) {
            custom_callback.call(document, data);
        }
    }

    function saveBeforeCallbacks(save_type, data, custom_callback, custom_first) {
        if (custom_callback && custom_first) {
            custom_callback.call(document, data);
        }
        _runCallbacks(save_type, _callbacks.before, data);
        if (custom_callback && !custom_first) {
            custom_callback.call(document, data);
        }
    }

    function saveErrorCallbacks(save_type, data, custom_callback, custom_first) {
        if (custom_callback && custom_first) {
            custom_callback.call(document, data);
        }
        _runCallbacks(save_type, _callbacks.error, data);
        if (custom_callback && !custom_first) {
            custom_callback.call(document, data);
        }
    }

    function _createPostData(saver, data, elem) {
        var post_data = {};
        for (var key in saver.data) {
            var value = saver.data[key];
            dodebug('checking key ' + key + ': ' + value);
            if (typeof (value) === 'string') {
                if (value.match(/^\:param/)) {
                    dodebug('parameter token detected for key ' + key);
                    if (value.indexOf('.') < 0) {
                        value = data;
                    } else {
                        var property_tokens = value.split('.');
                        if (property_tokens) {
                            property_tokens.shift();
                            if (property_tokens.length < 1) {
                                value = data;
                            } else {
                                var node = $.extend(true, {}, data);
                                for (var i = 0; i < property_tokens.length; i++) {
                                    if (typeof (node) !== 'object' || !node.hasOwnProperty(property_tokens[i])) {
                                        dodebug("Couldn't create post data, error parsing data format " + key + ": " + value);
                                        node = undefined;
                                        break;
                                    }
                                    node = node[property_tokens[i]];
                                }
                                value = node;
                            }
                        } else {
                            value = data;
                        }
                    }
                } else {
                    var regex = false;
                    for (var i = 0; i < supported_attrs.length; i++) {
                        regex = new RegExp('^\\:' + supported_attrs[i]);
                        dodebug('checking regex for ' + supported_attrs[i] + ': ' + value.match(regex));
                        if (value.match(regex)) {
                            value = elem.attr(supported_attrs[i]);
                            break;
                        }
                    }
                }
            }
            post_data[key] = value;
        }
        return post_data;
    }
    return {
        triggerSuccessCallbacks: function (data) {
            saveSuccessCallbacks(null, data);
        },
        triggerErrorCallbacks: function (data) {
            saveErrorCallbacks(null, data);
        },
        triggerBeforeCallbacks: function (data) {
            saveBeforeCallbacks(null, data);
        },
        registerCallbacks: function (caller, callbacks, save_types) {
            if (!callbacks) {
                dodebug('Saver::registerCallbacks, no callbacks provided!');
                return;
            }
            if (callbacks.hasOwnProperty('start')) {
                Saver.registerBeforeCallback(caller, callbacks.start, save_types);
            }
            if (callbacks.hasOwnProperty('success')) {
                Saver.registerSuccessCallback(caller, callbacks.success, save_types);
            }
            if (callbacks.hasOwnProperty('error')) {
                Saver.registerErrorCallback(caller, callbacks.error, save_types);
            }
        },
        registerBeforeCallback: function (caller, callback, save_types) {
            if (!callback) {
                dodebug('Saver::registerBeforeCallback, no callback provided!');
                return;
            }
            _callbacks.before.push({
                caller: caller,
                callback: callback,
                save_types: save_types
            });
        },
        registerSuccessCallback: function (caller, callback, save_types) {
            if (!callback) {
                dodebug('Saver::registerBeforeCallback, no callback provided!');
                return;
            }
            _callbacks.success.push({
                caller: caller,
                callback: callback,
                save_types: save_types
            });
        },
        registerErrorCallback: function (caller, callback, save_types) {
            if (!callback) {
                dodebug('Saver::registerBeforeCallback, no callback provided!');
                return;
            }
            _callbacks.error.push({
                caller: caller,
                callback: callback,
                save_types: save_types
            });
        },
        addSaveRule: function (name, url, save_data, type) {

            if (!name || !url || !save_data) {
                dodebug('Saver::addSaver, name, url, and save_data all required parameters!');
                return;
            }

            if (!type) {
                type = 'POST';
            }

            var saver = {
                name: name,
                url: url,
                data: save_data,
                http_type: type
            };
            var indx = false;

            if ((indx = _savers.indexOfProp('name', name)) >= 0) {
                _savers[indx] = saver;
            } else {
                _savers.push(saver);
            }

        },
        removeSaveRule: function (save_type) {
            if (!save_type) {
                dodebug('Saver::removeSaver, save identifier not given, save_type=' + save_type);
                return;
            }
            var indx = false;
            if ((indx = _savers.indexOfProp('name', save_type)) >= 0) {
                _savers.splice(indx, 1);
            }
        },
        save: function (name, data, options) {
            if (!name) {
                dodebug('Saver::save, no save identifier given! name= ' + name);
                return false;
            }
            var on_before = false;
            var on_success = false;
            var on_error = false;
            var callbacks_first = false;
            var elem = false;
            for (var opt in options) {
                switch (opt) {
                case 'before':
                    on_before = options[opt];
                    break;
                case 'success':
                    on_success = options[opt];
                    break;
                case 'error':
                    on_error = options[opt];
                    break;
                case 'callFirst':
                    callbacks_first = Boolean(options[opt]);
                    break;
                case 'callPrevent':
                    break;
                case 'elem':
                    elem = options[opt];
                    break;
                default:
                    dodebug('Saver::save, invalid option detected: ' + opt);
                    break;
                }
            }
            var indx = _savers.indexOfProp('name', name);
            if (indx === -1) {
                dodebug('Saver::save, no saver found with name= ' + name);
                return false;
            }
            var saver = _savers[indx];
            try {
                var post = _createPostData(saver, data, elem);
                dodebug(post);
                dodebug(saver.http_type);
                saveBeforeCallbacks(saver.name, post, on_before, callbacks_first);
                $.ajax({
                    type: saver.http_type,
                    url: saver.url,
                    data: post,
                    dataType: 'json',
                    success: function (data, txtstatus) {
                        if (data && data.returnStatus && data.returnStatus.loggedIn) {
                            dodebug('Saver returnStatus a logged in: ' + data.returnStatus.loggedIn);
                        } else {
                            dodebug('Saver returnStatus a logged in: NO RETURN DATA');
                        }
                        if (!data.returnStatus.hasOwnProperty('status') || data.returnStatus.loggedIn < 1) {
                            //showError("You have been logged out. If you did not log out of Facebook, you probably have third-party cookies disabled.\n\nPlease enable third party cookies in your web browser in order for " + getGlobal('vendor') + " to be able to communicate with Facebook.");
                            //window.location = "/logout";
                            return false;
                        }
                        if (!data || !data.hasOwnProperty('returnStatus')) {
                            saveErrorCallbacks(saver.name, data, on_error, callbacks_first);
                            return false;
                        }

                        if (!data.returnStatus.hasOwnProperty('status') || data.returnStatus.status < 0) {
                            saveErrorCallbacks(saver.name, data.returnStatus, on_error, callbacks_first);
                            return false;
                        }

                        saveSuccessCallbacks(saver.name, data, on_success, callbacks_first);
                    },
                    error: function (data, txtstatus) {
                        saveErrorCallbacks(saver.name, data, on_error, callbacks_first);
                        dodebug('Saver returnStatus b logged in: ' + data.returnStatus.loggedIn);
                        if (!data.returnStatus.hasOwnProperty('status') || data.returnStatus.loggedIn < 1) {
                            //showError("You have been logged out. If you did not log out of Facebook, you probably have third-party cookies disabled.\n\nPlease enable third party cookies in your web browser in order for " + getGlobal('vendor') + " to be able to communicate with Facebook.");
                            //window.location = "/logout";
                            return false;
                        }
                    }
                });
            } catch (exception) {
                dodebug('Saver::save, error making save call: ' + exception);
            }
        }
    };
})();

var SaveNotifier = Class.extend({
    init: function () { /*this.install();Saver.registerCallbacks(this,{start:this.beforeSave,success:this.saveSuccess,error:this.error});*/
    },
    install: function () { /*this._notifier=$("<div id='rm-save-notifier'></div>").hide().css({position:'fixed',top:'0px',left:'50%',zIndex:10000});this._container=$("<div></div>").css({backgroundColor:"#555555",backgroundImage:"url(http://b.ak.static-abc.com/images/common/bg/bg_page_gradient_small.png?v=2.70)",backgroundPosition:"bottom",backgroundRepeat:"repeat-x",color:"#dddddd",padding:"5px 10px 8px",position:"relative",left:"-50%",textAlign:"center",zIndex:1}).appendTo(this._notifier);this._messageBox=$("<span class='save-message'>Saving...</span>").css({marginTop:"5px"}).appendTo(this._container);this._loaderGif=$("<img src='http://a.ak.static-abc.com/images/common/ajax-save-loader.gif?v=2.70' />").css({margin:"3px 0 0 10px"}).appendTo(this._container);this._notifier.appendTo($('body'));*/
    },
    beforeSave: function () { /*this._container.css({backgroundColor:"#555555",color:"#dddddd"});this._messageBox.text("Saving...");this._loaderGif.show();if(this._notifier.is(':hidden')){this._notifier.fadeIn().animate({opacity:1},1000);}*/
    },
    saveSuccess: function () { /*this._notifier.fadeOut();*/
    },
    error: function (errData) { /*dodebug('SaveNotifier::error',errData,'error');this._container.css({backgroundColor:"#dddddd",color:"#000000"});this._messageBox.text('Please try again');this._loaderGif.hide();this._notifier.animate({opacity:1},1000).fadeOut();*/
    }
});
var RMFBAutoshare = (function () {
    var enableAutoshare = function (targetButton, callback) {
            if (targetButton && targetButton.data('rmPageId')) {
                targetButton.attr('disabled', 'disabled').animate({
                    opacity: 0.5
                }, 250, function () {
                    $(this).addClass('disabled');
                });
                $.ajax({
                    type: "post",
                    url: "/saveajax/updateUseAutoshare/",
                    data: {
                        autoshare: true,
                        rmPageId: parseInt(targetButton.data('rmPageId'))
                    },
                    dataType: "json",
                    success: function (data, txtstatus) {
                        if (data.returnStatus.status < 0) {
                            showError("Save autoshare settings, something went wrong: " + data.returnStatus.description);
                            if (targetButton) {
                                targetButton.css({
                                    opacity: 1
                                }).removeAttr('disabled').removeClass('disabled');
                            }
                        }

                        if (callback) {
                            targetButton.css({
                                opacity: 1
                            }).removeAttr('disabled').removeClass('disabled');
                            callback.call(this, data);
                        }
                    },
                    error: function (data, txtstatus) {
                        if (targetButton) {
                            targetButton.css({
                                opacity: 1
                            }).removeAttr('disabled').removeClass('disabled');
                        }
                    }
                });
            } else {
                dodebug('RMFBAutoshare::enableAutoshare: an error occurred: rm id missing from button');
            }
        };
    var checkHasAppInstalled = function (fbPageId, callback) {
            $.ajax({
                type: "post",
                data: {
                    fbPageId: fbPageId
                },
                dataType: "json",
                cache: false,
                url: "/getajax/isAppInstalled/",
                success: function (data, txtstatus) {
                    callback.call(this, data);
                }
            });
        };
    var checkHasSharePermission = function (fbPageId, callback) {
            $.ajax({
                type: "post",
                data: {
                    fbPageId: fbPageId
                },
                dataType: "json",
                cache: false,
                url: "/getajax/hasSharePermission/",
                success: function (data, txtstatus) {
                    callback.call(this, data);
                }
            });
        };
    var revokeSharePermission = function (callback) {
            $.ajax({
                type: "get",
                dataType: "json",
                cache: false,
                url: "/getajax/revokeSharePermission/",
                success: function (data, txtstatus) {
                    callback.call(this, data);
                }
            });
        };
    var defaultButtonHandler = function (event) {
            var autoshareButton = $(event.currentTarget);
            RMFBAutoshare.request(autoshareButton, function () {
                autoshareButton.fadeOut(function () {
                    $(this).parent().append('<p class="message info">Autoshare activated! You can now edit your Autoshare settings from the <a href="/settings" title="' + getGlobal('brand') + ' Settings">settings</a> page.</p>');
                });
            });
        };
    return {
        init: function (targetButton, callback) {
            dodebug('RMFBAutoshare::init');
            if (targetButton && !targetButton.data('hasInstalledApp')) {
                targetButton.attr('disabled', 'disabled').addClass('loading').addClass('disabled').text('Checking status...');
                checkHasAppInstalled(targetButton.data('fbPageId'), function (installed) {
                    targetButton.data('hasInstalledApp', installed);
                    if (installed === true) {
                        targetButton.text('Verifying with FB...');
                        checkHasSharePermission(targetButton.data('fbPageId'), function (share) {
                            targetButton.data('hasSharePermissions', share);
                            if (share === true) {
                                targetButton.removeAttr('disabled').removeClass('disabled').removeClass('loading').text('Enable Autoshare');
                            } else {
                                revokeSharePermission(function (revoked) {
                                    targetButton.removeAttr('disabled').removeClass('disabled').removeClass('loading').text('Enable Autoshare');
                                });
                            }
                            if (callback && typeof (callback) == 'function') {
                                dodebug('calling callback.');
                                callback.call(targetButton);
                            } else {
                                targetButton.click(defaultButtonHandler);
                            }
                        });
                    } else {
                        targetButton.removeClass('loading').removeAttr('href').text(getGlobal('brand') + ' not installed');
                    }
                });
            } else {
                dodebug('RMFBAutoshare::init: no source button, or init already ran');
            }
        },
        request: function (targetButton, callback) {
            if (targetButton && targetButton.data('hasInstalledApp') === true) {
                if (false && targetButton.data('hasSharePermissions') === true) {
                    enableAutoshare(targetButton, callback);
                } else {
                    FB.login(function (response) {
                        if (response.session && response.perms && response.perms.indexOf('publish_stream') > -1) {
                            enableAutoshare(targetButton, callback);
                        } else {
                            dodebug('AutoSharePerms::enable: user cancelled.');
                        }
                    }, {
                        perms: 'publish_stream',
                        profile_selector_ids: targetButton.data('fbPageId')
                    });
                }
            } else {
                dodebug('RMFBAutoshare::requestAutoshare: no source button, hasInstalledApp not set or false');
            }
        }
    };
})();
var RMUIUtility = Class.extend({
    init: function () {},
    getWidget: function (name, domTarget) {
        if (!name) {
            dodebug('RMUIUtility::getWidgets - "name" parameter is not set.', 'error');
            return false;
        }
        var el = $(domTarget);
        if (!el) {
            dodebug('RMUIUtility::getWidgets - Not a valid DOM element:', domTarget, 'error');
            return false;
        }
        var assocWidgets = this.getWidgets(el);
        if (!assocWidgets) {
            dodebug('RMUIUtility::getWidget - No associated widgets found for element:', domTarget, 'error');
            return false;
        }
        $.each(assocWidgets, function (indx, widget) {
            if (widget._name == name) {
                return widget;
            }
        });
        return eval('new ' + name + '(' + el + ');');
    },
    getWidgets: function (target) {
        var el = $(target);
        if (!el) {
            dodebug('RMUIUtility::getWidgets - Can\'t find widgets for element:', target, 'error');
            return false;
        }
        return el.data('widgets');
    }
});
var ModalUtility = RMUIUtility.extend({
    _domTarget: false,
    _content: false,
    _window: false,
    _overlay: false,
    _callback: false,
    _caller: false,
    _callbackArgs: [],
    _fullSize: false,
    _loading: false,
    init: function (targetElement, fullSize, formHTML) {
        this._super(targetElement);
        if (typeof (targetElement) === 'string') {
            targetElement = $(targetElement);
        }
        this._domTarget = targetElement;
        this._name = "ModalUtility";
        this._enabled = true;
        this._fullSize = fullSize;
        this._loading = false;
        this.install();
    },
    install: function () {
        this._overlay = $('<div class="editor-modal-layer modal-layer"></div>');
        this._window = $('<div class="floating-window"></div>');
        if (this._fullSize) {
            this._window.addClass('full');
        }
        this._window.appendTo(this._overlay);
        this._overlay.appendTo(this._domTarget).hide();
    },
    enable: function () {
        this._enabled = true;
    },
    disable: function () {
        this._enabled = false;
    },
    activate: function () {
        var _modalWindow = this;
        this._overlay.fadeIn('slow', function () {
            _modalWindow.scrollToView();
        });
        if (__inputs = this._content.find("input[name='cancel']")) __inputs.bind('click', {
            utility: this
        }, this.cancelHandler);
        $(".modal-close").bind('click', {
            utility: this
        }, this.cancelHandler);
        $("body").bind('click', {
            utility: this
        }, this.cancelHandler);
        this._window.bind('click', function (e) {
            e.stopPropagation();
        });
        if ((this._window.height() + 100) < $(window).height()) {
            $(window).bind('scroll', {
                widget: this
            }, this.handleScroll);
        }
        if (this._callback) {
            this._callback.call(this._caller, this._callbackArgs);
        }
    },
    deactivate: function () {
        $(".modal-close").unbind('click', this.cancelHandler);
        $("body").unbind('click', this.cancelHandler);
        this._window.unbind('click');
        this._overlay.fadeOut('slow');
        $(window).unbind('scroll', this.handleScroll);
    },
    showDialog: function (content, callback) {
        if (this._enabled) {
            if (content) {
                this._content = $(content);
                this._window.empty().append(content).wrapInner("<div></div>");
                this._window.children('div').append("<a class='editor-main-hover-close modal-close' href='#close'>X</a>");
                var __form = false;
                if (__form = this._window.find("form")) {
                    __form.bind('submit', {
                        utility: this
                    }, this.submitHandler);
                }
            }
            $('.hidden', this._window).removeClass('hidden').hide();
            if (typeof (callback) == 'array') {
                this._callback = callback[0];
                if (caller.length > 1) {
                    this._caller = caller[1];
                    if (caller.length > 2) {
                        this._callbackArgs = caller[2];
                    }
                }
            } else if (typeof (callback) == 'function') {
                this._callback = callback;
            }
            this.activate();
        }
    },
    showLoadingDialog: function () {
        if (this._enabled) {
            this._loading = true;
            this._content = $('<p class="loading">Loading...</p>');
            this._window.empty().append(this._content).wrapInner('<div></div>');
            this.activate();
        }
    },
    getCurrentContent: function () {
        return this._window.children('div').children();
    },
    hasContent: function () {
        return this._content != false;
    },
    getWindow: function () {
        return this._window;
    },
    setError: function (msg) {
        this._error = {
            status: -1,
            msg: msg
        };
        return this._error;
    },
    setFullFrame: function (fullSize) {
        this._fullSize = fullSize;
        if (fullSize) {
            this.getWindow().addClass('full');
        } else {
            this.getWindow().removeClass('full');
        }
    },
    submitHandler: function (e) {
        var data = {};
        $(e.currentTarget).children("input[type='text']").each(function () {
            data[$(this).attr("name")] = $(this).val();
        });
        if (e.data.utility._callback) {
            e.data.utility._callback.call(e.data.utility._caller, data);
        }
        e.data.utility.deactivate();
        return false;
    },
    cancelHandler: function (e) {
        e.data.utility.setError('user cancelled');
        e.data.utility.deactivate();
        return false;
    },
    scrollToView: function () {
        var scrollDiff = (Math.max($(window).scrollTop(), 45) - this._domTarget.offset().top);
        this._window.stop().animate({
            top: scrollDiff + 'px',
            marginTop: ($(window).scrollTop() > 45) ? 0 : '50px'
        }, 250);
    },
    handleScroll: function (event) {
        if (event.data.widget._window.height() + 100 < $(window).height()) {
            event.data.widget.scrollToView();
        }
        return false;
    }
});
var InlineEditWidget = RMUIWidget.extend({
    _name: "InlineEditWidget",
    _multi: false,
    _contentArea: false,
    _inputArea: false,
    _dom: {
        input: false
    },
    init: function (targetElement, options) {
        this._super(targetElement, options);
        if (options) {
            this._multi = options.hasOwnProperty('multi') ? options.multi : false;
            this._aggregate = options.hasOwnProperty('aggregate') ? options.aggregate : 'array';
        }
    },
    install: function () {
        this._super();
        var target = this.getTarget();
        var tagName = 'span';
        switch (target.css('display')) {
        case 'block':
            tagName = 'div';
            target.addClass('block');
            break;
        case 'none':
            tagName = target.get(0).tagName.toLowerCase();
            if (tagName == 'div') {
                target.addClass('block');
            }
            break;
        case 'inline-block':
        case 'inline':
        default:
            tagName = 'span';
            break;
        }
        this._inputArea = $('<' + tagName + ' class="rm-inline-edit-input"></' + tagName + '>');
        this._inputArea.append($(this._dom.input));
        this._contentArea = $('<' + tagName + ' class="rm-inline-edit-content"></' + tagName + '>').html(target.html());
        if (this._multi) {
            $("<a href='#remove-this' class='rm-inline-edit-multiremove'>remove</a>").bind('click', {
                widget: this
            }, this.processUserEvent).appendTo(this._contentArea);
        }
        target.empty().append(this._contentArea).append(this._inputArea);
        this._contentArea.attr('tabindex', 0);
        this._inputArea.hide();
        if (!target.hasClass('disabled')) {
            this.enable();
        }
    },
    enable: function () {
        this._super();
        this._contentArea.css({
            cursor: 'pointer'
        });
        this._contentArea.bind('mouseenter', {
            widget: this
        }, this.processUserEvent).bind('mouseleave', {
            widget: this
        }, this.processUserEvent);
        this._contentArea.bind('click focus', {
            widget: this
        }, this.processUserEvent);
        this._contentArea.bind('blur', {
            widget: this
        }, this.processUserEvent);
        this.getTarget().bind('click', this.processUserEvent);
    },
    disable: function () {
        this._super();
        this._contentArea.css({
            cursor: ''
        });
        this._contentArea.unbind('mouseenter', this.processUserEvent).unbind('mouseleave', this.processUserEvent);
        this._contentArea.unbind('click focus', this.processUserEvent);
        this._contentArea.unbind('blur', this.processUserEvent);
        this.getTarget().unbind('click', this.processUserEvent);
    },
    activate: function () {
        if (!this._super()) {
            return false;
        }
        this._contentArea.hide();
        this._inputArea.show();
        $('body').bind('click', {
            widget: this
        }, this.processUserEvent);
        return true;
    },
    deactivate: function () {
        if (!this._super()) return false;
        this._inputArea.hide();
        this._contentArea.show();
        $('body').unbind('click', this.processUserEvent);
        if (this.needsUpdate()) {
            this.commit();
        }
        return true;
    },
    commit: function () {
        this._contentArea.css({
            border: 'none'
        });
        this.triggerEvent('update');
    },
    needsUpdate: function () {
        return true;
    },
    processUserEvent: function (event, doSuper) {
        if (doSuper) return this._super(event);
        if (event.data.widget._enabled) {
            switch (event.type) {
            case 'mouseenter':
                $(event.currentTarget).css({
                    borderBottom: '1px dotted #000',
                    marginBottom: '-1px'
                });
                break;
            case 'mouseleave':
                $(event.currentTarget).css({
                    borderBottom: 'none',
                    marginBottom: '0px'
                });
                break;
            case 'click':
                switch (event.currentTarget) {
                case event.data.widget._contentArea.get(0):
                    event.data.widget.activate();
                    break;
                case event.data.widget._domTarget.get(0):
                    event.stopPropagation();
                    return false;
                    break;
                case $('body').get(0):
                    event.data.widget.deactivate();
                    break;
                default:
                    dodebug(event.data.widget._name + '::processUserEvent(click): couldn\'t match element for:');
                    dodebug(event.currentTarget);
                    break;
                }
                break;
            case 'focus':
                if (event.currentTarget == event.data.widget._contentArea.get(0)) {
                    event.data.widget.activate();
                }
                break;
            case 'blur':
                if (event.currentTarget == event.data.widget._contentArea.get(0)) {
                    event.data.widget.deactivate();
                }
                break;
            default:
                break;
            }
        }
    }
});
var TextInlineEditWidget = InlineEditWidget.extend({
    _inputField: false,
    _autoSave: true,
    _activeFeedbackTimer: false,
    _prompt: '',
    init: function (targetElement, options) {
        this._name = "TextInlineEditWidget";
        this._autoSave = true;
        this._multiline = $(targetElement).hasClass('multiline');
        this._prompt = '';
        if (options) {
            if (options.hasOwnProperty('autoSave')) {
                this._autoSave = options.autoSave;
            }
            if (options.hasOwnProperty('multiline')) {
                this._multiline = options.multiline;
            }
            if (options.hasOwnProperty('prompt')) {
                this._prompt = options.prompt;
            }
        }
        this._dom.input = (this._multiline) ? "<textarea rows='4' cols='40'></textarea>" : "<input type='text' />";
        this._prompt = "Online store link";
        this._super(targetElement, options);
    },
    install: function (targetElement) {
        this._super(targetElement);
        if (this._domTarget.text().trim() == '') {
            this._empty = true;
        }
        this._inputField = this._inputArea.children();
        this._inputField.attr({
            name: this._domTarget.attr('name')
        }).addClass('rm-input-field');
        if (this._multiline) {
            this._inputField.val(this._contentArea.html().replace(/\r?\n/ig, '').replace(/<br[ \/]*>/ig, "\n"));
        } else this._inputField.val(this._contentArea.text());
        this._contentArea.children('input').bind('focus', {
            widget: this
        }, function (e) {
            e.data.widget.activate();
        });
        this.checkForEmpty();
        this.refreshCSS();
    },
    activate: function () {
        if (!this._super()) return false;
        this._inputField.bind('keydown', {
            widget: this
        }, function (e) {
            switch (e.keyCode) {
            case 9:
            case 13:
                if (e.data.widget._domTarget && !e.data.widget._multiline) {
                    e.data.widget.deactivate();
                }
                break;
            case 27:
                e.data.widget.cancel();
                e.data.widget.deactivate();
            default:
                break;
            }
        }).bind('blur', {
            widget: this
        }, this.processUserEvent);
        this.refreshCSS();
        this._inputField.focus();
    },
    deactivate: function () {
        this._super();
        this._inputField.unbind('keydown blur', this.processUserEvent);
        if (this._multiline && !this._empty) {
            this._contentArea.html(this._inputField.val().replace(/\r?\n/ig, '<br />'));
        }
        if (this._activeFeedbackTimer) {
            clearInterval(this._activeFeedbackTimer);
        }
    },
    enable: function () {
        this._super();
        if (this._empty && this._domTarget.is(':hidden')) {
            this._domTarget.show();
        }
    },
    disable: function () {
        this._super();
        if (this._empty) {
            this._domTarget.hide();
        }
    },
    changeMode: function (mode) {
        this._super(mode);
        switch (mode) {
        case 'css':
            this.disable();
            break;
        case 'content':
            this.enable();
            break;
        default:
            break;
        }
    },
    commit: function () {
        this._empty = (this._inputField.val().trim().length < 1);
        var data = this._inputField.val();
        if (this._domTarget.hasClass("multi")) {
            var others = this._domTarget.siblings(".multi[name='" + this._inputField.attr("name") + "']");
            others.each(function () {
                data += ' ' + $(this).data('TextInlineEditWidget')._contentArea.text();
            });
        }
        switch (this._inputField.attr("name")) {
        case "rm-track-title":
            if (data.length > 255) {
                data = data.substring(0, 254);
                this._inputField.val(data);
            }
            break;
        case "show-price":
            if (data.length > 31) {
                data = data.substring(0, 30);
                this._inputField.val(data);
            }
            break;
        case "show-venue":
            if (data.length == 0) {
                var showCityParentDiv = this._inputField.parent().parent().next().children(".rm-inline-edit-content");
                showCityParentDiv.click();
                showCityParentDiv.next().children('input[name="show-city"]').val("");
                $('div#main-container').click();
            }
            break;
        case "twitter":
            data = data.replace("http://", "").replace("www.", "").replace("twitter.com/", "");
            if (data.length > 20) {
                data = data.substring(0, 20);
            }
            this._inputField.val(data);
            break;
        case "twitterList":
            if (data.length > 25) {
                data = data.substring(0, 25);
                this._inputField.val(data);
            }
            break;
        case "rssFeed":
            data = data.replace("feed://http://", "http://").replace("feed://", "http://").replace("feed:http", "http");
            this._inputField.val(data);
            break;
        default:
            if (this._inputField.attr('name').toLowerCase().match('edit-ticket-link-') || this._inputField.attr('name').toLowerCase().match('rm-track-purchase-url')) {
                if (this.isUrl(data)) {
                    this._inputField.val(data);
                    this._inputArea.css({
                        outline: ''
                    });
                    this._contentArea.css({
                        outline: ''
                    });
                } else {
                    this._inputArea.css({
                        outline: '2px solid #cc0000'
                    });
                    this._contentArea.css({
                        outline: '2px solid #cc0000'
                    });
                    this._inputField.val(data);
                }
            }
            break;
        }
        if (this._multiline) {
            var convertedContent = this._inputField.val().replace(/\r?\n/ig, '<br />');
            if (convertedContent.length > 0) {
                this._contentArea.html(convertedContent);
            } else {
                this._contentArea.text(convertedContent);
            }
            data = convertedContent;
        } else {
            this._contentArea.text(this._inputField.val());
        }
        if (this._autoSave) {
            dodebug(this._name + '::commit(): auto saving {' + this._inputField.attr('name') + ': ' + data + '}');
            if (this._inputField.attr('name').toLowerCase().match('edit-ticket-link-') && !this.isUrl(data)) {} else {
                Saver.save(this._inputField.attr('name'), data, {
                    elem: this._inputField
                });
            }
        }
        this.checkForEmpty();
        this._super();
    },
    getStoredData: function () {
        var storedData = {};
        storedData[this._domTarget.attr('name')] = this._inputField.val();
        return storedData;
    },
    cancel: function () {
        this._inputField.val(this._contentArea.text());
    },
    needsUpdate: function () {
        return (this._contentArea.text() != this._inputField.val());
    },
    checkForEmpty: function () {
        if (this._empty) {
            if (this._multiline) {
                this._contentArea.html('<textarea class="empty" name="' + this._inputField.attr('name') + '" ></textarea>');
            } else {
                this._contentArea.html('<input type="text" class="empty" name="' + this._inputField.attr('name') + '" />');
            }
            this._contentArea.css({
                opacity: 0.5
            }).children().val(this._prompt);
            this._contentArea.children("textarea, input").bind('focus', {
                widget: this
            }, function (e) {
                e.data.widget.activate();
            });
        } else {
            this._contentArea.css({
                opacity: ''
            });
            if (this._domTarget.hasClass('wrap-em')) {
                var wrapped = '<em>' + this._contentArea.html() + '</em>';
                this._contentArea.html(wrapped);
            }
        }
    },
    refreshCSS: function () {
        var css = {
            backgroundColor: this._domTarget.css('backgroundColor'),
            color: this._domTarget.css('color'),
            fontSize: this._domTarget.css('fontSize'),
            fontFamily: this._domTarget.css('fontFamily'),
            fontWeight: this._domTarget.css('fontWeight'),
            fontStyle: this._domTarget.css('fontStyle')
        };
        this._inputField.css(css);
    },
    copy: function () {
        var ret = this._super();
        ret.text(this._contentArea.text());
        return ret;
    },
    clear: function () {
        this._inputField.val('');
        this._contentArea.text('');
        this._empty = true;
        this.checkForEmpty();
    },
    setValue: function (value, save) {
        if (!value) {
            this.clear();
        } else {
            this._inputField.val(value);
            if (!this._multiline) {
                this._contentArea.text(value);
            } else {
                this._contentArea.html(value.replace(/\r?\n/ig, '<br />'));
            }
            this._empty = false;
            this.checkForEmpty();
        }
        if (save) {
            this.commit();
        }
    },
    getValue: function () {
        return this._inputField.val();
    },
    processUserEvent: function (event, doSuper) {
        if (doSuper) return this._super(event);
        switch (event.type) {
        case 'blur':
            event.data.widget.deactivate();
            break;
        }
        event.stopPropagation();
        if (event.data && event.data.widget) return event.data.widget.processUserEvent(event, true);
    },
    isUrl: function (s) {
        var startsWithSlash = /^\/.*/;
        var startsWithHttpPrefix = /^https?:\/\/.*/;
        var prefixedString = s;
        if (!startsWithHttpPrefix.test(s)) {
            prefixedString = "http://" + prefixedString;
        }
        var RegExp = /^https?:\/\/.*\.[\w]{1,4}(\W|$).*/;
        return ((!startsWithSlash.test(s) && RegExp.test(prefixedString)) || s.length <= 0);
    }
});
var ListSelectionWidget = RMUIWidget.extend({
    _name: "ListSelectionWidget",
    _value: false,
    _defaultValue: false,
    _selections: {
        list: false,
        html: false
    },
    _dom: {
        pane: false,
        field: false
    },
    _saverName: false,
    _clearLock: false,
    init: function (targetElement, options) {
        dodebug(this._name + '::init');
        if (options && options.hasOwnProperty('defaultValue')) {
            this._defaultValue = options.defaultValue;
        } else {
            this._defaultValue = '';
        }
        if (options && options.hasOwnProperty('saverName')) {
            this._saverName = options.saverName;
            dodebug(this._name + ':: will save as : ' + options.saverName);
        }
        if (options && options.hasOwnProperty('pane')) {
            this._dom.pane = options.pane;
        }
        if (options && options.hasOwnProperty('field')) {
            this._dom.field = options.field;
            if (this._dom.field != targetElement) {
                dodebug(this._name + ':: selectionField forced to targetElement ');
                this._dom.field = targetElement;
            }
        }
        if (options && options.hasOwnProperty('list')) {
            this._selections.list = options.list;
        }
        dodebug(this._name + ' : and field classes : ' + this._dom.field.attr('class'));
        this._super(targetElement, options);
    },
    install: function (targetElement) {
        this._super(targetElement);
        var initialValue = this._domTarget.text();
        if (this._dom.field == false) {
            this._dom.field = $('<span class="rm-list-selection-field">' + initialValue + '</span>');
            this._domTarget.html(this._dom.field);
        }
        if (this._dom.pane == false) {
            this._dom.pane = $('<div class="rm-list-selection-pane"></div>');
            this._domTarget.append(this._dom.pane);
        }
        if (this._selections.list != false) {
            buildListHtml();
            installListHtml();
        }
        if (!initialValue || initialValue.length < 1) {
            initialValue = this._defaultValue;
            this._dom.field.html(initialValue);
        }
        this._value = this._dom.field.text();
    },
    enable: function () {
        dodebug(this._name + '::enable');
        this._super();
        $('li', this._dom.pane).bind('mouseenter mouseleave click', {
            widget: this
        }, this.selectionEvent).attr('tabindex', 0);
        $(':checkbox', this._dom.pane).bind('mouseup', {
            widget: this
        }, this.checkEvent);
    },
    disable: function () {
        dodebug(this._name + '::disable');
        this._super();
        $('li', this._dom.pane).unbind('mouseenter mouseleave click', this.selectionEvent).removeAttr('tabindex');
        $(':checkbox', this._dom.pane).unbind('mouseup', this.checkEvent);
    },
    buildListHtml: function (listOfSelections) {
        this._selections.html = $('<ul class="rm-selections"></ul>');
        if (!listOfSelections) {
            listOfSelections = this._selections.list;
            if (!listOfSelections) {
                dodebug(this._name + '::buildListHtml: error : no list');
                listOfSelections = new Array();
            }
        }
        var i;
        for (i = 0; i < listOfSelections.length; i++) {
            this._selections.html.append('<li><input type="checkbox" /><span class="ls-value">' + listOfSelections[i] + '</span></li>');
        }
        return this._selections.html;
    },
    installListHtml: function (htmlOfSelections) {
        if (!htmlOfSelections) {
            htmlOfSelections = this._selections.html;
        }
        if (htmlOfSelections.children('li').length < 1) {
            dodebug(this._name + '::instalListHtml: error : list is empty');
        }
        this._dom.pane.html(htmlOfSelections);
        this.cleanPane();
    },
    cleanPane: function () {
        dodebug(this._name + '::cleanPane');
        $('.hover', this._dom.pane).removeClass('hover');
        $('.selected', this._dom.pane).removeClass('selected');
        $(':checked', this._dom.pane).removeAttr('checked');
        selected = this._value;
        $('li', this._dom.pane).each(function () {
            if ($(this).children('.ls-value').text() == selected) {
                $(this).addClass('selected').children('input').attr('checked', 'checked');
            }
        });
    },
    commit: function (newValue) {
        dodebug(this._name + '::commit to value = ' + newValue);
        if (newValue == this._default) {
            newValue = '';
        }
        if (this._dom.field.text() == '') {
            this._dom.field.text() == this._default;
        }
        if (this._saverName != false) {
            this._dom.field.html(newValue.replace(/&/g, '&amp;'));
            dodebug(this._saverName + ':: saving ' + newValue);
            Saver.save(this._saverName, newValue, {
                elem: this._domTarget
            });
        }
        this._value = newValue;
        this.triggerEvent('update');
    },
    selectionEvent: function (event) {
        var selection = $(event.currentTarget);
        var widget = event.data.widget;
        var newValue = selection.children('.ls-value').text();
        switch (event.type) {
        case 'mouseenter':
            selection.addClass('hover');
            widget.triggerEvent('hoverIn');
            break;
        case 'mouseleave':
            selection.removeClass('hover');
            widget.triggerEvent('hoverOut');
            widget.cleanPane();
            break;
        case 'click':
            dodebug(widget._name + '::selectionEvent: ' + event.type + ' : ' + newValue);
            if (!selection.hasClass('selected')) {
                widget.commit(newValue);
                widget.cleanPane();
            } else if (selection.hasClass('selected')) {
                widget.commit(widget._default);
                widget.cleanPane();
            }
            break;
        default:
            dodebug(widget._name + ':: error : event type not found');
            break;
        }
    },
    checkEvent: function (event) {
        dodebug('checkEvent');
        $(event.currentTarget).attr('checked', 'checked');
    }
});
var GenreSevenWidget = RMUIWidget.extend({
    _name: "GenreSevenWidget",
    _genreSelection: {
        main1: false,
        sub1: false,
        main2: false,
        sub2: false,
        main3: false,
        sub3: false
    },
    _domGenreA: {
        tab: false,
        mainField: false,
        subField: false,
        btnClear: false
    },
    _domGenreB: {
        tab: false,
        mainField: false,
        subField: false,
        btnClear: false
    },
    _domGenreC: {
        tab: false,
        mainField: false,
        subField: false,
        btnClear: false,
        customField: false,
        customInput: false
    },
    _domPane: {
        target: false,
        list: false,
        head: false,
        foot: false,
        menu: false
    },
    _wrapperDom: false,
    _activeGroup: false,
    _listOfGenres: false,
    _htmlOfGenres: false,
    _genreReady: false,
    _genreNameMap: false,
    _customGenreWidget: false,
    init: function (targetElement, options) {
        dodebug(this._name + '::init');
        var widget = this;
        var getListOfGenres = new Array(new Array);
        $.ajax({
            url: '/getajax/getGenreMap/',
            type: 'post',
            dataType: 'json',
            success: function (json, response) {
                if (response == 'success') {
                    widget._genreNameMap = json.genreNameMap;
                    for (var mainGenre in json.genreNameMap) {
                        getListOfGenres[0].push(mainGenre);
                        getListOfGenres.push(json.genreNameMap[mainGenre]);
                    }
                    widget._listOfGenres = getListOfGenres;
                    widget.buildGenres();
                } else {
                    dodebug('GenreSevenWidget:: getGenreMap : ' + response);
                }
            }
        });
        this._super(targetElement);
    },
    install: function () {
        this._super();
        this._wrapperDom = $('#editor-main-hover-layer');
        this._domGenreA.tab = $('#editor-genre-one', this._domTarget);
        this._domGenreA.mainField = $('[rel=main]', this._domGenreA.tab);
        this._domGenreA.subField = $('[rel=sub]', this._domGenreA.tab);
        this._domGenreA.btnClear = $('[rel=clear]', this._domGenreA.tab);
        this._domGenreB.tab = $('#editor-genre-two', this._domTarget);
        this._domGenreB.mainField = $('[rel=main]', this._domGenreB.tab);
        this._domGenreB.subField = $('[rel=sub]', this._domGenreB.tab);
        this._domGenreB.btnClear = $('[rel=clear]', this._domGenreB.tab);
        this._domGenreC.tab = $('#editor-genre-three', this._domTarget);
        this._domGenreC.mainField = $('[rel=main]', this._domGenreC.tab);
        this._domGenreC.subField = $('[rel=sub]', this._domGenreC.tab);
        this._domGenreC.btnClear = $('[rel=clear]', this._domGenreC.tab);
        this._domGenreC.customField = $('[rel=custom]', this._domGenreC.tab);
        this._domPane.target = $('#genre-pane', this._domTarget);
        this._domPane.head = $('.pane-head', this._domPane.target);
        this._domPane.list = $('.select-list', this._domPane.target);
        this._domPane.foot = $('.pane-foot', this._domPane.target);
        this._domPane.menu = $('.genre-menu', this._domPane.target);
        this._domPane.head.css('opacity', 0);
        this._domPane.foot.css('opacity', 0);
        var mainGenreList = this._listOfGenres[0];
        this._genreSelection.main1 = new ListSelectionWidget(this._domGenreA.mainField, {
            defaultValue: 'Genre',
            pane: this._domPane.list,
            field: this._domGenreA.mainField
        });
        this._genreSelection.main1.addCallback('update', this, this.selectGenreEvent, {
            widget: this,
            subwidget: this._genreSelection.main1
        });
        this._domGenreA.mainField.data('ListSelectionWidget', this._genreSelection.main1).data('default', 'Genre');
        this._genreSelection.main1._name = 'ListSelectionWidget-main1';
        this._genreSelection.main2 = new ListSelectionWidget(this._domGenreB.mainField, {
            defaultValue: 'Genre',
            pane: this._domPane.list,
            field: this._domGenreB.mainField
        });
        this._genreSelection.main2.addCallback('update', this, this.selectGenreEvent, {
            widget: this,
            subwidget: this._genreSelection.main2
        });
        this._domGenreB.mainField.data('ListSelectionWidget', this._genreSelection.main2).data('default', 'Genre');
        this._genreSelection.main2._name = 'ListSelectionWidget-main2';
        this._genreSelection.main3 = new ListSelectionWidget(this._domGenreC.mainField, {
            defaultValue: 'Genre',
            pane: this._domPane.list,
            field: this._domGenreC.mainField
        });
        this._genreSelection.main3.addCallback('update', this, this.selectGenreEvent, {
            widget: this,
            subwidget: this._genreSelection.main3
        });
        this._domGenreC.mainField.data('ListSelectionWidget', this._genreSelection.main3).data('default', 'Genre');
        this._genreSelection.main3._name = 'ListSelectionWidget-main3';
        this._genreSelection.sub1 = new ListSelectionWidget(this._domGenreA.subField, {
            defaultValue: 'Genre',
            pane: this._domPane.list,
            field: this._domGenreA.subField
        });
        this._genreSelection.sub1.addCallback('update', this, this.selectGenreEvent, {
            widget: this,
            subwidget: this._genreSelection.sub1
        });
        this._domGenreA.subField.data('ListSelectionWidget', this._genreSelection.sub1).data('default', 'Genre');
        this._genreSelection.sub1._name = 'ListSelectionWidget-sub1';
        this._genreSelection.sub2 = new ListSelectionWidget(this._domGenreB.subField, {
            defaultValue: 'Genre',
            pane: this._domPane.list,
            field: this._domGenreB.subField
        });
        this._genreSelection.sub2.addCallback('update', this, this.selectGenreEvent, {
            widget: this,
            subwidget: this._genreSelection.sub2
        });
        this._domGenreB.subField.data('ListSelectionWidget', this._genreSelection.sub2).data('default', 'Genre');
        this._genreSelection.sub2._name = 'ListSelectionWidget-sub2';
        this._genreSelection.sub3 = new ListSelectionWidget(this._domGenreC.subField, {
            defaultValue: 'Genre',
            pane: this._domPane.list,
            field: this._domGenreC.subField
        });
        this._genreSelection.sub3.addCallback('update', this, this.selectGenreEvent, {
            widget: this,
            subwidget: this._genreSelection.sub3
        });
        this._domGenreC.subField.data('ListSelectionWidget', this._genreSelection.sub3).data('default', 'Genre');
        this._genreSelection.sub3._name = 'ListSelectionWidget-sub3';
        this._domGenreC.customInput = $('.rm-inline-edit', this._domPane.foot);
        this._customGenreWidget = new TextInlineEditWidget(this._domGenreC.customInput, {
            autoSave: true
        });
        this._customGenreWidget.addCallback('update', this, this.selectGenreEvent, {
            widget: this,
            subwidget: this._customGenreWidget
        });
        this._domGenreC.customField.data('default', this._customGenreWidget._prompt);
        for (var subWidget in this._genreSelection) {
            this._genreSelection[subWidget].disable();
        }
        this._domPane.target.height(0).hide();
        this.enable();
    },
    activate: function () {
        if (!this._super() || !this._genreReady) return false;
        this.selectingGenreTab();
        $('body').bind('mousedown', {
            widget: this
        }, this.processUserEvent);
        this._wrapperDom.bind('mousedown', {
            widget: this
        }, this.processUserEvent);
        this._domPane.target.bind('click', {

            widget: this
        }, this.processUserEvent);
        this._domPane.menu.find('a').bind('click mouseenter mouseleave', {
            widget: this
        }, this.processUserEvent);
        this._domPane.target.focus();
    },
    deactivate: function () {
        if (!this._super()) return false;
        this._domPane.target.animate({
            height: 0
        }, {
            duration: 500
        });
        $('body').unbind('mousedown', this.processUserEvent);
        this._wrapperDom.unbind('mousedown', this.processUserEvent);
        this._domPane.target.unbind('click', this.processUserEvent);
        this._domPane.menu.find('a').unbind('click mouseenter mouseleave', this.processUserEvent);
        $('.active-tab', this._domTarget).removeClass('active-tab');
        $('.selecting', this._domTarget).removeClass('selecting');
    },
    enable: function () {
        this._super();
        $('.rm-genre-tab', this._domTarget).attr('tabindex', 0).bind('mouseenter mouseleave click', {
            widget: this
        }, this.processUserEvent);
        $('.rm-genre-tab span', this._domTarget).attr('tabindex', 0).bind('mouseenter mouseleave', {
            widget: this
        }, this.processUserEvent);
        $('.rm-genre-tab [rel=clear]', this._domTarget).attr('tabindex', 0).bind('click', {
            widget: this
        }, this.processUserEvent);
        this.updateVisibleField();
    },
    disable: function () {
        if (this._active) {
            this.deactivate();
        }
        this._super();
        $('.rm-genre-tab', this._domTarget).attr('tabindex', 0).unbind('mouseenter mouseleave click', this.processUserEvent);
        $('.rm-genre-tab span', this._domTarget).attr('tabindex', 0).unbind('mouseenter mouseleave', this.processUserEvent);
        $('.rm-genre-tab [rel=clear]', this._domTarget).attr('tabindex', 0).unbind('click', this.processUserEvent);
        this._domGenreA.btnClear.hide();
        this._domGenreB.btnClear.hide();
        this._domGenreC.btnClear.hide();
        for (var subWidget in this._genreSelection) {
            this._genreSelection[subWidget].disable();
        }
    },
    buildGenres: function () {
        this._htmlOfGenres = new Array();
        var i;
        var ulLi = '<ul class="rm-selections"><li><span class="ls-value">genre</span></li></ul>';
        for (i = 0; i < this._listOfGenres.length; i++) {
            ulLi = this._genreSelection.main1.buildListHtml(this._listOfGenres[i]);
            $('li', ulLi).addClass('rc-xs');
            this._htmlOfGenres.push(ulLi);
        }
        for (i = 0; i < this._listOfGenres[0].length; i++) {
            $('li:eq(' + i + ')', this._htmlOfGenres[0]).append('<em class="rc-xs">' + this._listOfGenres[i + 1].length + '</em>');
        }
        this._genreReady = true;
    },
    updateVisibleField: function () {
        if (this._domGenreA.mainField.text().length > 0 && this._domGenreA.mainField.text() != this._domGenreA.mainField.data('default')) {
            this._domGenreA.btnClear.show();
        } else {
            this._domGenreA.btnClear.hide();
        }
        if (this._domGenreB.mainField.text().length > 0 && this._domGenreB.mainField.text() != this._domGenreB.mainField.data('default')) {
            this._domGenreB.btnClear.show();
        } else {
            this._domGenreB.btnClear.hide();
        }
        if ((this._domGenreC.mainField.text().length > 0 && this._domGenreC.mainField.text() != this._domGenreC.mainField.data('default')) || (this._domGenreC.customField.text().length > 0 && this._domGenreC.customField.text() != this._domGenreC.customField.data('default'))) {
            this._domGenreC.btnClear.show();
        } else {
            this._domGenreC.btnClear.hide();
        }
        if (this._domGenreA.subField.text().length > 0 && this._domGenreA.subField.text() != this._domGenreA.subField.data('default')) {
            this._domGenreA.mainField.hide();
            this._domGenreA.subField.show();
        } else {
            this._domGenreA.mainField.show();
            this._domGenreA.subField.hide();
        }
        if (this._domGenreB.subField.text().length > 0 && this._domGenreB.subField.text() != this._domGenreB.subField.data('default')) {
            this._domGenreB.mainField.hide();
            this._domGenreB.subField.show();
        } else {
            this._domGenreB.mainField.show();
            this._domGenreB.subField.hide();
        }
        if (this._domGenreC.customField.text().length > 0 && this._domGenreC.customField.text() != this._domGenreC.customField.data('default')) {
            this._domGenreC.mainField.hide();
            this._domGenreC.subField.hide();
            this._domGenreC.customField.show();
        } else if (this._domGenreC.subField.text().length > 0 && this._domGenreC.subField.text() != this._domGenreC.subField.data('default')) {
            this._domGenreC.mainField.hide();
            this._domGenreC.subField.show();
            this._domGenreC.customField.hide();
        } else {
            this._domGenreC.mainField.show();
            this._domGenreC.subField.hide();
            this._domGenreC.customField.hide();
        }
    },
    processUserEvent: function (event) {
        var eventTarget = $(event.currentTarget);
        var widget = event.data.widget;
        if (widget._enabled) {
            switch (event.type) {
            case 'mouseenter':
                eventTarget.addClass('hover');
                break;
            case 'mouseleave':
                eventTarget.removeClass('hover');
                break;
            case 'click':
            case 'focus':
                switch (eventTarget.attr('rel')) {
                case 'close-pane':
                    widget.deactivate();
                    break;
                case 'tab':
                    if (!eventTarget.hasClass('active-tab')) {
                        $('.active-tab', widget._domTarget).removeClass('active-tab');
                        eventTarget.addClass('active-tab');
                    }
                    if (widget._active) {
                        widget.selectingGenreTab();
                    } else {
                        widget.activate();
                    }
                    break;
                case 'clear':
                    if (!eventTarget.parent().hasClass('active-tab')) {
                        $('.active-tab', widget._domTarget).removeClass('active-tab');
                        eventTarget.parent().addClass('active-tab');
                    }
                    widget.clearActiveTab();
                    return true;
                    break;
                case 'menu-btn':
                    widget.backToMain();
                case widget._domTarget.attr('rel'):
                    widget.activate();
                    break;
                case widget._domPane.target.attr('rel'):
                    break;
                default:
                    dodebug(widget._name + '::processUserEvent(click): couldn\'t match element for: ' + eventTarget.attr('class'));
                    break;
                }
                break;
            case 'mousedown':
                if (event.currentTarget == widget._wrapperDom.get(0)) {
                    event.stopPropagation();
                } else if (event.currentTarget == $('body').get(0)) {
                    widget.deactivate();
                }
                break;
            default:
                dodebug(widget._name + '::processUserEvent: could not match event for: ' + event.type);
                break;
            }
        }
        event.stopPropagation();
    },
    selectingGenreTab: function () {
        var activeTab = $('.active-tab', this._domTarget).attr('id');
        var fieldText = this._domGenreA.mainField.data('ListSelectionWidget')._value;
        var defaultText = this._domGenreA.mainField.data('default');
        if (fieldText.length > 0 && fieldText != defaultText) {
            switch (activeTab) {
            case 'editor-genre-one':
                this._activeGroup = this._domGenreA;
                dodebug('active A');
                break;
            case 'editor-genre-two':
                this._activeGroup = this._domGenreB;
                dodebug('active B');
                break;
            case 'editor-genre-three':
                this._activeGroup = this._domGenreC;
                dodebug('active C');
                break;
            }
            fieldText = this._activeGroup.mainField.data('ListSelectionWidget')._value;
            defaultText = this._activeGroup.mainField.data('default');
            var state = 0;
            if (fieldText.length > 0 && fieldText != defaultText && this._genreNameMap[fieldText].length > 0) {
                state = this.getMainGenreId();
            }
            this._domPane.list.data('newState', state);
        } else {
            $('.active-tab', this._domTarget).removeClass('active-tab');
            this._domGenreA.tab.addClass('active-tab');
            this._activeGroup = this._domGenreA;
            this._domPane.list.data('newState', 0);
        }
        $('.selecting', this._domTarget).removeClass('selecting');
        if (this._domPane.list.data('newState') == 0) {
            this._activeGroup.mainField.addClass('selecting');
        } else {
            this._activeGroup.subField.addClass('selecting');
        }
        this.clearAndRefresh();
    },
    backToMain: function () {
        this._domPane.list.data('newState', 0);
        $('.selecting', this._domTarget).removeClass('selecting');
        this._activeGroup.mainField.addClass('selecting');
        var scrollBox = $('#editor-main-hover-scroll', this._wrapperDom);
        var topPosition = this._domTarget.position().top;
        if (scrollBox.scrollTop() > topPosition) {
            scrollBox.animate({
                scrollTop: topPosition
            }, {
                duration: 500
            });
        }
        this.clearAndRefresh();
    },
    clearAndRefresh: function () {
        for (var subWidget in this._genreSelection) {
            this._genreSelection[subWidget].disable();
        }
        var widget = this;
        if (this._listOfGenres[this._domPane.list.data('newState')].length < 1) {
            this._domPane.list.data('newState', 0);
            this._domPane.list.data('widget', widget).animate({
                'opacity': 1
            }, {
                duration: 0,
                complete: widget.refreshList
            });
        } else {
            this._domPane.head.not(':hidden').animate({
                'opacity': 0
            }, {
                duration: 200
            });
            this._domPane.foot.not(':hidden').animate({
                'opacity': 0
            }, {
                duration: 200
            });
            this._domPane.menu.not(':hidden').animate({
                'opacity': 0
            }, {
                duration: 200
            });
            this._domPane.list.data('widget', widget).css({
                'opacity': 1
            }).animate({
                'opacity': 0
            }, {
                duration: 200,
                complete: widget.refreshList
            });
        }
    },
    refreshList: function () {
        var widget = $(this).data('widget');
        var fieldWidget = $('.selecting', widget._activeGroup.tab).data('ListSelectionWidget');
        var newListHtml = widget._htmlOfGenres[widget._domPane.list.data('newState')];
        fieldWidget.installListHtml(newListHtml);
        widget.updateVisibleField();
        widget._domPane.target.show();
        var listHeight;
        if (widget._domPane.list.height() > 0) {
            listHeight = widget._domPane.list.outerHeight();
        } else {
            dodebug(widget._name + ':: refresh : could not determine list height');
            listHeight = 181;
        }
        var headHeight = 0;
        widget._domPane.head.show();
        if (widget._domPane.list.data('newState') > 0) {
            headHeight = widget._domPane.head.outerHeight();
            widget._domPane.list.removeClass('pane-top');
            $('.home-btn', widget._domPane.menu).show();
        } else {
            widget._domPane.head.hide();
            $('.home-btn', widget._domPane.menu).hide();
            widget._domPane.list.addClass('pane-top');
        }
        var footHeight = 0;
        if (widget._activeGroup == widget._domGenreC) {
            widget._domPane.foot.show();
            footHeight = widget._domPane.foot.outerHeight();
        } else {
            widget._domPane.foot.hide();
        }
        var btnHeight = widget._domPane.menu.outerHeight();
        var paneHeight = listHeight + headHeight + footHeight + btnHeight;
        widget._domPane.target.animate({
            height: paneHeight
        }, {
            duration: 300,
            complete: function () {
                fieldWidget.enable();
                widget._domPane.head.not(':hidden').animate({
                    'opacity': 1
                }, {
                    duration: 200
                });
                widget._domPane.foot.not(':hidden').animate({
                    'opacity': 1
                }, {
                    duration: 200
                });
                widget._domPane.menu.not(':hidden').animate({
                    'opacity': 1
                }, {
                    duration: 200
                });
                widget._domPane.list.animate({
                    'opacity': 1
                }, {
                    duration: 200,
                    complete: function () {
                        widget._domPane.list.css({
                            'opacity': ''
                        });
                    }
                });
                widget._domPane.list.data('state', widget._domPane.list.data('newState'));
            }
        });
    },
    selectGenreEvent: function (event) {
        if (event.subwidget._name == 'TextInlineEditWidget') {
            var customText = $('input', event.subwidget._domTarget).val();
            if (customText.length > 0 && customText != event.subwidget._prompt) {
                event.widget._domGenreC.customField.html(customText);
                event.widget._domGenreC.mainField.html(event.widget._domGenreC.mainField.data('default'));
                event.widget._domGenreC.subField.html(event.widget._domGenreC.subField.data('default'));
                event.widget._domGenreC.mainField.data('ListSelectionWidget')._value = '';
                event.widget._domGenreC.subField.data('ListSelectionWidget')._value = '';
                event.widget.selectingGenreTab();
            } else {
                event.widget._domGenreC.customField.html(event.widget._domGenreC.customField.data('default'));
                this.updateVisibleField();
                return false;
            }
        } else {
            var newGenre = event.subwidget._value;
            var genreField = $('.genre-field.selecting', this._domTarget);
            if (newGenre == '') {
                newGenre = genreField.data('default');
            }
            genreField.html(newGenre.replace(/&/g, '&amp;'));
            if (genreField.attr('rel') == 'main') {
                event.widget._activeGroup.subField.html(this._activeGroup.subField.data('default'));
                event.widget._activeGroup.subField.data('ListSelectionWidget')._value = '';
                if (newGenre != genreField.data('default') && this._genreNameMap[newGenre].length > 0) {
                    event.widget._domPane.list.data('newState', this.getMainGenreId());
                    event.widget.selectingGenreTab();
                }
            } else {}
            if (event.widget._activeGroup == event.widget._domGenreC) {
                event.widget.getWidget('TextInlineEditWidget', event.widget._domGenreC.customInput).clear();
                event.widget.getWidget('TextInlineEditWidget', event.widget._domGenreC.customInput).commit();
            }
        }
        event.widget.commit();
    },
    getMainGenreId: function () {
        var textMainGenre = this._activeGroup.mainField.data('ListSelectionWidget')._value;
        if (textMainGenre == this._activeGroup.mainField.data('default')) {
            return (0);
        }
        for (var i = 0; i < this._listOfGenres[0].length; i++) {
            if (textMainGenre == this._listOfGenres[0][i]) {
                dodebug('MainGenre ListReference Id: ' + (i + 1));
                return (i + 1);
            }
        }
        this._activeGroup.mainField.html(this._activeGroup.mainField.data('default'));
        this._activeGroup.mainField.data('ListSelectionWidget')._value = '';
        return (0);
    },
    clearActiveTab: function () {
        var activeTab = $('.active-tab', this._domTarget).attr('id');
        switch (activeTab) {
        case 'editor-genre-one':
            this._activeGroup = this._domGenreA;
            dodebug('clearing A');
            break;
        case 'editor-genre-two':
            this._activeGroup = this._domGenreB;
            dodebug('clearing B');
            break;
        case 'editor-genre-three':
            this._activeGroup = this._domGenreC;
            dodebug('clearing C');
            this.getWidget('TextInlineEditWidget', this._domGenreC.customInput).clear();
            this.getWidget('TextInlineEditWidget', this._domGenreC.customInput).commit();
            this._domGenreC.customField.html(this._domGenreC.customField.data('default'));
            break;
        }
        var activeSub = this._activeGroup.subField;
        var activeMain = this._activeGroup.mainField;
        activeSub.html(activeSub.data('default'));
        activeMain.html(activeMain.data('default'));
        activeSub.data('ListSelectionWidget')._value = '';
        activeMain.data('ListSelectionWidget')._value = '';
        this._domPane.list.data('newState', 0);
        this.commit();
    },
    commit: function () {
        var mainGenre = this._activeGroup.mainField.data('ListSelectionWidget')._value;
        var subGenre = this._activeGroup.subField.data('ListSelectionWidget')._value;
        if (mainGenre == this._activeGroup.mainField.data('default')) {
            mainGenre = '';
        }
        if (subGenre == this._activeGroup.subField.data('default')) {
            subGenre = '';
        }
        this._activeGroup.mainField.data('ListSelectionWidget')._value = mainGenre;
        this._activeGroup.subField.data('ListSelectionWidget')._value = subGenre;
        var groupRef = this._activeGroup.tab.attr('id');
        groupRef = groupRef.substring(groupRef.lastIndexOf('-') + 1);
        var data = {
            main: mainGenre,
            sub: subGenre,
            group: groupRef
        };
        Saver.save('genreGroup', data);
        if (mainGenre.length > 0) {
            $('#genreOn').attr('checked', 'checked');
            Saver.save('genreOn', true);
        }
        this.updateVisibleField();
    },
    changeMode: function (mode) {
        switch (mode) {
        case 'css':
            this.disable();
            break;
        case 'content':
            this.enable();
            break;
        }
    }
});
var RMValidator = (function () {
    var is_url = function (s) {
            var startsWithSlash = /^\/.*/;
            var startsWithHttpPrefix = /^https?:\/\/.*/;
            var prefixedString = s;
            if (!startsWithHttpPrefix.test(s)) {
                prefixedString = "http://" + prefixedString;
            }
            var RegExp = /^https?:\/\/.*\.[\w]{1,4}(\W|$).*/;
            return (!startsWithSlash.test(s) && RegExp.test(prefixedString));
        };
    var is_email = function (s) {
            var RegExp = /^((([a-z]|[0-9]|!|#|$|%|&|'|\*|\+|\-|\/|=|\?|\^|_|`|\{|\||\}|~)+(\.([a-z]|[0-9]|!|#|$|%|&|'|\*|\+|\-|\/|=|\?|\^|_|`|\{|\||\}|~)+)*)@((((([a-z]|[0-9])([a-z]|[0-9]|\-){0,61}([a-z]|[0-9])\.))*([a-z]|[0-9])([a-z]|[0-9]|\-){0,61}([a-z]|[0-9])\.)[\w]{2,4}|(((([0-9]){1,3}\.){3}([0-9]){1,3}))|(\[((([0-9]){1,3}\.){3}([0-9]){1,3})\])))$/;
            return RegExp.test(s);
        };
    return {
        isUrl: function (input) {
            return is_url(input);
        },
        isEmail: function (input) {
            return is_email(input);
        },
        validate: function (input, type) {
            switch (type) {
            case 'email':
                return is_email(input);
            case 'url':
                return is_url(input);
            default:
                dodebug('');
                break;
            }
        }
    };
})();
var LinkedInlineWidget = RMUIWidget.extend({
    _name: "LinkedInlineWidget",
    _linkedWidgets: false,
    _widgetData: false,
    _autoSave: true,
    init: function (targetElement, options) {
        this._linkedWidgets = new Array();
        this._autoSave = true;
        this._super(targetElement, options);
    },
    install: function (targetElement) {
        this._super(targetElement);
        var _linkedWidget = this;
        $('.rm-inline-edit', this._domTarget).each(function () {
            var inlineWidget = $(this).data('TextInlineEditWidget');
            if (!inlineWidget) {
                inlineWidget = new TextInlineEditWidget($(this));
            }
            inlineWidget._autoSave = false;
            inlineWidget.addCallback('update', _linkedWidget, _linkedWidget.childUpdated, inlineWidget);
            var optional = $(this).hasClass('optional');
            var childWidget = {
                widget: inlineWidget,
                optional: optional,
                modified: false,
                saveName: inlineWidget._inputField.attr('name')
            };
            _linkedWidget._linkedWidgets.push(childWidget);
        });
        dodebug(this._name + '::install: now contains widgets:');
        dodebug(this._linkedWidgets);
    },
    activate: function () {
        this._super();
    },
    deactivate: function () {
        this._super();
    },
    enable: function () {
        this._super();
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            this._linkedWidgets[i].widget.enable();
        }
    },
    disable: function () {
        this._super();
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            this._linkedWidgets[i].widget.disable();
        }
    },
    getStoredData: function () {
        dodebug('pulling saved data...');
        var childData = {};
        dodebug(this._linkedWidgets);
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            dodebug(this._linkedWidgets[i]);
            childData[this._linkedWidgets[i].saveName] = this._linkedWidgets[i].widget._inputField.val();
        }
        var ret = {};
        ret[this._domTarget.attr('name')] = childData;
        dodebug('got return object!');
        dodebug(ret);
        return ret;
    },
    commit: function () {
        var hasRequired = this.hasRequired();
        if (this.needsUpdate() && hasRequired) {
            var saveObj = {};
            for (var i = 0; i < this._linkedWidgets.length; i++) {
                saveObj[this._linkedWidgets[i].saveName] = this._linkedWidgets[i].widget._inputField.val();
            }
            if (this._autoSave) {
                this._linkedWidgets[i].modified = false;
                SaveHelper.save(this._domTarget.attr('name'), saveObj);
            }
            this.triggerEvent('update');
        } else if (!hasRequired) {
            dodebug(this._name + '::commit: not all required fields were filled in, not committing.');
        }
    },
    needsUpdate: function () {
        var needsUpdate = false;
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            if (this._linkedWidgets[i].modified) {
                needsUpdate = true;
                break;
            }
        }
        return needsUpdate;
    },
    hasValidURL: function () {
        dodebug('hasValidURL:: checking', 'error');
        var ret = true;
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            if (!this._linkedWidgets[i].optional) {
                if ((this._linkedWidgets[i].widget._inputField.val() == '') || (!RMValidator.isUrl(this._linkedWidgets[i].widget._inputField.val()))) {
                    this.highlightErrors(this._linkedWidgets[i].widget);
                    ret = false;
                } else {
                    this.clearErrors(this._linkedWidgets[i].widget);
                }
            }
        }
        return ret;
    },
    hasValidEmail: function () {
        dodebug('hasValidEmail:: checking');
        var ret = true;
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            dodebug('checking widget: ');
            dodebug(this._linkedWidgets[i]);
            if (!this._linkedWidgets[i].optional) {
                if ((this._linkedWidgets[i].widget._inputField.val() == '') || (!RMValidator.isEmail(this._linkedWidgets[i].widget._inputField.val().toLowerCase()))) {
                    this.highlightErrors(this._linkedWidgets[i].widget);
                    ret = false;
                } else {
                    this.clearErrors(this._linkedWidgets[i].widget);
                }
            }
        }
        return ret;
    },
    hasRequired: function () {
        dodebug('hasRequired:: checking', 'error');
        var ret = true;
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            if (!this._linkedWidgets[i].optional) {
                if (this._linkedWidgets[i].widget._inputField.val() == '') {
                    this.highlightErrors(this._linkedWidgets[i].widget);
                    ret = false;
                } else {
                    this.clearErrors(this._linkedWidgets[i].widget);
                }
            }
        }
        return ret;
    },
    childUpdated: function (childWidget) {
        var foundChild = false;
        for (var i = 0; i < this._linkedWidgets.length; i++) {
            if (this._linkedWidgets[i].widget == childWidget) {
                this._linkedWidgets[i].modified = true;
                foundChild = true;
                break;
            }
        }
        if (foundChild) {
            dodebug(this._name + '::childUpdated(): triggering commit for child');
            this.commit();
        } else {
            dodebug(this._name + '::childUpdated(): err: couldn\'t find child widget to update');
        }
    },
    highlightErrors: function (childWidget) {
        childWidget._contentArea.css({
            outline: '2px solid #cc0000'
        });
    },
    clearErrors: function (childWidget) {
        childWidget._contentArea.css({
            outline: ''
        });
    },
    copy: function () {
        var ret = this._super();
        var _linkedWidget = this;
        var copyFrom = false;
        $('.rm-inline-edit', ret).each(function (indx) {
            copyFrom = $('.rm-inline-edit', _linkedWidget._domTarget).get(indx);
            if (copyFrom && $(copyFrom).data('TextInlineEditWidget')) {
                var replacement = $(copyFrom).data('TextInlineEditWidget').copy();
                $(this).html(replacement.html()).data({});
            } else {
                dodebug(_linkedWidget._name + '::copy: unhandled widget found. Currently only TextInlineEdit widgets can be contained within Linked widgets.');
            }
        });
        return ret;
    },
    validate: function () {
        var $this = this;
        var valid = true;
        $.each($this._linkedWidgets, function (indx, widgetwrap) {
            var $widget = widgetwrap.widget;
            var el = $widget._domTarget;
            var inputEl = widgetwrap.widget._inputField;
            var val_types = $.grep(el.attr('class').split(' '), function (val_type, indx2) {
                return (val_type.indexOf('rm-val-') === 0);
            });
            $.each(val_types, function (indx2, val_types) {
                val_types = val_types.replace('rm-val-', '');
                switch (val_types) {
                case 'required':
                    if (inputEl.val().trim() == '') {
                        dodebug('rm-val-required for ' + inputEl.attr('name') + ' failed', 'error');
                        $this.highlightErrors($widget);
                        valid = false;
                        return false;
                    }
                    break;
                case 'url':
                    if (!RMValidator.isUrl(inputEl.val())) {
                        if ($widget._contentArea.text().indexOf('http') == -1) {
                            $widget._contentArea.text('http://' + inputEl.val());
                        } else {
                            $this.highlightErrors($widget);
                            valid = false;
                            return false;
                        }
                    }
                    break;
                case 'email':
                    if (!RMValidator.isUrl(inputEl.val())) {
                        dodebug('rm-val-email for ' + inputEl.attr('name') + ' failed', 'error');
                        $this.highlightErrors($widget);
                        valid = false;
                        return false;
                    }
                    break;
                }
            });
        });
        return valid;
    }
});
var MultivalWidget = RMUIWidget.extend({
    _name: "MultivalWidget",
    _activeWidgets: false,
    _inputter: false,
    _inputWidget: false,
    _autoAdd: false,
    _autoSave: true,
    _validator: false,
    _addFromTop: false,
    init: function (targetElement, options) {
        this._activeWidgets = new Array();
        this._autoAdd = false;
        this._autoSave = true;
        this._validator = false;
        this._addFromTop = false;
        if (options) {
            if (options.hasOwnProperty('autoAdd')) {
                this._autoAdd = options.autoAdd;
            }
            if (options.hasOwnProperty('autoSave')) {
                this._autoSave = options.autoSave;
            }
            if (options.hasOwnProperty('validate')) {
                this._validator = options.validate;
            }
            if (options.hasOwnProperty('addFromTop')) {
                this._addFromTop = options.addFromTop;
            }
        }
        this._super(targetElement, options);
    },
    install: function (targetElement) {
        this._super(targetElement);
        if (this._autoAdd) {
            var inputterSelector = this._addFromTop ? 'li:first-child' : 'li:last-child';
            this._inputter = $(inputterSelector, this._domTarget);
            this._inputter.addClass('rm-multival-addnew').find('.rm-multival-add-button').bind('click', {
                widget: this
            }, this.handleButtonEvent);
        }
        $('.rm-remove-link', $(this.getTarget())[0]).live('click', {
            widget: this
        }, this.handleButtonEvent);
        $('.rm-add-link', $(this.getTarget())[0]).live('click', {
            widget: this
        }, this.handleButtonEvent);
        var _multivalWidget = this;
        $('li', this._domTarget).each(function () {
            var widgetDOM = $(this).hasClass('.rm-widget') ? $(this) : $(this).find('.rm-widget').first();
            var widget = false;
            var childWidgets = _multivalWidget.getWidgets(widgetDOM);
            if (childWidgets) {
                for (var i = 0; i < childWidgets.length; i++) {
                    if (childWidgets[i] instanceof TextInlineEditWidget || childWidgets[i] instanceof LinkedInlineWidget) {
                        widget = childWidgets[i];
                        break;
                    }
                }
            } else {
                widgetDOM = $(this).find('.rm-linked-field').first();
                if (widgetDOM.length < 1) {
                    widgetDOM = $(this).find('.rm-inline-edit').first();
                }
                if (widgetDOM.hasClass('rm-linked-field')) {
                    widget = new LinkedInlineWidget(widgetDOM);
                } else if (widgetDOM.hasClass('rm-inline-edit')) {
                    widget = new TextInlineEditWidget(widgetDOM);
                }
            }
            if (widget) {
                widget._autoSave = false;
                if (!$(this).hasClass('rm-multival-addnew')) {
                    var idTokens = widgetDOM.attr('id').split('-');
                    $(this).append('<a href="#remove" id="rm-multilval-remove-' + idTokens[idTokens.length - 1] + '" class="rm-remove-link" title="Remove this item?">Remove</a>');
                    widget.addCallback('update', _multivalWidget, _multivalWidget.childUpdated, widget);
                    _multivalWidget._activeWidgets.push({
                        id: idTokens[idTokens.length - 1],
                        widget: widget,
                        modified: false
                    });
                } else {
                    _multivalWidget._inputWidget = widget;
                    if (_multivalWidget._autoAdd) {
                        if (!_multivalWidget._validator) {
                            _multivalWidget._inputWidget.addCallback('update', _multivalWidget, _multivalWidget.inputterUpdated, _multivalWidget._inputWidget);
                            return true;
                        }
                        switch (_multivalWidget._validator) {
                        case 'email':
                            _multivalWidget._inputWidget.addCallback('update', _multivalWidget, _multivalWidget.inputterUpdatedEmail, _multivalWidget._inputWidget);
                            break;
                        case 'url':
                            _multivalWidget._inputWidget.addCallback('update', _multivalWidget, _multivalWidget.inputterUpdatedWebsite, _multivalWidget._inputWidget);
                            break;
                        default:
                            break;
                        }
                    }
                }
            } else {
                dodebug(_multivalWidget._name + '::install: found non-supported widget, ignoring. Currently only TextInlineEdit and LinkedInlineEdit widgets are allowed.');
            }
        });
    },
    activate: function () {
        this._super();
    },
    deactivate: function () {
        this._super();
    },
    changeMode: function (mode) {
        this._super(mode);
        switch (mode) {
        case 'css':
            this.disable();
            break;
        case 'content':
            this.enable();
            break;
        default:
            break;
        }
    },
    enable: function () {
        this._super();
        this._inputter.show();
        $('.rm-remove-link', this._domTarget).show();
    },
    disable: function () {
        this._inputter.hide();
        $('.rm-remove-link', this._domTarget).hide();
    },
    commit: function (added, callback) {
        if (!this.needsUpdate()) {
            return false;
        }
        for (var i = 0; i < this._activeWidgets.length; i++) {
            if (!this._activeWidgets[i].modified) {
                continue;
            }
            this._activeWidgets[i].modified = false;
            dodebug('getting stored data...');
            dodebug(this._activeWidgets[i].widget);
            var data = this._activeWidgets[i].widget.getStoredData();
            dodebug(data);
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    dodebug(this._name + '::commit: saving key ' + key);
                    data[key].id = this._activeWidgets[i].id;
                    dodebug(data[key]);
                    if (this._autoSave) {
                        Saver.save(added ? key + '-add' : key, data[key], {
                            success: callback
                        });
                    }
                    this.triggerEvent('update', data[key]);
                }
            }
        }
    },
    needsUpdate: function () {
        var needsUpdate = false;
        for (var i = 0; i < this._activeWidgets.length; i++) {
            if (this._activeWidgets[i].modified) {
                needsUpdate = true;
                break;
            }
        }
        return needsUpdate;
    },
    addNewWidget: function () {
        var sourceWidgetDOM = $('.rm-widget', this._inputter).first();
        var targetElement = false;
        var addedWidget = false;
        var sourceWidgets = this.getWidgets(sourceWidgetDOM);
        var src_w = false;
        if (sourceWidgets) {
            for (var i = 0; i < sourceWidgets.length; i++) {
                src_w = sourceWidgets[i];
                targetElement = src_w.copy();
                var addedDOM = targetElement.wrap('<li/>').parent().hide();
                if (this._addFromTop) {
                    this._inputter.after(addedDOM);
                } else {
                    this._inputter.before(addedDOM);
                }
                targetElement.parent().fadeIn();
                if (src_w instanceof TextInlineEditWidget) {
                    addedWidget = new TextInlineEditWidget(targetElement);
                } else if (src_w instanceof LinkedInlineWidget) {
                    addedWidget = new LinkedInlineWidget(targetElement);
                } else {
                    continue;
                }
            }
            if (addedWidget) {
                addedWidget._autoSave = false;
                addedWidget.addCallback('update', this, this.childUpdated, addedWidget);
                this._activeWidgets.push({
                    widget: addedWidget,
                    modified: true
                });
                this.triggerEvent('widgetcreated', addedWidget);
                this.clearInputter();
                _multivalWidget = this;
                this.commit(true, function (data) {
                    var indx = _multivalWidget.findChild(addedWidget);
                    if (indx < 0) {
                        dodebug('addNewWidget::error, could not find associated element');
                        return false;
                    }
                    if (!data.hasOwnProperty('object')) {
                        dodebug('addNewWidget::error, could not get valid element from response');
                        return false;
                    }
                    _multivalWidget._activeWidgets[indx].id = data.object.id;
                    targetElement.attr('id', targetElement.attr('name') + data.object.id);
                    targetElement.parent().append('<a href="#remove" id="rm-multilval-remove-' + data.object.id + '" class="rm-remove-link" title="Remove this item?">Remove</a>');
                });
            } else {
                dodebug(this._name + '::addNewWidget: found non-supported widget, ignoring. Currently only TextInlineEdit and Linked widgets are allowed.');
                dodebug(widgetTarget.data());
            }
        } else {
            dodebug(this._name + '::addNewWidget: no source widgets found!');
            dodebug(sourceWidgets);
        }
    },
    removeWidget: function (id) {
        for (var i = 0; i < this._activeWidgets.length; i++) {
            dodebug('found the active widget with id ' + id);
            if (this._activeWidgets[i].id == id) {
                this._activeWidgets[i].widget._domTarget.closest('li').fadeOut(function () {
                    $(this).remove();
                });
                this.triggerEvent('widgetremoved', this._activeWidgets[i].widget);
                Saver.save(this._activeWidgets[i].widget._domTarget.attr('name') + '-remove', id);
                this._activeWidgets.slice(i, 1);
                break;
            }
        }
    },
    clearInputter: function () {
        var inlineWidget = false;
        var _widget = this;
        $('.rm-inline-edit', this._inputter).each(function () {
            inlineWidget = _widget.getWidget('TextInlineEditWidget', $(this));
            if (inlineWidget) {
                inlineWidget.clear();
            }
        });
    },
    childUpdated: function (childWidget) {
        dodebug(this._name + '::childUpdated: got update event from ' + childWidget._name);
        for (var i = 0; i < this._activeWidgets.length; i++) {
            if (this._activeWidgets[i].widget == childWidget) {
                this._activeWidgets[i].modified = true;
                this.commit();
            }
        }
    },
    inputterUpdated: function () {
        dodebug(this._name + '::inputterUpdated: checking status of new inputter...');
        if (this._inputWidget._name == 'TextInlineEditWidget') {
            this.addNewWidget();
        } else if (this._inputWidget._name == 'LinkedInlineWidget') {
            if (this._inputWidget.needsUpdate() && this._inputWidget.hasRequired()) {
                this.addNewWidget();
            }
        }
        dodebug('end!');
    },
    inputterUpdatedWebsite: function () {
        dodebug(this._name + '::inputterUpdated: checking status of new inputter ' + this._inputWidget._name);
        if (this._inputWidget._name == 'TextInlineEditWidget') {
            this.addNewWidget();
        } else if (this._inputWidget._name == 'LinkedInlineWidget') {
            if (this._inputWidget.needsUpdate() && this._inputWidget.hasValidURL()) {
                this.addNewWidget();
            }
        }
        dodebug('end!');
    },
    inputterUpdatedEmail: function () {
        dodebug(this._name + '::inputterUpdated: checking status of new inputter...');
        if (this._inputWidget._name == 'TextInlineEditWidget') {
            this.addNewWidget();
        } else if (this._inputWidget._name == 'LinkedInlineWidget') {
            if (this._inputWidget.needsUpdate() && this._inputWidget.hasValidEmail()) {
                this.addNewWidget();
            }
        }
        dodebug('end!');
    },
    findChild: function (childWidget) {
        for (var i = 0; i < this._activeWidgets.length; i++) {
            if (this._activeWidgets[i].widget == childWidget) {
                return i;
            }
        }
        return -1;
    },
    handleButtonEvent: function (event) {
        dodebug(event);
        if (event.data.widget) {
            var widget = event.data.widget;
            if ($(event.currentTarget).hasClass('rm-remove-link')) {
                if (confirm('Are you sure you want to remove this item?')) {
                    var idTokens = $(event.currentTarget).attr('id').split('-');
                    widget.removeWidget(idTokens[idTokens.length - 1]);
                }
            } else if ($(event.currentTarget).hasClass('rm-multival-add-button')) {
                var inputValid = false;
                switch (widget._inputWidget._name) {
                case 'TextInlineEditWidget':
                    inputValid = widget._inputWidget.needsUpdate();
                    break;
                case 'LinkedInlineWidget':
                    var requiredVal = widget._inputWidget.hasRequired();
                    var multiValidate = widget._inputWidget.validate();
                    var needsUpdate = widget._inputWidget.needsUpdate();
                    dodebug('needsUpdate:' + needsUpdate + ' hasRequired: ' + requiredVal + ' multiValidate:' + multiValidate);
                    inputValid = needsUpdate && requiredVal && multiValidate;
                    break;
                default:
                    break;
                }
                if (inputValid) {
                    widget.addNewWidget();
                }
            } else {
                dodebug(widget._name + '::handleButtonEvent: unhandled button: ' + event.currentTarget);
            }
        }
        return false;
    },
    generateChildId: function () {
        return Math.floor(Math.random() * 1000);
    }
});
var VideoEditWidget = RMUIWidget.extend({
    _DUPLICATE_ERROR: $('<div class="video-error-dialog">' + '<h4>This video link has already been added.</h4>' + '<br/><em>Please make sure that videos you add</em><br/>' + '<em>have not yet been added to your</em><br/>' + '<em>account.</em><br/><br/><br/>' + '<a class="cancel" href="#video-cancel">Try again with a unique video</a>' + '</div>'),
    _INCORRECT_ENTRY_ERROR: $('<div class="video-error-dialog">' + '<h4>That video link doesn&rsquo;t seem to be valid!</h4>' + '<p>Example links:<br /><em>http://www.youtube.com/watch?v=XXXXXXX</em><br />' + '<em>http://www.vimeo.com/XXXXXXX</em></p>' + '<a class="cancel" href="#video-cancel">Try again?</a>' + '</div>'),
    _videos: false,
    _linkInputter: false,
    _options: false,
    _videoType: false,
    _videoTypeName: false,
    init: function (targetElement, options) {
        this._name = 'VideoEditWidget';
        dodebug(this._name + '::init');
        this._options = options;
        this._videoTypeName = options.type;
        switch (this._videoTypeName) {
        case 'youtube':
            this._videoType = 1;
            break;
        case 'vimeo':
            this._videoType = 2;
            break;
        default:
            break;
        }
        this._videos = new Array();
        this._approved = false;
        this._super(targetElement, options);
    },
    install: function (targetElement) {
        this._super(targetElement);
        var _videoWidget = this;
        $('.video-item', this._domTarget).each(function () {
            var idTokens = $(this).attr('id').split('-');
            var videoId = parseInt(idTokens[idTokens.length - 1]);
            var video = {
                videoId: videoId,
                title: $(this).children('.title').text()
            };
            _videoWidget._videos.push(video);
            var domStr = '<a href="#delete-video" class="remove-video" title="Remove this video?">Remove this video</a>';
            var removeLink = $(domStr);
            removeLink.bind('click', {
                widget: _videoWidget
            }, function (event) {
                if (confirm("Are you sure you want to remove this video?")) {
                    event.data.widget.removeVideo(videoId);
                }
                return false;
            });
            $(this).prepend(removeLink).attr('id', 'video-item-' + videoId);
        });
        var inputDOMStr = '<div class="add-new-video ' + this._videoTypeName + '">';
        inputDOMStr += '<span class="static">Add new:</span>';
        inputDOMStr += '<span class="rm-inline-edit" name="' + this._videoTypeName + '-video"></span>';
        inputDOMStr += '<span class="instr hidden">Press enter to add.</span></div>';
        var inputDOM = $(inputDOMStr);
        this._domTarget.after(inputDOM);
        $('.hidden', inputDOM).removeClass('hidden').hide();
        this._linkInputter = new TextInlineEditWidget(inputDOM.children('.rm-inline-edit'));
        this._linkInputter.addCallback('update', this, this.processInput);
        this._linkInputter._inputField.bind('keyup', function (event) {
            var instructions = $(event.currentTarget).closest('.add-new-video').children('.instr');
            if ($(event.currentTarget).val() != '' && event.keyCode != 13) {
                if (instructions.is(':hidden')) {
                    instructions.fadeIn();
                }
            } else if (instructions.is(':visible')) instructions.hide();
        });
    },
    commit: function (video, inputLink) {
        var saveRoute = '';
        switch (this._videoType) {
        case 1:
            saveRoute = 'add-video-youtube';
            break;
        case 2:
            saveRoute = 'add-video-vimeo';
            break;
        default:
            break;
        }
        var _widget = this;
        Saver.save(saveRoute, inputLink, {
            success: function (data) {
                _widget.updateVideo(data.video);
                var videoItem = $('#video-pending-' + data.video.serviceId);
                var removeLinkDomStr = '<a href="#delete-video" class="remove-video" title="Remove this video?">Remove this video</a>';
                var removeLink = $(removeLinkDomStr);
                removeLink.bind('click', {
                    widget: _widget
                }, function (event) {
                    if (confirm("Are you sure you want to remove this video?")) {
                        event.data.widget.removeVideo(parseInt(data.video.id));
                    }
                    return false;
                });
                videoItem.removeClass('loading').attr('id', 'video-item-' + data.video.id).prepend(removeLink);
            }
        });
        this.resetInputField();
    },
    getVideo: function (id) {
        for (var i = 0; i < this._videos.length; i++) {
            if (this._videos[i].videoId == id) return this._videos[i];
        }
        return false;
    },
    updateVideo: function (video) {
        for (var i = 0; i < this._videos.length; i++) {
            if (this._videos[i].id == video.id) this._videos[i] = video;
        }
        return false;
    },
    addVideo: function (video, inputLink) {
        this._videos.push(video);
        var domStr = '<li name="' + video.id + '" id="video-pending-' + video.id + '" class="video-item ' + this._videoTypeName + ' loading">';
        dodebug("added=" + video.id);
        domStr += '<img class="video-thumb" src="' + video.image + '" alt="' + video.title + '" />';
        domStr += '<h4 class="title">' + video.title + '</h4>';
        domStr += '</li>';
        var newItem = $(domStr);
        this._domTarget.append(newItem);
        this.commit(video, inputLink);
    },
    removeVideo: function (id) {
        dodebug(this._name + '::removeVideo: removing video with id=' + id);
        dodebug(this._videos);
        var videoItem = $('#video-item-' + id);
        videoItem.fadeOut();
        Saver.save('remove-video', id, {
            success: function () {
                videoItem.remove();
            },
            error: function () {
                videoItem.fadeIn();
            }
        });
    },
    resetInputField: function () {
        this._linkInputter._contentArea.text('');
        this._linkInputter._inputField.val('');
        this._linkInputter._empty = true;
        this._linkInputter.checkForEmpty();
    },
    processInput: function () {
        $('.instr', this._domTarget.parent()).hide();
        var ajaxURL = '';
        switch (this._videoType) {
        case 1:
            ajaxURL = '/saveajax/saveYoutube';
            break;
        case 2:
            ajaxURL = '/saveajax/saveVimeo';
            break;
        default:
            break;
        }
        var _widget = this;
        var inputLink = this._linkInputter._inputField.val();
        $.ajax({
            url: ajaxURL,
            type: 'post',
            data: {
                bandId: getGlobal('pageId'),
                link: inputLink,
                bypassDb: true
            },
            dataType: 'json',
            success: function (data, response) {
                if (!_widget.video_is_exclusive(data.id)) {
                    _widget.showErrorDialog(_widget._DUPLICATE_ERROR);
                    return false;
                }
                if (!data.title) {
                    _widget.showErrorDialog(_widget._INCORRECT_ENTRY_ERROR);
                    return false;
                }
                _widget.addVideo(data, inputLink);
            }
        });
        this._linkInputter._inputField.val('processing video...');
    },
    showErrorDialog: function (domStr) {
        dodebug(this._name + '::showErrorDialog');
        var dialog = $(domStr);
        dialog.appendTo(this._domTarget.parent()).hide().css({
            bottom: dialog.siblings('.add-new-video').outerHeight() - 20 + 'px',
            left: dialog.siblings('.add-new-video').position().left + 20 + 'px',
            display: 'block',
            opacity: 0
        }).animate({
            bottom: '+=20px',
            opacity: 1
        }, 250);
        $('a.cancel', dialog).bind('click', {
            widget: this
        }, function (event) {
            dialog.fadeOut(function () {
                event.data.widget.resetInputField();
                $(this).remove();
            });
            return false;
        });
        $('#rm-videos').bind('click', {
            widget: this
        }, this.handleErrorDialog);
    },
    handleErrorDialog: function (event) {
        dodebug(event.target);
        if ($(event.target).closest('.video-error-dialog').length == 0) {
            $('.video-error-dialog', '#rm-videos').fadeOut(function () {
                $(this).remove();
            });
            event.data.widget.resetInputField();
            $('#rm-videos').unbind('click', event.data.widget.handleErrorDialog);
        }
    },
    video_is_exclusive: function (VidId) {
        matchingElem = '[name$=' + VidId + ']';
        dodebug("checked=" + VidId);
        dodebug($(matchingElem).length);
        if ($(matchingElem).length > 0) {
            return false;
        } else {
            return true;
        }
    }
});
(function ($) {
    var ColorPicker = function () {
            var
            ids = {},
                inAction, charMin = 65,
                visible, tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>',
                defaults = {
                    eventName: 'click',
                    onShow: function () {},
                    onBeforeShow: function () {},
                    onHide: function () {},
                    onChange: function () {},
                    onSubmit: function () {},
                    color: 'ff0000',
                    livePreview: true,
                    flat: false
                },
                fillRGBFields = function (hsb, cal) {
                    var rgb = HSBToRGB(hsb);
                    $(cal).data('colorpicker').fields.eq(1).val(rgb.r).end().eq(2).val(rgb.g).end().eq(3).val(rgb.b).end();
                },
                fillHSBFields = function (hsb, cal) {
                    $(cal).data('colorpicker').fields.eq(4).val(hsb.h).end().eq(5).val(hsb.s).end().eq(6).val(hsb.b).end();
                },
                fillHexFields = function (hsb, cal) {
                    $(cal).data('colorpicker').fields.eq(0).val(HSBToHex(hsb)).end();
                },
                setSelector = function (hsb, cal) {
                    $(cal).data('colorpicker').selector.css('backgroundColor', '#' + HSBToHex({
                        h: hsb.h,
                        s: 100,
                        b: 100
                    }));
                    $(cal).data('colorpicker').selectorIndic.css({
                        left: parseInt(150 * hsb.s / 100, 10),
                        top: parseInt(150 * (100 - hsb.b) / 100, 10)
                    });
                },
                setHue = function (hsb, cal) {
                    $(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h / 360, 10));
                },
                setCurrentColor = function (hsb, cal) {
                    $(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + HSBToHex(hsb));
                },
                setNewColor = function (hsb, cal) {
                    $(cal).data('colorpicker').newColor.css('backgroundColor', '#' + HSBToHex(hsb));
                },
                keyDown = function (ev) {
                    var pressedKey = ev.charCode || ev.keyCode || -1;
                    if ((pressedKey > charMin && pressedKey <= 90) || pressedKey == 32) {
                        return false;
                    }
                    var cal = $(this).parent().parent();
                    if (cal.data('colorpicker').livePreview === true) {
                        change.apply(this);
                    }
                },
                change = function (ev) {
                    var cal = $(this).parent().parent(),
                        col;
                    if (this.parentNode.className.indexOf('_hex') > 0) {
                        cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));
                    } else if (this.parentNode.className.indexOf('_hsb') > 0) {
                        cal.data('colorpicker').color = col = fixHSB({
                            h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
                            s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
                            b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
                        });
                    } else {
                        cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
                            r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
                            g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
                            b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
                        }));
                    }
                    if (ev) {
                        fillRGBFields(col, cal.get(0));
                        fillHexFields(col, cal.get(0));
                        fillHSBFields(col, cal.get(0));
                    }
                    setSelector(col, cal.get(0));
                    setHue(col, cal.get(0));
                    setNewColor(col, cal.get(0));
                    cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
                },
                blur = function (ev) {
                    var cal = $(this).parent().parent();
                    cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
                },
                focus = function () {
                    charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
                    $(this).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
                    $(this).parent().addClass('colorpicker_focus');
                },
                downIncrement = function (ev) {
                    var field = $(this).parent().find('input').focus();
                    var current = {
                        el: $(this).parent().addClass('colorpicker_slider'),
                        max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
                        y: ev.pageY,
                        field: field,
                        val: parseInt(field.val(), 10),
                        preview: $(this).parent().parent().data('colorpicker').livePreview
                    };
                    $(document).bind('mouseup', current, upIncrement);
                    $(document).bind('mousemove', current, moveIncrement);
                },
                moveIncrement = function (ev) {
                    var invert = -1;
                    ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + invert * (ev.pageY - ev.data.y), 10))));
                    if (ev.data.preview) {
                        change.apply(ev.data.field.get(0), [true]);
                    }
                    return false;
                },
                upIncrement = function (ev) {
                    change.apply(ev.data.field.get(0), [true]);
                    ev.data.el.removeClass('colorpicker_slider').find('input').focus();
                    $(document).unbind('mouseup', upIncrement);
                    $(document).unbind('mousemove', moveIncrement);
                    return false;
                },
                downHue = function (ev) {
                    var current = {
                        cal: $(this).parent(),
                        y: $(this).offset().top
                    };
                    current.preview = current.cal.data('colorpicker').livePreview;
                    $(document).bind('mouseup', current, upHue);
                    $(document).bind('mousemove', current, moveHue);
                },
                moveHue = function (ev) {
                    change.apply(ev.data.cal.data('colorpicker').fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.y)))) / 150, 10)).get(0), [ev.data.preview]);
                    return false;
                },
                upHue = function (ev) {
                    fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    $(document).unbind('mouseup', upHue);
                    $(document).unbind('mousemove', moveHue);
                    return false;
                },
                downSelector = function (ev) {
                    var current = {
                        cal: $(this).parent(),
                        pos: $(this).offset()
                    };
                    current.preview = current.cal.data('colorpicker').livePreview;
                    $(document).bind('mouseup', current, upSelector);
                    $(document).bind('mousemove', current, moveSelector);
                },
                moveSelector = function (ev) {
                    change.apply(ev.data.cal.data('colorpicker').fields.eq(6).val(parseInt(100 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.pos.top)))) / 150, 10)).end().eq(5).val(parseInt(100 * (Math.max(0, Math.min(150, (ev.pageX - ev.data.pos.left)))) / 150, 10)).get(0), [ev.data.preview]);
                    return false;
                },
                upSelector = function (ev) {
                    fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                    $(document).unbind('mouseup', upSelector);
                    $(document).unbind('mousemove', moveSelector);
                    return false;
                },
                enterSubmit = function (ev) {
                    $(this).addClass('colorpicker_focus');
                },
                leaveSubmit = function (ev) {
                    $(this).removeClass('colorpicker_focus');
                },
                clickSubmit = function (ev) {
                    var cal = $(this).parent();
                    var col = cal.data('colorpicker').color;
                    cal.data('colorpicker').origColor = col;
                    setCurrentColor(col, cal.get(0));
                    cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data('colorpicker').el);
                },
                show = function (ev) {
                    var cal = $('#' + $(this).data('colorpickerId'));
                    cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
                    var pos = $(this).offset();
                    var viewPort = getViewport();
                    var top = pos.top + this.offsetHeight;
                    var left = pos.left;
                    if (top + 176 > viewPort.t + viewPort.h) {
                        top -= this.offsetHeight + 176;
                    }
                    if (left + 356 > viewPort.l + viewPort.w) {
                        left -= 356;
                    }
                    cal.css({
                        left: left + 'px',
                        top: top + 'px'
                    });
                    if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
                        cal.show();
                    }
                    $(document).bind('mousedown', {
                        cal: cal
                    }, hide);
                    return false;
                },
                hide = function (ev) {
                    if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
                        if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
                            ev.data.cal.hide();
                        }
                        $(document).unbind('mousedown', hide);
                    }
                },
                isChildOf = function (parentEl, el, container) {
                    if (parentEl == el) {
                        return true;
                    }
                    if (parentEl.contains) {
                        return parentEl.contains(el);
                    }
                    if (parentEl.compareDocumentPosition) {
                        return !!(parentEl.compareDocumentPosition(el) & 16);
                    }
                    var prEl = el.parentNode;
                    while (prEl && prEl != container) {
                        if (prEl == parentEl) return true;
                        prEl = prEl.parentNode;
                    }
                    return false;
                },
                getViewport = function () {
                    var m = document.compatMode == 'CSS1Compat';
                    return {
                        l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
                        t: window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
                        w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
                        h: window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
                    };
                },
                fixHSB = function (hsb) {
                    return {
                        h: Math.min(360, Math.max(0, hsb.h)),
                        s: Math.min(100, Math.max(0, hsb.s)),
                        b: Math.min(100, Math.max(0, hsb.b))
                    };
                },
                fixRGB = function (rgb) {
                    return {
                        r: Math.min(255, Math.max(0, rgb.r)),
                        g: Math.min(255, Math.max(0, rgb.g)),
                        b: Math.min(255, Math.max(0, rgb.b))
                    };
                },
                fixHex = function (hex) {
                    var len = 6 - hex.length;
                    if (len > 0) {
                        var o = [];
                        for (var i = 0; i < len; i++) {
                            o.push('0');
                        }
                        o.push(hex);
                        hex = o.join('');
                    }
                    return hex;
                },
                HexToRGB = function (hex) {
                    var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                    return {
                        r: hex >> 16,
                        g: (hex & 0x00FF00) >> 8,
                        b: (hex & 0x0000FF)
                    };
                },
                HexToHSB = function (hex) {
                    return RGBToHSB(HexToRGB(hex));
                },
                RGBToHSB = function (rgb) {
                    var hsb = {
                        h: 0,
                        s: 0,
                        b: 0
                    };
                    var min = Math.min(rgb.r, rgb.g, rgb.b);
                    var max = Math.max(rgb.r, rgb.g, rgb.b);
                    var delta = max - min;
                    hsb.b = max;
                    if (max != 0) {}
                    hsb.s = max != 0 ? 255 * delta / max : 0;
                    if (hsb.s != 0) {
                        if (rgb.r == max) {
                            hsb.h = (rgb.g - rgb.b) / delta;
                        } else if (rgb.g == max) {
                            hsb.h = 2 + (rgb.b - rgb.r) / delta;
                        } else {
                            hsb.h = 4 + (rgb.r - rgb.g) / delta;
                        }
                    } else {
                        hsb.h = -1;
                    }
                    hsb.h *= 60;
                    if (hsb.h < 0) {
                        hsb.h += 360;
                    }
                    hsb.s *= 100 / 255;
                    hsb.b *= 100 / 255;
                    return hsb;
                },
                HSBToRGB = function (hsb) {
                    var rgb = {};
                    var h = Math.round(hsb.h);
                    var s = Math.round(hsb.s * 255 / 100);
                    var v = Math.round(hsb.b * 255 / 100);
                    if (s == 0) {
                        rgb.r = rgb.g = rgb.b = v;
                    } else {
                        var t1 = v;
                        var t2 = (255 - s) * v / 255;
                        var t3 = (t1 - t2) * (h % 60) / 60;
                        if (h == 360) h = 0;
                        if (h < 60) {
                            rgb.r = t1;
                            rgb.b = t2;
                            rgb.g = t2 + t3
                        } else if (h < 120) {
                            rgb.g = t1;
                            rgb.b = t2;
                            rgb.r = t1 - t3
                        } else if (h < 180) {
                            rgb.g = t1;
                            rgb.r = t2;
                            rgb.b = t2 + t3
                        } else if (h < 240) {
                            rgb.b = t1;
                            rgb.r = t2;
                            rgb.g = t1 - t3
                        } else if (h < 300) {
                            rgb.b = t1;
                            rgb.g = t2;
                            rgb.r = t2 + t3
                        } else if (h < 360) {
                            rgb.r = t1;
                            rgb.g = t2;
                            rgb.b = t1 - t3
                        } else {
                            rgb.r = 0;
                            rgb.g = 0;
                            rgb.b = 0
                        }
                    }
                    return {
                        r: Math.round(rgb.r),
                        g: Math.round(rgb.g),
                        b: Math.round(rgb.b)
                    };
                },
                RGBToHex = function (rgb) {
                    var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];
                    $.each(hex, function (nr, val) {
                        if (val.length == 1) {
                            hex[nr] = '0' + val;
                        }
                    });
                    return hex.join('');
                },
                HSBToHex = function (hsb) {
                    return RGBToHex(HSBToRGB(hsb));
                },
                restoreOriginal = function () {
                    var cal = $(this).parent();
                    var col = cal.data('colorpicker').origColor;
                    cal.data('colorpicker').color = col;
                    fillRGBFields(col, cal.get(0));
                    fillHexFields(col, cal.get(0));
                    fillHSBFields(col, cal.get(0));
                    setSelector(col, cal.get(0));
                    setHue(col, cal.get(0));
                    setNewColor(col, cal.get(0));
                };
            return {
                init: function (opt) {
                    opt = $.extend({}, defaults, opt || {});
                    if (typeof opt.color == 'string') {
                        opt.color = HexToHSB(opt.color);
                    } else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
                        opt.color = RGBToHSB(opt.color);
                    } else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
                        opt.color = fixHSB(opt.color);
                    } else {
                        return this;
                    }
                    return this.each(function () {
                        if (!$(this).data('colorpickerId')) {
                            var options = $.extend({}, opt);
                            options.origColor = opt.color;
                            var id = 'collorpicker_' + parseInt(Math.random() * 1000);
                            $(this).data('colorpickerId', id);
                            var cal = $(tpl).attr('id', id);
                            if (options.flat) {
                                cal.appendTo(this).show();
                            } else {
                                cal.appendTo(document.body);
                            }
                            options.fields = cal.find('input').bind('keyup', keyDown).bind('change', change).bind('blur', blur).bind('focus', focus);
                            cal.find('span').bind('mousedown', downIncrement).end().find('>div.colorpicker_current_color').bind('click', restoreOriginal);
                            options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
                            options.selectorIndic = options.selector.find('div div');
                            options.el = this;
                            options.hue = cal.find('div.colorpicker_hue div');
                            cal.find('div.colorpicker_hue').bind('mousedown', downHue);
                            options.newColor = cal.find('div.colorpicker_new_color');
                            options.currentColor = cal.find('div.colorpicker_current_color');
                            cal.data('colorpicker', options);
                            cal.find('div.colorpicker_submit').bind('mouseenter', enterSubmit).bind('mouseleave', leaveSubmit).bind('click', clickSubmit);
                            fillRGBFields(options.color, cal.get(0));
                            fillHSBFields(options.color, cal.get(0));
                            fillHexFields(options.color, cal.get(0));
                            setHue(options.color, cal.get(0));
                            setSelector(options.color, cal.get(0));
                            setCurrentColor(options.color, cal.get(0));
                            setNewColor(options.color, cal.get(0));
                            if (options.flat) {
                                cal.css({
                                    position: 'relative',
                                    display: 'block'
                                });
                            } else {
                                $(this).bind(options.eventName, show);
                            }
                        }
                    });
                },
                showPicker: function () {
                    return this.each(function () {
                        if ($(this).data('colorpickerId')) {
                            show.apply(this);
                        }
                    });
                },
                hidePicker: function () {
                    return this.each(function () {
                        if ($(this).data('colorpickerId')) {
                            $('#' + $(this).data('colorpickerId')).hide();
                        }
                    });
                },
                setColor: function (col) {
                    if (typeof col == 'string') {
                        col = HexToHSB(col);
                    } else if (col.r != undefined && col.g != undefined && col.b != undefined) {
                        col = RGBToHSB(col);
                    } else if (col.h != undefined && col.s != undefined && col.b != undefined) {
                        col = fixHSB(col);
                    } else {
                        return this;
                    }
                    return this.each(function () {
                        if ($(this).data('colorpickerId')) {
                            var cal = $('#' + $(this).data('colorpickerId'));
                            cal.data('colorpicker').color = col;
                            cal.data('colorpicker').origColor = col;
                            fillRGBFields(col, cal.get(0));
                            fillHSBFields(col, cal.get(0));
                            fillHexFields(col, cal.get(0));
                            setHue(col, cal.get(0));
                            setSelector(col, cal.get(0));
                            setCurrentColor(col, cal.get(0));
                            setNewColor(col, cal.get(0));
                        }
                    });
                }
            };
        }();
    $.fn.extend({
        ColorPicker: ColorPicker.init,
        ColorPickerHide: ColorPicker.hidePicker,
        ColorPickerShow: ColorPicker.showPicker,
        ColorPickerSetColor: ColorPicker.setColor
    });
})(jQuery);
var Color = {
    toRgbStr: function (color) {
        var isRGB = color.match(/rgb/ig);
        if (isRGB && isRGB.length) {
            return color;
        } else {
            color = color.substr(color.indexOf('#') + 1);
            var r = parseInt(color.slice(0, 2), 16);
            var g = parseInt(color.slice(2, 4), 16);
            var b = parseInt(color.slice(4, 6), 16);
            return 'rgb(' + r + ',' + g + ',' + b + ')';
        }
    },
    rgbStrToArray: function (rgbStr) {
        dodebug('Color::rgbStrToArray: converting string ' + rgbStr);
        var tokens = rgbStr.replace(/[rgb()\s]/ig, "").split(",");
        return [parseInt(tokens[0]), parseInt(tokens[1]), parseInt(tokens[2])];
    },
    rgbStrToHex: function (rgbStr) {
        var tokens = rgbStr.replace(/[rgb()\s]/ig, "").split(",");
        var rHex = parseInt(tokens[0]).toString(16);
        var gHex = parseInt(tokens[1]).toString(16);
        var bHex = parseInt(tokens[2]).toString(16);
        rHex = (rHex.length < 2) ? '0' + rHex : rHex;
        gHex = (gHex.length < 2) ? '0' + gHex : gHex;
        bHex = (bHex.length < 2) ? '0' + bHex : bHex;
        return rHex + gHex + bHex;
    },
    rgbArrayToStr: function (rgbArr) {
        if (typeof (rgbArr) == 'object' && rgbArr.length == 3) {
            return 'rgb(' + Math.round(rgbArr[0]) + ',' + Math.round(rgbArr[1]) + ',' + Math.round(rgbArr[2]) + ')';
        } else {
            dodebug('Color::rgbArrayToStr: couldn\'t convert value to string, are you sure it\'s an array?');
            return false;
        }
    },
    offsetColor: function (color, offset) {
        dodebug('converting color ' + color + '..');
        switch (typeof (color)) {
        case 'array':
            break;
        case 'string':
            color = Color.rgbStrToArray(Color.toRgbStr(color));
            break;
        default:
            break;
        }
        var percentage = (offset < 1) && (Math.ceil(offset) == 1);
        var r = color[0];
        var g = color[1];
        var b = color[2];
        if (percentage) {
            r += (r * offset);
            g += (g * offset);
            b += (b * offset);
        } else {
            r += offset;
            g += offset;
            b += offset;
        }
        r = Math.min(255, Math.max(0, r));
        g = Math.min(255, Math.max(0, g));
        b = Math.min(255, Math.max(0, b));
        dodebug(Color.rgbArrayToStr([r, g, b]));
        return Color.rgbArrayToStr([r, g, b]);
    }
};
var BackgroundImageUploader = RMUIWidget.extend({
    _name: 'BackgroundImageUploader',
    _uploadifySelector: '',
    _scriptArgs: {
        kid: null,
        type: 'style',
        index: 0,
        onSelect: null,
        onProgress: null,
        onComplete: null,
        onCancel: null,
        onError: null
    },
    init: function (targetElement, options) {
        this._uploadifySelector = '#rm-css-bgimage-uploader';
        this._scriptArgs = {
            rmPageId: getGlobal('fanPageId'),
            kid: getGlobal('kid'),
            type: 'style',
            onSelect: function (resp) {},
            onProgress: function (resp) {},
            onComplete: function (resp) {},
            onCancel: function (resp) {},
            onError: function (resp) {}
        };
        if (options && options.hasOwnProperty('scriptArgs')) {
            this._scriptArgs = $.extend(this._scriptArgs, options.scriptArgs);
        }
        this._super(targetElement);
    },
    install: function () {
        this._super();
        var origarturl = "";
        this.activateHoverHandler();
        var _uploader = this;
        $(this._uploadifySelector).uploadify({
            uploader: '/flash/uploadify.swf',
            script: Environment.getHost() + '/upload',
            folder: '/var/www/cache',
            cancelImg: 'http://a.ak.static-abc.com/images/soundcloud/cancel.png?v=2.70',
            buttonText: 'Upload new',
            hideButton: true,
            fileDesc: 'jpg, jpeg, png, gif',
            fileExt: '*.jpg;*.jpeg;*.gif;*.png',
            wmode: 'transparent',
            scriptAccess: 'always',
            auto: 'false',
            multi: false,
            height: '18',
            width: '119',
            sizeLimit: (1024 * 1024 * 4),
            onSelect: function (event, queueID, fileObj) {
                _uploader.deactivateHoverHandler();
                $(event.currentTarget).data('destination').addClass('uploadify-queue-' + queueID);
                $(_uploader._domTarget).css({
                    zIndex: -1
                });
                $('.progress-bar', '#rm-css-bgimage-control').text('').removeClass('hover').addClass('uploading');
                var args = $.extend(_uploader.getScriptArgs(), {
                    element: $(event.currentTarget).data('destination').attr('rel')
                });
                $(_uploader._uploadifySelector).uploadifySettings('scriptData', args);
                $(_uploader._uploadifySelector).uploadifyUpload();
                _uploader._scriptArgs.onSelect(event);
                return false;
            },
            onProgress: function (event, queueID, response, data) {
                var destination = $(event.currentTarget).data('destination');
                if (destination.hasClass('uploadify-queue-' + queueID)) {
                    _uploader.deactivateHoverHandler();
                    $('.progress-bar', '#rm-css-bgimage-control').addClass('uploading').css({
                        width: data.percentage + '%'
                    }).text(data.percentage + '%');
                }
                _uploader._scriptArgs.onProgress(event);
                return false;
            },
            onComplete: function (event, queueID, fileObj, response, data) {
				//alert(response);
                dodebug(response);
                //response = JSON.parse(response);
                //alert(response);
				var destination = $(event.currentTarget).data('destination');
				_uploader.activateHoverHandler();
				
                if (destination.hasClass('uploadify-queue-' + queueID)) {
                    $('.progress-bar', '#rm-css-bgimage-control').css({
                        textAlign: 'center'
                    }).text('loading...');
                    $(_uploader._domTarget).css({
                        zIndex: ''
                    });
                    _uploader.activateHoverHandler();
					
                }
                $(event.currentTarget).trigger({
                    type: 'complete',
                    response: response,
                    queueID: queueID
                });
                _uploader._scriptArgs.onComplete(event);
				return true;
            },
            onCancel: function (event, queueID, fileObj, data) {
                var destination = $(event.currentTarget).data('destination');
                if (destination.hasClass('uploadify-queue-' + queueID)) {
                    destination.removeClass('uploadify-queue-' + queueID);
                    $('.progress-bar', '#rm-css-bgimage-control').removeClass('uploading');
                    _uploader.activateHoverHandler();
                    $(this._domTarget).css({
                        zIndex: ''
                    });
                }
                _uploader._scriptArgs.onCancel(event);
                return true;
            },
            onError: function (event, queueID, fileObj, errorObj) {
                var destination = $(event.currentTarget).data('destination');
                if (destination.hasClass('uploadify-queue-' + queueID)) {
                    destination.removeClass('uploadify-queue-' + queueID);
                    $('.progress-bar', '#rm-css-bgimage-control').removeClass('uploading').addClass('error');
                    _uploader.activateHoverHandler();
                    $(_uploader._domTarget).css({
                        zIndex: ''
                    });
                }
                if (errorObj.type == "File Size") {
                    showError("The file upload limit for backgrounds and banners is 4Mb");
                }
                _uploader.onError(event);
                return true;
            }
        });
    },
    resetScriptArgs: function () {
        this._scriptArgs = {
            rmPageId: getGlobal('fanPageId'),
            kid: getGlobal('kid'),
            type: 'style',
            onSelect: function (resp) {},
            onProgress: function (resp) {},
            onComplete: function (resp) {},
            onCancel: function (resp) {},
            onError: function (resp) {}
        };
    },
    getScriptArgs: function () {
        return this._scriptArgs;
    },
    setScriptArg: function (key, val) {
        if (key === undefined) {
            dodebug(this._name + '::setScriptArgs, no key defined!');
            return false;
        }
        if (val === undefined && this._scriptArgs.hasOwnProperty(key)) {
            dodebug(this._name + '::setScriptArgs, deleting value for key ' + key);
            delete this._scriptArgs[key];
        } else {
            this._scriptArgs[key] = val;
        }
    },
    activateHoverHandler: function () {
        if (!$(this._domTarget).data('hover_bound')) {
            $(this._domTarget).bind('mouseenter', function (e) {
                var progress_bar = $('.progress-bar', '#rm-css-bgimage-control');
                progress_bar.addClass('hover').data('text_old', progress_bar.text()).text('upload new?');
            }).bind('mouseleave', function (e) {
                var progress_bar = $('.progress-bar', '#rm-css-bgimage-control');
                progress_bar.removeClass('hover').text(progress_bar.data('text_old'));
            }).data('hover_bound', true);
        }
    },
    deactivateHoverHandler: function () {
        if ($(this._domTarget).data('hover_bound')) {
            $(this._domTarget).removeClass('hover').unbind('mouseenter').unbind('mouseleave').data('hover_bound', false);
        }
    }
});
var BackgroundImageWidget = RMUIWidget.extend({
    _name: "BackgroundImageWidget",
    _uploaderSelector: '#bgimage-upload',
    _uploader: false,
    init: function (targetElement) {
        this._position = {
            top: 0,
            left: 0
        };
        this._bgsize = {
            width: 0,
            height: 0
        };
        this._modified = false;
        this._super(targetElement);
    },
    install: function () {
        this._super();
        this._uploader = this.getWidget('BackgroundImageUploader', $(this._uploaderSelector)) || new BackgroundImageUploader($(this._uploaderSelector));
        this._panWindow = $("<div class='rm-css-pan-window'></div>").css({
            display: 'none',
            opacity: 0,
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%'
        }).appendTo(this._domTarget);
        this._panWindow.bind('mousedown', $.proxy(this, 'processUserEvent'));
    },
    activate: function () {
        if (!this._super()) return false;
        dodebug(this._name + '::activate : ' + this._domTarget.attr('id'));
        this.loadImageDimensions();
        this._modified = false;
        this._domTarget.css({
            cursor: 'move'
        }).children().animate({
            opacity: 0.3
        }, 500);
        this._panWindow.css({
            display: 'block'
        });
        return true;
    },
    deactivate: function () {
        this._super();
        dodebug(this._name + '::deactivate : ' + this._domTarget.attr('id'));
        this._modified = false;
        $(this._domTarget).css({
            cursor: 'pointer'
        });
        this._domTarget.children().animate({
            opacity: 1
        }, 500);
        this._panWindow.css({
            display: 'none'
        });
    },
    enable: function () {
        this._super();
        dodebug(this._name + '::enable : ' + this._domTarget.attr('id'));
        this._uploader.activateHoverHandler();
    },
    changeMode: function (mode) {
        switch (mode) {
        case 'css':
            this.enable();
            break;
        case 'content':
            this.disable();
            break;
        }
    },
    disable: function () {
        this._super();
        dodebug(this._name + '::disable : ' + this._domTarget.attr('id'));
        this._uploader.deactivateHoverHandler();
    },
    loadImageDimensions: function () {
        if (this._domTarget.css('background-image') != 'none') {
            var bg_img = new Image();
            var img_src = this._domTarget.css('background-image').replace(/url\(/, '').replace(/"/g, '');
            img_src = img_src.substr(0, img_src.length - 1);
            $(bg_img).load($.proxy(function (event) {
                this._bgsize.width = event.currentTarget.width;
                this._bgsize.height = event.currentTarget.height;
            }, this)).attr('src', img_src);
        }
    },
    setPosition: function (positionLeft, positionTop) {
        var left = 0;
        var top = 0;
        if (positionLeft.indexOf('%') > -1) {
            var ratio = (parseFloat(positionLeft) / 100);
            left = this._domTarget.width() * ratio;
            left -= (ratio * this._bgsize.width);
        } else left = parseInt(positionLeft);
        if (positionTop.indexOf('%') > -1) {
            var ratio = (parseFloat(positionTop) / 100);
            top = this._domTarget.height() * ratio;
            top -= (ratio * this._bgsize.height);
        } else top = parseInt(positionTop);
        this._position.left = left;
        this._position.top = top;
    },
    getPosition: function () {
        return this._position;
    },
    hasModified: function () {
        return this._modified;
    },
    processUserEvent: function (event, doSuper) {
        if (!event.data) {
            event.data = {};
        }
        if (doSuper) {
            return this._super(event);
        }
        var target = $(event.currentTarget);
        if (event.data.cancel) {
            this.deactivate();
        }
        if (this.isActive()) {
            switch (event.type) {
            case 'mousedown':
                target.data('origin', false).css({
                    cursor: 'move'
                });
                $('body').css({
                    cursor: 'move'
                }).bind('mousemove mouseup', {
                    op: 'offset'
                }, $.proxy(this, 'handleDrag'));
                dodebug('offset event started');
                break;
            default:
                break;
            }
        }
        return this.processUserEvent(event, true);
    },
    handleDrag: function (event) {
        var target = event.currentTarget;
        switch (event.data.op) {
        case 'offset':
            switch (event.type) {
            case 'mousemove':
                if (!this._panWindow.data('origin')) {
                    this._panWindow.data('origin', {
                        x: event.pageX,
                        y: event.pageY
                    });
                }
                var pos = {
                    left: event.pageX - parseInt(this._panWindow.data('origin').x),
                    top: event.pageY - parseInt(this._panWindow.data('origin').y)
                };
                this._domTarget.css({
                    backgroundPosition: (this.getPosition().left + pos.left) + "px " + (this.getPosition().top + pos.top) + "px"
                });
                this._modified = true;
                break;
            case 'mouseup':
                dodebug('offset event stopped');
                var bgPos = this._domTarget.css('backgroundPosition');
                var offsets = bgPos.split(' ');
                this.setPosition(offsets[0], offsets[1]);
                $(target).css({
                    cursor: 'pointer'
                });
                $('body').css({
                    cursor: ''
                }).unbind('mousemove mouseup', this.handleDrag);
                event.stopPropagation();
                this.triggerEvent('update', this.getPosition());
                break;
            default:
                break;
            }
            break;
        default:
            break;
        }
        return false;
    }
});
var ImageUploadWidget = RMUIWidget.extend({
    _domSelector: false,
    _name: 'ImageUploadWidget',
    _scTrackId: false,
    _queues: false,
    _host: '',
    _url: '',
    _args: {},
    DEFAULT_URL: '/upload',
    DEFAULT_WIDTH: 100,
    DEFAULT_HEIGHT: 100,
    _loadIndicator: false,
    _progressBar: false,
    _uploadifyForm: false,
    _waiting: false,
    init: function (targetElement, options) {
        this._queues = new Array();
        this._host = Environment.getHost();
        this._url = this.DEFAULT_URL;
        this._args = {
            'rmPageId': getGlobal('fanPageId'),
            'kid': getGlobal('kid')
        };
        this._width = $(targetElement).width() || this.DEFAULT_WIDTH;
        this._height = $(targetElement).height() || this.DEFAULT_HEIGHT;
        if (options) {
            if (options.hasOwnProperty('url')) {
                this._url = options.url;
            }
            if (options.hasOwnProperty('data')) {
                this._args = options.data;
            }
            if (options.hasOwnProperty('width')) {
                this._width = options.width;
            }
            if (options.hasOwnProperty('height')) {
                this._height = options.height;
            }
        }
        this._domSelector = targetElement.attr('id');
        this._uploadifySelector = this._domSelector + '-uploadify';
        this._uploadify = false;
        var formDOM = '<div id="' + this._domSelector + '-form"><input id="' + this._uploadifySelector + '" type="file" name="image" /><em class="help-overlay rc-m">Upload new image?</em></div>';
        this._uploadifyForm = $(formDOM);
        this._uploadifyForm.css({
            width: '100%',
            height: '100%',
            'min-height': '10px',
            top: '0px',
            left: '0px',
            position: 'absolute',
            zIndex: 1
        }).appendTo(targetElement);
        this._waitMessage = $('<em class="help-overlay rc-m loading">Please wait</em>');
        this._waitMessage.css({
            zIndex: 1
        }).appendTo(this._uploadifyForm).hide();
        this._waiting = false;
        this._resize = this.resize;
        this._super(targetElement);
    },
    install: function () {
        this._super();
        this._domTarget.addClass('rm-image-upload');
        $('.help-overlay', this._uploadifyForm).hide();
        this._domTarget.bind('mouseenter mouseleave', {
            widget: this
        }, this.handleHover);
        dodebug(this._name + '::install, booting up uploadify');
        this.installUploadify();
    },
    installUploadify: function () {
        dodebug(this._name + '::installUploadify(): script destination = ' + this._url);
        var _uploader = this;
        var width = this._domTarget.width || this.DEFAULT_WIDTH;
        var height = this._domTarget.height || this.DEFAULT_HEIGHT;
        $('#' + this._uploadifySelector).uploadify({
            uploader: '/flash/uploadify.swf',
            script: this._url,
            folder: '/var/www/cache/',
            cancelImg: 'http://a.ak.static-abc.com/images/soundcloud/cancel.png?v=2.70',
            buttonText: 'Change',
            hideButton: true,
            fileDesc: 'jpg, jpeg, png, gif',
            fileExt: '*.jpg;*.jpeg;*.gif;*.png',
            wmode: 'transparent',
            scriptAccess: 'always',
            sizeLimit: (1024 * 1024 * 4),
            height: this._height,
            width: this._width,
            multi: false,
            onInit: function (event) {
                _uploader._uploadify = $('#' + _uploader._uploadifySelector);
                $('#' + _uploader._uploadifySelector + 'Uploader').css({
                    position: 'absolute',
                    zIndex: 2
                });
                return true;
            },
            onSelect: function (event, queueID, fileObj) {
                _uploader.upload();
                _uploader.storeQueueID(queueID);
                return false;
            },
            onOpen: function (event, queueID, fileObj) {
                dodebug(_uploader._name + '::OPEN');
                _uploader.triggerEvent('uploadstart', {
                    type: 'uploadstart',
                    queueID: queueID
                });
                return true;
            },
            onProgress: function (event, queueID, fileObj, data) {
                dodebug(_uploader._name + '::PROGRESS');
                _uploader.triggerEvent('uploadprogress', {
                    type: 'uploadprogress',
                    queueID: queueID,
                    data: {
                        percentage: data.percentage
                    }
                });
                return false;
            },
            onComplete: function (event, queueID, fileObj, response, data) {
                if (response) {
                    var json = eval('(' + response + ')');
                    _uploader.triggerEvent('uploadcomplete', {
                        type: 'uploadcomplete',
                        queueID: queueID,
                        data: {
                            response: json
                        }
                    });
                } else {
                    dodebug('Error detected with file upload. Check logs for more info.');
                }
                return true;
            },
            onCancel: function (event, queueID, fileObj, data) {
                _uploader.triggerEvent('uploadcancel', {
                    type: 'uploadcancel',
                    queueID: queueID
                });
                return true;
            },
            onError: function (event, queueID, fileObj, errObj) {
                _uploader.triggerEvent('uploaderror', {
                    type: 'uploaderror',
                    queueID: queueID,
                    error: errObj
                });
                if (errorObj.type == "File Size") {
                    showError("The file upload limit for album artwork is 4Mb");
                }
                return true;
            }
        });
    },
    changeMode: function (mode) {
        switch (mode) {}
    },
    enable: function () {
        this._super();
        this._uploadifyForm.css({
            height: '',
            overflow: ''
        });
    },
    disable: function () {
        this._super();
        this._uploadifyForm.css({
            height: 0,
            overflow: 'hidden'
        });
    },
    setArgs: function (data) {
        if (data === undefined) {
            dodebug(this._name + '::setArgs, no args given!');
            return false;
        }
        this._args = data;
    },
    setArg: function (key, value) {
        if (key === undefined) {
            dodebug(this._name + '::setArg, no key given!');
            return false;
        }
        this._args[key] = value;
    },
    setWaiting: function (isWaiting) {
        this._waiting = isWaiting;
    },
    handleHover: function (event) {
        if (!event.data.widget._waiting) {
            switch (event.type) {
            case 'mouseenter':
                $('.help-overlay:not(.loading)', event.data.widget._domTarget).fadeIn('fast');
                break;
            case 'mouseleave':
                $('.help-overlay', event.data.widget._domTarget).hide();
                break;
            default:
                break;
            }
        }
        return false;
    },
    upload: function () {
        this._uploadify.uploadifySettings('script', this._url);
        this._uploadify.uploadifySettings('scriptData', this._args);
        this._uploadify.uploadifyUpload();
        dodebug(this._name + '::upload(): starting upload with new script args =');
        dodebug(this._args);
    },
    cancel: function (queueID) {
        if (this.hasQueueID(queueID)) {
            $(this._uploadifySelector).uploadifyCancel(queueID);
        } else {
            dodebug('Error: this uploadify instance doesn\'t have control of this queueID=' + queueID);
        }
    },
    storeQueueID: function (queueID) {
        if (!this.hasQueueID(queueID)) {
            this._queues.push(queueID);
        }
    },
    hasQueueID: function (queueID) {
        for (var i = 0; i < this._queues.length; i++) {
            if (this._queues[i] == queueID) {
                return true;
            }
        }
        return false;
    },
    resize: function () {
        $uploader = $('#' + this._uploadifySelector);
        var $img = this._domTarget.find('img'),
            width = this._width = $img.width(),
            height = this._height = $img.height();
        if ($img.length > 0 && width > 0 && height > 0) {
            $uploader.attr('width', width).attr('height', height).siblings('object').attr('width', width).attr('height', height);
            $uploader.uploadifySettings('width', width);
            $uploader.uploadifySettings('height', height);
        }
    }
});
var MultiStyleWidget = RMUIWidget.extend({
    _name: 'MultiStyleWidget',
    _mode: 'static',
    _uploader: null,
    _els: {
        SWITCH_MODE_BTN: '#rm-multi-banner-switch',
        SIDEDRAWER: '#rm-appearance-multi-banner'
    },
    _templates: {
        banner_item: '<li class="rm-banner" rel="{ INDEX }">' + '<a href="#remove-banner" class="rm-remove-link corner-display" title="Remove this Banner">Remove</a>' + '<img src="{ IMAGE URL }" alt="Banner image { INDEX }" />' + '<span class="hidden" name="style">{ STYLE }</span>' + '</li>'
    },
    _styles: {},
    _current: '',
    init: function (el) {
        this._super(el);
    },
    install: function () {
        this._mode = 'static';
        this._styles = {};
        this._current = 'rm-css-main-banner';
        this._super();
        $(this._els.SIDEDRAWER).data('template', this._templates.banner_item);
        this._uploader = new ImageUploadWidget($('#rm-appearance-multi-banner-upload'), {
            width: 180,
            height: 40,
            data: {
                type: 'banner',
                rmPageId: getGlobal('fanPageId'),
                kid: getGlobal('kid')
            }
        });
        this._uploader.addCallback('uploadstart', this, this.handleUpload);
        this._uploader.addCallback('uploadprogress', this, this.handleUpload);
        this._uploader.addCallback('uploadcomplete', this, this.handleUpload);
        this._uploader.addCallback('uploadcancel', this, this.handleUpload);
        this._uploader.addCallback('uploaderror', this, this.handleUpload);
        this.hideBannerDrawer();
        $(this._els.SWITCH_MODE_BTN).show();
        if ($('ul.thumbs li.rm-banner', this._els.SIDEDRAWER).length > 1) {
            this.setEditMode('multi');
        }
        $(this._els.SIDEDRAWER).detach().bind('click', function (event) {
            event.stopPropagation();
        }).appendTo('#editor-left-sidebar');
        var _multi_widget = this;
        $('ul.thumbs', this._els.SIDEDRAWER).sortable({
            containment: 'parent',
            revert: true,
            tolerance: 'pointer',
            update: function (event, ui) {
                var new_pos = $('ul li.rm-banner:not(.ui-placeholder)', _multi_widget._els.SIDEDRAWER).index(ui.item);
                var old_pos = ui.item.attr('rel');
                Saver.save('style-reorder', {
                    element: 'rm-css-main-banner',
                    oldPosition: old_pos,
                    newPosition: new_pos
                }, {
                    success: function (resp) {
                        $('.rm-css-edit[rel=' + _multi_widget._current + ']').data('seq', new_pos);
                        _multi_widget.refresh('current');
                        dodebug('MultiBackgroundImageWidget - /rest/style/reorder - banner moved from ' + old_pos + ' to ' + new_pos + ' [SUCCESS]');
                    },
                    error: function (error) {
                        dodebug('MultiBackgroundImageWidget - /rest/style/reorder - cannot move banner from ' + old_pos + ' to ' + new_pos + ' [ERROR]');
                    }
                });
            }
        });
        $(this._els.SIDEDRAWER).delegate('li.rm-banner', 'click', $.proxy(function (event) {
            var $target = $(event.currentTarget);
            var styles = JSON.parse($('span[name=style]', $target).text());
            var seq = $target.attr('rel') || 0;
            this.applyStyles(this._current, styles, seq);
            $target.addClass('selected').siblings().removeClass('selected').end();
        }, this));
        $(this._els.SIDEDRAWER).delegate('a.rm-remove-link', 'click', $.proxy(function (e) {
            e.stopPropagation();
            var $row = $(e.currentTarget).closest('li');
            var index = parseInt($row.attr('rel'));
            var styles = this.getCurrentStyles();
            var savedata = {
                element: this._current
            };
            if (!isNaN(index)) {
                styles.splice(index, 1);
                savedata.index = index;
            }
            if (styles.length < 1) {
                this.setEmptyBanner();
            }
            $row.remove();
            Saver.save('style-delete', savedata, {
                success: $.proxy(function (data) {
                    dodebug('MultiStyleWidget - /rest/style/delete - image #' + index + ' deleted [SUCCESS]');
                    this.refresh('current', true);
                }, this),
                error: $.proxy(function () {
                    this.refresh('current', true);
                }, this)
            });
        }, this));
        $(this._els.SWITCH_MODE_BTN).bind('click', $.proxy(function (event) {
            if (this._mode === 'static') {
                this.setEditMode('multi');
                this.refresh();
            } else {
                this.setEditMode('static');
            }
        }, this));
        this.refresh('first');
    },
    activate: function () {
        this._super();
        $(this._els.SWITCH_MODE_BTN).show();
        if (this._mode == 'multi') {
            this.showBannerDrawer();
        } else {
            var num_styles = this.getCurrentStyles().length;
            if (num_styles > 1) {
                this.setEditMode('multi');
            }
        }
    },
    deactivate: function () {
        this._super();
        $(this._els.SWITCH_MODE_BTN).hide();
        if (this.drawerVisible()) {
            this.hideBannerDrawer();
        }
    },
    enable: function () {
        this._super();
    },
    disable: function () {
        this._super();
        this.hideBannerDrawer();
    },
    getCurrentStyles: function () {
        if (!this._current) {
            return [];
        }
        var styles = this._styles[this._current] || [];
        return styles;
    },
    changeMode: function (mode) {
        switch (mode) {
        case 'css':
            this.enable();
            break;
        case 'content':
            this.disable();
            break;
        }
    },
    setEmptyBanner: function () {
        var css = {
            backgroundImage: 'none',
            height: 'auto',
            backgroundColor: 'transparent'
        };
        $('#editor-main-banner').attr('style', '').css(css).removeData('original_size');
        $('.progress-bar', '#rm-css-bgimage-control').removeClass('uploading').text('click to upload');
        $('#banner-placeholder').data('active', true).fadeIn();
        if ($('#rm-css-background-color').is(':visible')) {
            $('#rm-css-background-color').fadeOut();
        }
        $('#editor-main-banner a.rm-window-resizer-dragger').hide();
        RMUIWidgetRelay.relayEvent(RMUIEvent.STYLE_CHANGE, {
            css: css,
            element: 'rm-css-main-banner'
        });
        this.setEditMode('static');
    },
    buildStyleObject: function (rules, values) {
        var mapped_styles = {};
        for (var i in rules) {
            if (rules[i] === 'background-image' && values[i].indexOf('_520') < 0) {
                var stripped_image = values[i].replace(/url\(/, '').replace(/\)/, '');
                values[i] = 'url(' + this.getImageSize(stripped_image, '520') + ')';
            }
            mapped_styles[rules[i]] = values[i];
        }
        return mapped_styles;
    },
    applyStyles: function (element, styles, seq) {
        var defaults = {
            'background-image': 'none',
            'background-position': '0px 0px',
            'background-repeat': 'no-repeat',
            'background-color': 'transparent'
        };
        var css = $.extend(defaults, styles);
        if (css.height) {
            delete css.height;
        }
        RMUIWidgetRelay.relayEvent(RMUIEvent.STYLE_CHANGE, {
            css: css,
            element: element,
            seq: seq
        });
        $(this._els.SWITCH_MODE_BTN).show();
    },
    toggleBannerDrawer: function (animate) {
        if (animate === undefined) {
            animate = true;
        }
        return this.drawerVisible() ? hideBannerDrawer(animate) : showBannerDrawer(animate);
    },
    showBannerDrawer: function (animate) {
        if (animate === undefined) {
            animate = true;
        }
        var $drawer = $(this._els.SIDEDRAWER);
        if (animate) {
            $('#editor-left-sidebar > [id!="rm-appearance-multi-banner"]').animate({
                opacity: '-=0.5'
            }, 250).end()
            $drawer.show().css({
                right: -$drawer.parent().outerWidth() + 'px'
            }).animate({
                right: '-30px'
            }, 250);
        } else {
            $('#editor-left-sidebar > [id!="rm-appearance-multi-banner"]').hide().end()
            $drawer.show();
        }
    },
    hideBannerDrawer: function (animate) {
        if (animate === undefined) {
            animate = true;
        }
        var $drawer = $(this._els.SIDEDRAWER);
        if (animate) {
            $drawer.siblings().animate({
                opacity: 1
            }, 250).end().fadeOut();
        } else {
            $drawer.siblings().show().end().hide();
        }
    },
    drawerVisible: function () {
        return $(this._els.SIDEDRAWER).is(':visible');
    },
    setEditMode: function (mode) {
        if (mode === undefined) {
            return false;
        }
        switch (mode) {
        case 'static':
            $(this._els.SWITCH_MODE_BTN).fadeIn();
            $(this._els.SWITCH_MODE_BTN).html('Turn on Rotating Banners');
            if ($('#rm-appearance-multi-banner ul li.rm-banner').length > 0) {
                Saver.save('disable-multi-banners', {});
            }
            $(this._els.SIDEDRAWER + ' ul').empty();
            this.hideBannerDrawer();
            break;
        case 'multi':
            $(this._els.SWITCH_MODE_BTN).html('Turn off Rotating Banners');
            if (this.isActive()) {
                this.showBannerDrawer();
            }
            break;
        default:
            dodebug(this._name + '::setEditMode, invalid mode given: ' + mode);
            return false;
            break;
        }
        this._mode = mode;
    },
    refresh: function (op, sync, element) {
        if (element === undefined) {
            element = this._current;
        }
        $.ajax({
            url: '/rest/style',
            type: 'GET',
            data: {
                rmPageId: getGlobal('fanPageId'),
                element: element
            },
            dataType: 'json',
            context: this,
            cache: false,
            success: $.proxy(function (response) {
                var $banner_drawer = $('ul', this._els.SIDEDRAWER);
                $banner_drawer.empty();
                this._styles[element] = new Array();
                for (var i = 0, style; style = response.styles[i++];) {
                    if (!style.image) {
                        dodebug('Banner has no image - no empty image paths should be present!', style);
                        continue;
                    }
                    var style_map = this.buildStyleObject(style.styles, style.attributes);
                    var thumb_image = this.getImageSize(style.image, '180');
                    var template = $('#rm-appearance-multi-banner').data('template').replace(/\{ IMAGE URL \}/g, thumb_image).replace(/\{ INDEX \}/g, style.seq).replace(/\{ STYLE \}/g, JSON.stringify(style_map));
                    $(template).appendTo($banner_drawer);
                    this._styles[element].push(style_map);
                }
                var $selected;
                switch (op) {
                case 'first':
                    $selected = $('#rm-appearance-multi-banner ul li:first-child').siblings().removeClass('selected').end().addClass('selected');
                    break;
                case 'last':
                    $selected = $('#rm-appearance-multi-banner ul li:last-child').siblings().removeClass('selected').end().addClass('selected');
                    break;
                case 'current':
                default:
                    var seq = $('#editor-main-banner').data('seq');
                    $selected = $('#rm-appearance-multi-banner ul li[rel="' + seq + '"]').siblings().removeClass('selected').end().addClass('selected');
                }
                if (sync && $selected) {
                    $selected.trigger('click');
                }
            }, this)
        });
    },
    getImageSize: function (path, identifier) {
        var ext_indx = path.lastIndexOf('.');
        var ext = path.substring(ext_indx + 1);
        var base = path.substring(0, ext_indx);
        return base + '_' + identifier + '.' + ext;
    },
    handleSelectionChange: function (selection, widget) {
        this._current = false;
        if (selection && selection.hasClass('multi')) {
            var elem = selection.attr('rel');
            if (elem) {
                this._current = elem;
                var current_seq = parseInt(selection.data('seq'));
                if (this.getCurrentStyles().length > 0) {
                    if (isNaN(current_seq)) {
                        selection.data('seq', 0);
                    }
                }
            }
            dodebug('ACTIVATING MULTI STYLE WIDGET ON SELECTION CHANGE');
            this.activate();
        } else {
            this.deactivate();
        }
    },
    handleStyleSave: function (data) {
        var element;
        for (var i = 0, style; style = data[i++];) {
            if (style.element) {
                element = style.element;
                break;
            }
        }
        this.refresh('current', false, element);
    },
    handleUpload: function (event) {
        dodebug(this._name + '::handleUpload - event:' + event.type, event);
        try {
            switch (event.type) {
            case 'uploadstart':
                $('#rm-appearance-multi-banner-upload div.progress-bar').show().css({
                    width: 0
                });
                $('#rm-appearance-multi-banner-upload div.progress-number').text('0%').show();
                break;
            case 'uploadprogress':
                var banner_len = parseInt(event.data.percentage) / 100 * 160;
                $('#rm-appearance-multi-banner-upload div.progress-bar').css({
                    width: banner_len
                });
                $('#rm-appearance-multi-banner-upload div.progress-number').text(event.data.percentage + '%');
                break;
            case 'uploaderror':
                break;
            case 'uploadcomplete':
                $('#rm-appearance-multi-banner-upload div.progress-bar').hide();
                $('#rm-appearance-multi-banner-upload div.progress-number').hide();
                this.refresh();
                break;
            default:
                break;
            }
        } catch (e) {
            dodebug('MultiBackgroundImageWidget - Upload failed due to exceptions - ' + e.getMessage(), 'error');
        }
    }
});
var ResizableWidget = RMUIWidget.extend({
    _name: "ResizableWidget",
    init: function (targetElement) {
        this._windowHeight = {
            height: 0
        };
        this._modified = false;
        this._super(targetElement);
    },
    install: function () {
        this._super();
        $('<a class="rm-window-resize-dragger">Drag me to resize the frame</a>').css({
            position: 'absolute',
            bottom: '0px',
            zIndex: 1000,
            width: '100%',
            height: '20px',
            paddingTop: '5px',
            textAlign: 'center',
            background: '#f9f9f9 url("http://b.ak.static-abc.com/images/common/bg/bg_page_gradient_small.png?v=2.70") repeat-x bottom',
            borderTop: '1px solid #aaaaaa',
            cursor: 'n-resize'
        }).hide().appendTo(this.getTarget());
    },
    changeMode: function (mode) {
        switch (mode) {
        case 'css':
            if (this.getTarget().css('background-image') !== 'none') {
                this.enable();
            }
            break;
        case 'content':
            this.disable();
            break;
        }
    },
    enable: function () {
        this._super();
        $('.rm-window-resize-dragger', this._domTarget).show().css({
            opacity: 0
        }).animate({
            opacity: 1
        }, 250).bind('mousedown', $.proxy(this, 'processUserEvent'));
    },
    disable: function () {
        this._super();
        $('.rm-window-resize-dragger', this._domTarget).fadeOut().unbind('mousedown', this.processUserEvent);
    },
    activate: function () {
        this._super();
        $('.rm-window-resize-dragger', this.getTarget()).animate({
            opacity: 0.2
        }, 500);
        $('body').css({
            cursor: 'n-resize'
        }).bind('mousemove mouseup', $.proxy(this, 'handleDrag'));
        dodebug('resize event started');
    },
    deactivate: function () {
        this._super();
        $('.rm-window-resize-dragger', this.getTarget()).animate({
            opacity: 1
        }, 250);
        $('body').css({
            cursor: ''
        }).unbind('mousemove mouseup', this.handleDrag);
        dodebug(this._name + '::handleDrag(): triggering height modification event');
        if (this.hasModified()) {
            this.triggerEvent('heightmodified');
            this._modified = false;
        }
    },
    hasModified: function () {
        return this._modified;
    },
    handleStyleSave: function (styles) {
        for (var i = 0, style; style = styles[i++];) {
            var element = style.element;
            if (!element) {
                dodebug(this._name + '::handleStyleSave, no element found for style, given "' + element + '"');
                continue;
            }
            var $elem = $('.rm-css-edit[rel="' + element + '"]');
            if ($elem[0] === this.getTarget()[0]) {
                if ($elem.css('background-image') !== 'none') {
                    this.enable();
                } else {
                    this.disable();
                }
            }
        }
    },
    processUserEvent: function (event, doSuper) {
        if (doSuper) return this._super(event);
        var $target = $(event.currentTarget);
        if ($target.hasClass('rm-window-resize-dragger')) {
            switch (event.type) {
            case 'mousedown':
                this.activate();
                event.stopPropagation();
                break;
            default:
                break;
            }
        }
        return this.processUserEvent(event, true);
    },
    handleDrag: function (event, doSuper) {
        switch (event.type) {
        case 'mousemove':
            var height = (event.pageY - this.getTarget().offset().top);
            if (height > 20) {
                this.getTarget().height(height).css({
                    height: height + 'px'
                });
                this.triggerEvent('sizechanged');
                this._modified = true;
            }
            event.stopPropagation();
            break;
        case 'mouseup':
            this.deactivate();
            break;
        default:
            break;
        }
        return false;
    }
});
var CSSEditWidget = RMUIWidget.extend({
    _name: "CSSEditWidget",
    _FONT_FAMILIES: {
        'default': 'Futura, "Tw Cen MT", "Tw Cent MT", "Tw Cen", "Tw Cent", "Century Gothic", "Helvetica Neue", Helvetica, Arial, sans-serif',
        'sans-serif-one': '"Helvetica Neue", Helvetica, Arial, sans-serif',
        'sans-serif-two': '"Lucida Grande", Verdana, Geneva, sans-serif',
        'block-sans': 'Impact, Charcoal, sans-serif',
        'monospace': '"Courier New", Monaco, Courier, monospace',
        'serif-one': 'Garamond, Georgia, serif',
        'serif-two': '"Times New Roman", Times, serif',
        'serif-three': '"Palatino Linotype", "Book Antiqua", Palatino, serif'
    },
    _multiEnabled: false,
    _multi_widget: null,
    init: function (options) {
        this._selected = false;
        this._highlighted = false;
        this._banner = false;
        this._multiEnabled = false;
        if (options && options.hasOwnProperty('multi')) {
            this._multiEnabled = options.multi;
        }
        this._dom = {
            panel: $('#rm-appearance-panel'),
            typeSubpanel: $('#rm-appearance-type'),
            backgroundSubpanel: $('#rm-appearance-background'),
            mediaPlayerSubpanel: $('#rm-appearance-mediaplayer'),
            controls: $('#rm-appearance-controls'),
            multiBgPanel: $('#rm-appearance-multi-background')
        };
        $('.rm-css-edit', '#editor-pane').each(function () {
            var constraints = {};
            constraints.minFontSize = 7;
            switch ($(this).attr('rel')) {
            case 'rm-css-page-title':
                constraints.maxFontSize = 100;
                break;
            case 'rm-css-page-location':
            case 'rm-css-fan-count':
            case 'rm-css-info-header':
            case 'rm-css-box-header':
                constraints.maxFontSize = 100;
                break;
            case 'rm-css-library-title':
                constraints.maxFontSize = 100;
                break;
            case 'rm-css-main-nav':
                constraints.maxFontSize = 100;
                break;
            case 'rm-css-ts-header':
            case 'rm-css-ts-even':
            case 'rm-css-ts-odd':
                constraints.maxFontSize = 100;
            case 'rm-css-info-pane':
            default:
                constraints.maxFontSize = 100;
                break;
            }
            $(this).data('css_constraints', constraints);
        });
        this._super($('body'));
        this.addGlobalCallback(RMUIEvent.STYLE_CHANGE, this, this.handleStyleChange);
        this.disable();
    },
    install: function () {
        this._super();
        dodebug('INSTALLING APPEARANCE EDITOR.');
        $('.rm-css-highlight-window').live('click', function (ce) {
            var $target = $(ce.currentTarget);
            if ($target.data('delegate')) {
                $target.data('delegate').trigger({
                    type: ce.type,
                    pageX: ce.pageX,
                    pageY: ce.pageY
                });
                return false;
            }
        });
        $('#banner-placeholder').data('orig_text', $('#banner-placeholder').text());
        if (this._multiEnabled) {
            this._multi_widget = new MultiStyleWidget(this._domTarget);
            this.addCallback(RMUIEvent.STYLE_SELECT, this._multi_widget, this._multi_widget.handleSelectionChange);
            this.addCallback(RMUIEvent.STYLE_SAVE, this._multi_widget, this._multi_widget.handleStyleSave);
        }
        var banner_resize_widget = new ResizableWidget($('.rm-css-edit[rel="rm-css-main-banner"]'));
        banner_resize_widget.addCallback('sizechanged', this, this.refreshHighlightWindows);
        banner_resize_widget.addCallback('heightmodified', this, this.cssEvent, {
            data: {
                action: 'height'
            }
        });
        this.addCallback(RMUIEvent.STYLE_SAVE, banner_resize_widget, banner_resize_widget.handleStyleSave);
        $('.rm-css-edit').each($.proxy(function (indx, elem) {
            var $elem = $(elem);
            if ($elem.hasClass('bg') && $elem.hasClass('bgimg')) {
                dodebug('EDIT background-img:' + $elem.attr('id') + ',  ' + $elem.attr('class'));
                var bg_widget = new BackgroundImageWidget($elem);
                bg_widget.addCallback('update', this, function (position) {
                    var event = {
                        data: {
                            action: 'bgposition',
                            position: position
                        }
                    };
                    this.cssEvent(event);
                });
            }
        }, this));
        $('select', this._dom.typeSubpanel).uniform();
        this.installPanel();
    },
    handleStyleChange: function (data, widget) {
        if (!data.element) {
            dodebug(this._name + '::handleStyleChange, no valid element found!');
            return false;
        }
        var $element = $('.rm-css-edit[rel=' + data.element + ']');
        var on_selection = ($element[0] == this._selected[0]);
        if (on_selection) {
            if (this._selected.data('modified')) {
                this.save();
            }
        }
        var anim_props = ['background-position', 'background-color', 'color', 'font-size'];
        var css = data.css;
        $element.css(css);
        if ($element.hasClass('multi')) {
            var current_seq = parseInt(data.seq);
            if (!isNaN(current_seq)) {
                var old_seq = parseInt($element.data('seq'));
                if (!isNaN(old_seq)) {
                    $element.removeClass('seq-' + old_seq);
                }
                $element.addClass('seq-' + current_seq).data('seq', current_seq);
            } else {
                $element.removeData('seq');
            }
        }
        if (on_selection) {
            this.storeCSS(this._selected);
            this.setCSSPanelFields(this._selected);
            this.refreshCSSPanel();
            var bg_widget = this.getWidget('BackgroundImageWidget', this._selected);
            if (bg_widget) {
                dodebug('LOADING NEW IMAGE DIMENSIONS FOR ELEMENT ' + data.element);
                bg_widget.loadImageDimensions();
            }
        }
    },
    installPanel: function () {
        this._panel = this._dom.panel;
        this._panel.hide().appendTo(this._domTarget);
        this._domTarget.bind('click', {
            cancel: true
        }, $.proxy(this, 'processUserEvent'));
        this._panel.bind('click', {
            cancel: true
        }, $.proxy(this, 'processUserEvent'));
        $('#rm-css-type-bold').bind('click', {
            action: 'bold'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-type-italic').bind('click', {
            action: 'italic'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-type-increasesize').bind('mousedown mouseup', {
            action: 'sizeup'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-type-alignleft').bind('mousedown mouseup', {
            action: 'alignleft'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-type-aligncenter').bind('mousedown mouseup', {
            action: 'aligncenter'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-type-alignright').bind('mousedown mouseup', {
            action: 'alignright'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-type-decreasesize').bind('mousedown mouseup', {
            action: 'sizedown'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-color-foreground').bind('change', {
            action: 'fcolor'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-font-family').bind('change', {
            action: 'family'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-color-background').bind('change', {
            action: 'bcolor'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bg-transparent').bind('click', {
            action: 'bcolor'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgposition-top').bind('click', {
            action: 'bgposition',
            anchor: 'top'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgposition-right').bind('click', {
            action: 'bgposition',
            anchor: 'right'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgposition-bottom').bind('click', {
            action: 'bgposition',
            anchor: 'bottom'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgposition-left').bind('click', {
            action: 'bgposition',
            anchor: 'left'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgposition-free').bind('click', {
            action: 'bgposition'
        }, $.proxy(this, 'cssEvent'));
        $('#bgposition-more-info-link').bind('click', function () {
            if ($('#bgposition-more-info').is(':hidden')) {
                $('#bgposition-more-info').show('slow');
            } else $('#bgposition-more-info').hide('slow');
        });
        $('#rm-css-bgrepeat-x').bind('click', {
            action: 'bgrepeat',
            axis: 'x'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgrepeat-y').bind('click', {
            action: 'bgrepeat',
            axis: 'y'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgimage-uploader').bind('complete', {
            action: 'bgimage'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgimage-remove').bind('click', {
            action: 'bgimage',
            remove: true
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-bgimage-uploader').data('' + this._name, this);
        $('#rm-css-color-playertheme').bind('change', {
            action: 'playertheme'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-playertheme-transparent').bind('click', {
            action: 'playertheme'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-color-playerprimary').bind('change', {
            action: 'playerprimary'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-color-playersecondary').bind('change', {
            action: 'playersecondary'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-color-playertext').bind('change', {
            action: 'playertext'
        }, $.proxy(this, 'cssEvent'));
        $('#rm-css-control-cancel').bind('click', {
            cancel: true
        }, $.proxy(this, 'processUserEvent'));
        $('#rm-css-control-close').bind('click', $.proxy(function (event) {
			parent.document.getElementById('hdnSaveHeader').value = "0";
			document.getElementById('hdnIsSaved').value = "0";
            if (this.getWidget('BackgroundImageWidget', this._selected)) {
                var bgwidget = this.getWidget('BackgroundImageWidget', this._selected);
                bgwidget.deactivate();
            }
            this.saveAndClose();
            return false;
        }, this));
        var css_widget = this;
        $('.rm-color-select', this._panel).ColorPicker({
            onChange: css_widget.handleColorpicker
        }).each(function () {
            var id = $(this).data('colorpickerId');
            dodebug('found color picker div with id ' + id);
            $('#' + id).data('linked_div', $(this));
        });
        $('.colorpicker').css({
            zIndex: parseInt(this._panel.css('zIndex')) + 1
        });
    },
    activate: function () {
        this._super();
    },
    deactivate: function () {
        this._super();
        this._panel.fadeOut();
    },
    enable: function () {
        $('.rm-css-edit').css({
            cursor: 'inherit'
        });
        $('.rm-css-hide').not('.hidden').fadeOut();
        $('.rm-css-noui', '#editor-pane').bind('mouseover click', this.preventButtonCSS);
        $('input, textarea', '#editor-pane').attr('disabled', 'disabled');
        if ($('#banner-placeholder').is(':visible')) {
            $('h3', '#banner-placeholder').stop().css({
                opacity: 1
            }).fadeOut(function () {
                $(this).text('Click to bring up image options');
                $(this).fadeIn();
            });
            if ($('#banner-tip-520px').length == 0) {
                $('#editor-main-banner').before('<span id="banner-tip-520px" style="position: absolute; top:0px; left:1px"><img src="http://c.ak.static-abc.com/images/common/bg/bg_520px.png?v=2.70" alt="The BandPage is 520px wide." /></span>');
            }
            $('#banner-tip-520px').show().animate({
                top: -30
            }, {
                duration: 400
            });
        }
        var _css_widget = this;
        $('.rm-css-edit').each(function () {
            _css_widget.storeCSS($(this));
        });
        this._domTarget.bind('mouseover mouseout', $.proxy(this, 'processUserEvent'));
    },
    disable: function () {
        if (this._active) {
            this.deactivate();
            if (this._selected) {
                this.cancel();
                this.clearSelected();
            }
            if (this._highlighted) {
                this._highlighted.css({
                    zIndex: '',
                    cursor: ''
                }).unbind('click', this.processUserEvent);
                this._highlighted = false;
            }
        }
        if ($('#banner-placeholder').is(':visible') && ($('#banner-placeholder').text() != $('#banner-placeholder').data('orig_text'))) {
            $('h3', '#banner-placeholder').stop().css({
                opacity: 1
            }).fadeOut(function () {
                $(this).text($(this).parent().data('orig_text'));
                $(this).fadeIn();
            });
        }
        if ($('#banner-tip-520px').length > 0) {
            $('#banner-tip-520px').fadeOut(function () {
                $(this).css('top', 0).hide();
            });
        }
        $('.rm-css-edit').css({
            cursor: ''
        });
        $('.rm-css-hide').not('.hidden').fadeIn();
        $('.rm-css-noui', '#editor-pane').unbind('mouseover click', this.preventButtonCSS).each(function () {
            $(this).css({
                backgroundColor: '',
                color: '',
                border: '',
                borderWidth: '1px'
            });
        });
        $('input, textarea', '#editor-pane').removeAttr('disabled');
        $('#submenu-info-media').show();
        this._domTarget.unbind('mouseover mouseout', this.processUserEvent);
    },
    changeMode: function (mode) {
        switch (mode) {
        case 'css':
            this.enable();
            break;
        case 'content':
            this.disable();
            break;
        default:
            break;
        }
    },
    disableBgTransparency: function () {
        $('.rm-color-transparent').hide();
        $('.rm-css-color-selector').unbind('mouseenter mouseleave');
    },
    enableBgTransparency: function () {
        $('.rm-color-transparent').css({
            display: 'block',
            opacity: 0
        });
        $('.rm-css-color-selector').bind('mouseenter', function (event) {
            $(event.currentTarget).children('.rm-color-transparent').stop().animate({
                opacity: 1
            }, 250);
        }).bind('mouseleave', function (event) {
            $(event.currentTarget).children('.rm-color-transparent').stop().animate({
                opacity: 0
            }, 250);
        });
    },
    style: function () {
        var domName;
        for (domName in this._css) {
            if (this._dom[domName]) {
                var prop;
                for (prop in this._css[domName]) {
                    this._dom[domName].css(prop, this._css[domName][prop]);
                }
            }
        }
    },
    clearSelected: function () {
        this.removeSelected();
        this.triggerEvent(RMUIEvent.STYLE_SELECT, false);
    },
    removeSelected: function () {
        if (this._selected) {
            this.disableExtraWidgets();
            this._selected.removeClass("rm-css-selected");
            this._selected.css({
                zIndex: '',
                cursor: ''
            }).unbind('click', this.processUserEvent);
            this._selected = false;
        }
    },
    setNewSelection: function (selection) {
        this._selected = selection;
        this._selected.addClass('rm-css-selected').css({
            zIndex: 1100
        });
        $('.rm-css-selected-window').css({
            zIndex: parseInt(this._selected.css('z-index')) - 1
        });
    },
    setCSSPanelFields: function (source) {
        dodebug(this._name + '::setCSSPanelFields - ', source);
        if (!source || !source.data('css')) {
            dodebug(this._name + '::setCSSPanelFields, no source or no valid CSS data given!');
            return false;
        }
        var css = source.data('css');
        if (this._selected.attr('rel') === 'rm-css-main-banner' && $('#editor-main-banner').css('background-image') === 'none') {
            $('#banner-placeholder').data('active', true);
        }
        $('#rm-css-bgimage-uploader').data('destination', this._selected);
        $('#bgimage-upload').css({
            zIndex: ''
        });
        $('#rm-css-type-bold, #rm-css-type-italic').removeClass('active');
        $('#rm-css-font-family').children(':selected').removeAttr('selected').end().children('option[value=default]').attr('selected', 'selected');
        $('#rm-css-bgimage-remove, #rm-css-bgimage-advanced').hide();
        $('.progress-bar', '#rm-css-bgimage-control').css({
            textAlign: 'center',
            width: '100%'
        }).text('click to upload');
        $('#rm-css-bgimage-remove, #rm-css-bgimage-advanced').hide();
        for (var property in css) {
            switch (property) {
            case 'font-size':
                $('#rm-css-type-size-indicator').text(Math.round(parseInt(css[property])));
                break;
            case 'font-weight':
                if (css[property] === 'bold') {
                    $('#rm-css-type-bold').addClass('active');
                }
                break;
            case 'font-style':
                if (css[property] === 'italic') {
                    $('#rm-css-type-italic').addClass('active');
                }
                break;
            case 'font-family':
                var currentFamily = css[property].replace(/["'\s,]/g, '').toLowerCase();
                var foundMatch = false;
                for (var f in this._FONT_FAMILIES) {
                    if (currentFamily.search(this._FONT_FAMILIES[f].replace(/["'\s,]/g, '').toLowerCase()) == 0) {
                        foundMatch = f;
                        break;
                    }
                }
                if (foundMatch) {
                    $('#rm-css-font-family').children('option[value=' + f + ']').attr('selected', 'selected');
                    $.uniform.update('#rm-css-font-family');
                }
                break;
            case 'color':
                $("#rm-css-color-foreground").css({
                    backgroundColor: css[property]
                }).ColorPickerSetColor(Color.rgbStrToHex(css[property]));
                $("#rm-css-color-playertext").css({
                    backgroundColor: css[property]
                }).ColorPickerSetColor(Color.rgbStrToHex(css[property]));
                break;
            case 'background-color':
                if (css[property].indexOf('rgb(') === 0) {
                    var color = Color.rgbStrToHex(css[property]);
                } else {
                    var color = css[property];
                }
                $("#rm-css-color-background").css({
                    backgroundColor: css[property]
                }).ColorPickerSetColor(color);
                $("#rm-css-color-playertheme").css({
                    backgroundColor: css[property]
                }).ColorPickerSetColor(Color.rgbStrToHex(css[property]));
                break;
            case 'background-position':
                $('#rm-css-background-anchors').children('a').removeClass('active');
                $('#rm-css-bgposition-free').removeClass('active');
                var bg_pos = css[property].split(' ');
                var is_free = (bg_pos.length > 1 && (bg_pos[0].indexOf('%') < 0 && bg_pos[0].indexOf('%') < 0));
                if (!is_free) {
                    if (bg_pos.length < 2) {
                        bg_pos[1] = bg_pos[0];
                    }
                    switch (bg_pos[0]) {
                    case '0%':
                        $('#rm-css-bgposition-left').addClass('active');
                        break;
                    case '50%':
                        break;
                    case '100%':
                        $('#rm-css-bgposition-right').addClass('active');
                        break;
                    default:
                        is_free = true;
                        break;
                    }
                    switch (bg_pos[1]) {
                    case '0%':
                        $('#rm-css-bgposition-top').addClass('active');
                        break;
                    case '50%':
                        break;
                    case '100%':
                        $('#rm-css-bgposition-bottom').addClass('active');
                        break;
                    default:

                        is_free = true;
                        break;
                    }
                } else {
                    $('#rm-css-background-anchors').children('a').removeClass('active');
                    $('#rm-css-bgposition-free').addClass('active');
                }
                break;
            case 'background-repeat':
                $('#rm-css-bgrepeat').children('a').removeClass('active');
                var bgRepeat = css[property].split(' ');
                if (bgRepeat.length > 1) {
                    if (bgRepeat[0] === 'repeat') {
                        $('#rm-css-bgrepeat-x').addClass('active');
                    }
                    if (bgRepeat[1] === 'repeat') {
                        $('#rm-css-bgrepeat-y').addClass('active');
                    }
                } else {
                    switch (css[property]) {
                    case 'repeat-x':
                        $('#rm-css-bgrepeat-x').addClass('active');
                        break;
                    case 'repeat-y':
                        $('#rm-css-bgrepeat-y').addClass('active');
                        break;
                    case 'repeat':
                        $('#rm-css-bgrepeat-x, #rm-css-bgrepeat-y').addClass('active');
                        break;
                    default:
                        $('#rm-css-bgrepeat-x, #rm-css-bgrepeat-y').removeClass('active');
                        break;
                    }
                }
                break;
            case 'background-image':
                $('.progress-bar', '#rm-css-bgimage-control').removeClass('hover').removeClass('uploading');
                dodebug('CSSEditWidget::setCSSPanelFields - Setting background-image ', css);
                if (css[property] !== 'none' && !css[property].match(/\?v=\d/)) {
                    dodebug(css[property]);
                    $('.progress-bar', '#rm-css-bgimage-control').css({
                        textAlign: 'center',
                        width: '100%'
                    }).text('Add Custom Image');
                    $('#rm-css-bgimage-remove, #rm-css-bgimage-advanced, #rm-css-background-color').show();
                }
                break;
            }
        }
        if (this._selected.data('rmplayer-primary-ui')) {
            $("#rm-css-color-playerprimary").css({
                backgroundColor: this._selected.data('rmplayer-primary-ui')
            }).ColorPickerSetColor(Color.rgbStrToHex(this._selected.data('rmplayer-primary-ui')));
        }
        if (this._selected.data('rmplayer-secondary-ui')) {
            $("#rm-css-color-playersecondary").css({
                backgroundColor: this._selected.data('rmplayer-secondary-ui')
            }).ColorPickerSetColor(Color.rgbStrToHex(this._selected.data('rmplayer-secondary-ui')));
        }
    },
    refreshCSSPanel: function () {
        dodebug(this._name + '::refreshCSSPanel - id:' + $(this._selected).attr('id') + ' classes:' + $(this._selected).attr('class'));
        this.setCSSPanelFields(this._selected);
        this._dom.typeSubpanel.hide();
        this._dom.backgroundSubpanel.hide();
        this._dom.mediaPlayerSubpanel.hide();
        $('#rm-css-bgimage-advanced').hide();
        if (this._selected.hasClass('fg')) this._dom.typeSubpanel.show();
        if (this._selected.hasClass('bg')) {
            this._dom.backgroundSubpanel.show();
            if ($('#rm-css-background-color').is(':hidden')) {
                $('#rm-css-background-color').show();
            }
            if (this._selected.hasClass('bgtrans') || true) {
                this.enableBgTransparency();
            } else {
                this.disableBgTransparency();
            }
        }
        if (this._selected.hasClass('mp')) {
            this._dom.mediaPlayerSubpanel.show();
            this.disableBgTransparency();
        }
        if (this._selected.hasClass('bgimg')) {
            var bg_widget = this.getWidget('BackgroundImageWidget', this._selected);
            bg_widget.enable();
            bg_widget.activate(); /*helpmetahir*/
            ;
            if (bg_widget) {
                bg_widget.loadImageDimensions();
                bg_widget.enable();
            }
            dodebug(this._name + '::refreshCSSPanel : handle extra widgets backgroundImage = ' + this._selected.css('backgroundImage'));
            if (this._selected.attr('rel') == 'rm-css-main-banner' || !$('#banner-placeholder' || true).data('active')) {
                if (this._selected.attr('id') == 'editor-main-banner') {
                    $('#rm-multi-banner-switch').hide();
                }
            }
            $('.bgimg', this._dom.backgroundSubpanel).show();
            if (this._selected.css('backgroundImage') != 'none' && !this._selected.css('backgroundImage').match(/\?v=\d/)) {
                $('#rm-css-bgimage-advanced', this._dom.backgroundSubpanel).show();
            }
        } else {
            $('.bgimg', this._dom.backgroundSubpanel).hide();
            $('#rm-css-bgimage-advanced', this._dom.backgroundSubpanel).hide();
        }
        if (this._selected.attr('rel') == 'rm-css-main-banner' && $('#banner-placeholder').data('active')) {
            $('#rm-css-background-color').hide();
        }
        if (this._selected.hasClass('fgtype')) {
            $('.fgtype', this._dom.typeSubpanel).show();
        } else {
            $('.fgtype', this._dom.typeSubpanel).hide();
        }
        $('#rm-css-control-cancel').hide();
    },
    retarget: function () {
        this.removeSelected();
        this.setNewSelection(this._highlighted);
        this.refreshCSSPanel();
        this.triggerEvent(RMUIEvent.STYLE_SELECT, this._selected);
    },
    shiftLocation: function (coords, animIn) {
        var animParams = {};
        if (animIn) {
            this._panel.css({
                display: "block",
                opacity: 0,
                left: coords.x - 32 + 'px',
                top: coords.y + 'px',
                height: 'auto'
            });
            animParams.opacity = 1;
            animParams.height = this._panel.height() + 'px';
            this._panel.height(0);
        }
        animParams.left = coords.x - 32 + 'px';
        animParams.top = coords.y + 15 + 'px';
        this._panel.animate(animParams, 250);
    },
    save: function () {
        this.storeCSS(this._selected);
        this.writeCSS(this._selected);
        this.removeInlineStyles(this._selected);
        this.disableExtraWidgets();
        var elemName = this._selected.attr('rel');
        var css = {};
        css[elemName] = this._selected.data('css');
        if (this._selected.data('original_size')) {
            css[elemName]['background-image'] = 'url(' + this._selected.data('original_size') + ')';
        }
        if (this._selected.data('rmplayer-primary-ui') && this._selected.data('rmplayer-primary-modified')) {
            var primaryUIValue = this._selected.data('rmplayer-primary-ui');
            css['rm-css-playerprimary'] = {
                'background-color': primaryUIValue
            };
        }
        if (this._selected.data('rmplayer-secondary-ui') && this._selected.data('rmplayer-secondary-modified')) {
            var secondaryUIValue = this._selected.data('rmplayer-secondary-ui');
            css['rm-css-playersecondary'] = {
                'background-color': secondaryUIValue
            };
        }
        var savedata = {
            css: css,
            seq: 0
        };
        if (this._selected.hasClass('multi')) {
            var current_seq = parseInt(this._selected.data('seq'));
            if (isNaN(current_seq)) {
                current_seq = 0;
            }
            $.extend(savedata, {
                seq: current_seq
            });
        }
        dodebug(this._name + '::save, saving styles for elem: ' + this._selected.attr('rel'));
        Saver.save('rm-appearance-style', savedata, {
            success: $.proxy(function (response) {
                if (!response || !response.hasOwnProperty('styles')) {
                    dodebug('Style save callback error: invalid response from backend given');
                    return false;
                }
                if (response.styles.length < 1) {
                    dodebug('Style save callback error: no styles given on return object');
                    return false;
                }
                this.triggerEvent(RMUIEvent.STYLE_SAVE, response.styles);
            }, this)
        });
        this._selected.data('rmplayer-primary-modified', false);
        this._selected.data('rmplayer-secondary-modified', false);
        this._selected.data('modified', false);
    },
    cancel: function () {
        var banner = $('#editor-main-banner');
        banner.data('before', $('#editor-main-banner').css('background-image'));
        if (this._selected.attr('rel') == 'rm-css-info-pane') {
            this.removeInlineStyles($('.active', '#edit-main-info .editor-submenu'));
        }
        this.removeInlineStyles(this._selected);
        if (this._selected.attr('rel') == 'rm-css-rmplayer') {
            var _widget = this;
            this._selected.find('[rel=rm-css-playerprimary],[rel=rm-css-playersecondary]').each(function () {
                $(this).attr('style', '');
                _widget._selected.find('polygon, rect').attr('fill', '#' + _widget._selected.data('rmplayer-icon-fill'));
            });
        }
        banner.data('after', $('#editor-main-banner').css('background-image'));
        this.disableExtraWidgets();
        $('.rm-css-selected-window').fadeOut('fast', function () {
            $(this).remove();
        });
        if ($('#rm-css-control-cancel').is(':visible')) {
            $('#rm-css-control-cancel').hide();
        }
        if (banner.data('before') == 'none' && banner.data('after') != 'none') {
            $('#banner-placeholder').data('active', false).fadeOut();
        } else if (banner.data('before') != 'none' && banner.data('after') == 'none') {
            $('#banner-placeholder').data('active', true).fadeIn();
        }
    },
    close: function () {
        this.clearSelected();
        $('.rm-css-selected-window').data('delegate', false).fadeOut(function () {
            $(this).remove();
        });
        this.deactivate();
    },
    saveAndClose: function () {
        if (this._selected) {
            this.save();
        }
        this.close();
    },
    storeCSS: function (target) {
        dodebug('storeCSS:', target);
        var css = {};
        if (target.hasClass('fg')) {
            css.color = target.css("color");
            if (target.hasClass('fgtype')) {
                css['font-family'] = target.css("fontFamily");
                css['font-size'] = target.css("fontSize");
                css['font-style'] = target.css("fontStyle");
                css['font-weight'] = target.css("fontWeight");
                css['letter-spacing'] = target.css("letterSpacing");
                css['text-transform'] = target.css("textTransform");
            }
        }
        if (target.hasClass('bg')) {
            css['background-color'] = target.css("backgroundColor");
            if (target.hasClass('bgimg')) {
                css['background-image'] = target.css('backgroundImage');
                css['background-repeat'] = target.css('backgroundRepeat');
                css['background-position'] = target.css('backgroundPosition');
            }
        }
        if (target.hasClass('border')) {
            css['outline-color'] = target.css("outlineColor");
            css['outline-style'] = target.css("outlineStyle");
            css['outline-width'] = target.css("outlineWidth");
        }
        if (target.hasClass('resizable')) {}
        switch (target.attr('rel')) {
        case 'rm-css-rmplayer':
            css['background-color'] = target.css('backgroundColor');
            css['color'] = target.css('color');
            var rmplayerPrimary = $('[rel="rm-css-playerprimary"]', target);
            if (rmplayerPrimary.length) {
                target.data('rmplayer-primary-ui', rmplayerPrimary.css('background-color'));
            }
            var rmplayerSecondary = $('[rel="rm-css-playersecondary"]', target);
            if (rmplayerSecondary.length) {
                target.data('rmplayer-secondary-ui', rmplayerSecondary.css('background-color'));
            }
            break;
        default:
            break;
        }
        dodebug('target.data.rmplayer-primaryui = ' + target.data('rmplayer-primary-ui'));
        dodebug('target.data.rmplayer-secondaryui = ' + target.data('rmplayer-secondary-ui'));
        target.each(function () {
            $(this).data('css', css);
        });
    },
    restoreCSS: function (target) {
        dodebug(this._name + "::restoreCSS");
        var css;
        if (css = target.data("css")) {
            var prop;
            for (prop in css) {
                target.css(prop, css[prop]);
            }
        }
    },
    writeCSS: function (target) {
        var element = target.attr('rel');
        var id = element;
        var styleText = '#editor-pane-container .rm-css-edit[rel=' + element + ']';
        if (target.hasClass('multi')) {
            var seq = parseInt(target.data('seq'));
            if (isNaN(seq)) {
                seq = 0;
            }
            id += '-seq' + seq;
            styleText += '.seq-' + seq;
        }
        styleText += ' {';
        var css = target.data('css');
        if (css) {
            for (var attr in css) {
                styleText += attr.camelToHyphen() + ":" + css[attr] + "; ";
            }
        }
        styleText += "}";
        var styleBlock = $('style#' + id);
        if (styleBlock.length > 0) {
            styleBlock.remove();
        }
        styleBlock = $('<style>' + styleText + '</style>');
        styleBlock.attr('type', 'text/css').attr('id', id);
        styleBlock.appendTo($("head"));
        if (id == 'rm-css-info-pane') {
            styleText = "#editor-pane-container .rm-css-edit[rel='rm-css-main-nav'].active { ";
            if (css) {
                styleText += "background-color: " + css.backgroundColor + ";";
                styleText += "color: " + css.color + ";";
            }
            styleText += " }";
            styleBlock = $('#rm-css-main-nav-active');
            if (styleBlock.length > 0) {
                styleBlock.remove();
            }
            styleBlock = $('<style>' + styleText + '</style>');
            styleBlock.attr('type', 'text/css').attr('id', 'rm-css-main-nav-active');
            styleBlock.appendTo($('head'));
        } else if (id == 'rm-css-rmplayer') {
            dodebug('writing extra styles for rmplayer...');
            styleText = '';
            if (target.data('rmplayer-primary-ui')) {
                dodebug('writing primary styles...');
                styleText += '#editor-pane-container #rmplayer [rel="rm-css-playerprimary"] { background-color: ' + target.data('rmplayer-primary-ui') + '; }';
            }
            if (target.data('rmplayer-secondary-ui')) {
                dodebug('writing secondary styles...');
                styleText += '#editor-pane-container #rmplayer [rel="rm-css-playersecondary"] { background-color: ' + target.data('rmplayer-secondary-ui') + '; }';
            }
            styleBlock.append(styleText);
        }
    },
    removeInlineStyles: function (target) {
/*$(target).each(function(){var $this=$(this);var css=$this.data('css');if(css){var styles=$this.attr('style').split(';');$this.removeAttr('style');var styleStr="";var styleArr=[];var inlineStyles={};for(var i=0,style;style=styles[i++];){styleStr=style.trim();styleArr=styleStr.split(':');if(styleArr.length==2){inlineStyles[styleArr[0]]=styleArr[1].trim();}}
var newStyleStr='';for(var inlineStyle in inlineStyles){if(!css[inlineStyle]){newStyleStr+=inlineStyle.camelToHyphen()+":"+inlineStyles[inlineStyle]+";";}}
$(this).attr('style',newStyleStr);}});*/
    },
    preventButtonCSS: function (me) {
        if ($(me.currentTarget).parents('div').attr('id') == 'nav-tabs') {
            return false;
        }
        $(me.currentTarget).css({
            'background-color': $(me.currentTarget).css('background-color'),
            'color': $(me.currentTarget).css('color'),
            'border': 'none'
        });
    },
    refreshHighlightWindows: function () {
        $('.rm-css-highlight-window, .rm-css-selected-window').each(function () {
            var $delegate = $(this).data('delegate');
            if ($delegate) {
                $(this).css({
                    left: $delegate.position().left + (parseInt($delegate.css('margin-left')) - 5) + 'px',
                    top: $delegate.position().top + (parseInt($delegate.css('margin-top')) - 5) + 'px',
                    width: $delegate.outerWidth() + 'px',
                    height: $delegate.outerHeight() + 'px'
                });
            }
        });
    },
    disableExtraWidgets: function () {
        if (this._selected) {
            var bgwidget = this.getWidget('BackgroundImageWidget', this._selected);
            if (bgwidget) {
                var bg_css = this._selected.css('backgroundPosition');
                if (bg_css) {
                    var bg_pos = bg_css.split(' ');
                    bgwidget.setPosition(bg_pos[0], bg_pos[1]);
                }
                if (bgwidget._active) bgwidsizeupget.deactivate();
            }
        }
    },
    handleColorpicker: function (hsb, hex, rgb) {
        var colorpicker = $(this).closest('.colorpicker');
        colorpicker.data('linked_div').css({
            backgroundColor: '#' + hex
        }).trigger({
            type: 'change',
            color: '#' + hex
        });
    },
    cssEvent: function (event) {
        var $this = this;
        if (event.data === undefined) {
            dodebug(this._name + '::cssEvent, no action found on event!');
            return false;
        }
        switch (event.data.action) {
        case 'bold':
            this._selected.css({
                fontWeight: function (indx, val) {
                    return (val == "bold") ? "normal" : "bold";
                }
            });
            $("#rm-css-type-bold").toggleClass('active');
            break;
        case 'italic':
            this._selected.css({
                fontStyle: function (indx, val) {
                    return (val == "italic") ? "normal" : "italic";
                }
            });
            $("#rm-css-type-italic").toggleClass('active');
            break;
        case 'alignleft':
            this._selected.parent().css('text-align', 'left');
            break;
        case 'aligncenter':
            this._selected.parent().css('text-align', 'center');
            break;
        case 'alignright':
            this._selected.parent().css('text-align', 'right');
            break;
        case 'sizeup':
            switch (event.type) {
            case 'mousedown':
                $(event.currentTarget).data('is_holding', true);
                break;
            case 'mouseup':
                $(event.currentTarget).data('is_holding', false);
                return true;
                break;
            default:
                break;
            }
            if ($(event.currentTarget).data('is_holding')) {
                var maxSize = 50;
                if (this._selected.data('css_constraints')) {
                    maxSize = 100 /*parseInt(this._selected.data('css_constraints').maxFontSize)*/
                    ;
                }
                this._selected.css({
                    fontSize: function (indx, val) {
                        return Math.min(parseInt(val) + 1, maxSize);
                    }
                });
                $("#rm-css-type-size-indicator").text(parseInt(this._selected.css('fontSize')));
                var timeout = (event.type == 'hold') ? 100 : 500;
                event.type = 'hold';
                setTimeout(function () {
                    this.cssEvent(event);
                }, timeout);
            }
            break;
        case 'sizedown':
            switch (event.type) {
            case 'mousedown':
                $(event.currentTarget).data('is_holding', true);
                break;
            case 'mouseup':
                $(event.currentTarget).data('is_holding', false);
                return true;
                break;
            default:
                break;
            }
            if ($(event.currentTarget).data('is_holding')) {
                var minSize = 7;
                if (this._selected.data('css_constraints')) {
                    minSize = parseInt(this._selected.data('css_constraints').minFontSize);
                }
                this._selected.css({
                    fontSize: function (indx, val) {
                        return Math.max(parseInt(val) - 1, minSize);
                    }
                });
                $("#rm-css-type-size-indicator").text(parseInt(this._selected.css('fontSize')));
                var timeout = (event.type == 'hold') ? 100 : 500;
                event.type = 'hold';
                setTimeout(function () {
                    this.cssEvent(event);
                }, timeout);
            }
            break;
        case 'fcolor':
            switch (this._selected.attr('rel')) {
            case 'rm-css-info-pane':
                $(".rm-css-edit[rel='rm-css-main-nav']").data('active-css-fg', this._selected.css('color')).filter('.active').css({
                    color: this._selected.css('color')
                });
                break;
            case 'rm-css-rmplayer':
                if (this._selected.attr('id') == 'scplayer') {
                    $('[rel="rm-css-playersecondary"], .rmplayer-secondary-ui', '#rmplayer').css({
                        backgroundColor: event.color
                    });
                    $('#rmplayer').data('rmplayer-secondary-ui', event.color).data('rmplayer-secondary-modified', true);
                }
                break;
            default:
                break;
            }
            this._selected.css({
                color: event.color
            });
            break;
        case 'bcolor':
            if (this._selected.attr('rel') == 'rm-css-main-banner' && $('#banner-placeholder').data('active')) {
                return false;
            }
            if (event.color) {
                this._selected.css({
                    backgroundColor: event.color
                });
            } else {
                this._selected.css({
                    backgroundColor: 'transparent'
                });
            }
            switch (this._selected.attr('rel')) {
            case 'rm-css-info-pane':
                $(".rm-css-edit[rel='rm-css-main-nav']").data('active-css-bg', this._selected.css('backgroundColor')).filter('.active').css({
                    backgroundColor: this._selected.css('backgroundColor')
                });
                break;
            case 'rm-css-rmplayer':
                if (this._selected.attr('id') == 'scplayer') {
                    var offsetColor = Color.offsetColor(event.color, .2);
                    $('[rel="rm-css-playerprimary"], .rmplayer-primary-ui', '#rmplayer').css({
                        backgroundColor: offsetColor
                    });
                    this._selected.data('rmplayer-primary-ui', offsetColor).data('rmplayer-primary-modified', true);
                }
                break;
            default:
                break;
            }
            break;
        case 'family':
            var selectedFamily = $(event.currentTarget).children(':selected').val();
            this._selected.data("fontFamily", selectedFamily).css({
                fontFamily: this._FONT_FAMILIES[selectedFamily]
            });
            break;
        case 'bgimage':
            if (event.data.remove && confirm('Are you sure you want to remove the background image?')) {
                this._selected.css({
                    backgroundImage: 'none',
                    backgroundColor: 'transparent'
                }).removeData('original_size');
                this.disableExtraWidgets();
                $('#rm-css-bgimage-advanced, #rm-css-bgimage-remove').fadeOut();
                $('.progress-bar', '#rm-css-bgimage-control').removeClass('uploading').text('click to upload');
                if (this._selected.attr('rel') == 'rm-css-main-banner' && !$('#banner-placeholder').data('active')) {
                    $('#banner-placeholder').data('active', true).fadeIn();
                    if ($('#rm-css-background-color').is(':visible')) {
                        $('#rm-css-background-color').fadeOut();
                    }
                }
            } else if (event.response && event.queueID) {
                dodebug('image just finish uploading');
                var queueEl = $('.uploadify-queue-' + event.queueID);
                var url = '';
                var original_size = '';
                switch (typeof (event.response)) {
                case 'string':
                    url = event.response;
					break;
                case 'object':
					
                    if (event.response.hasOwnProperty('thumb') && this._selected.hasClass('thumb')) {
                        //dodebug('in');	
                        url = event.response.thumb;
                        original_size = event.response.original;
                    } else if (event.response.hasOwnProperty('sqthumb') && this._selected.hasClass('sqthumb')) {
                        url = event.response.sqthumb;
                        original_size = event.response.original;
                    } else if (event.response.hasOwnProperty('tinythumb') && this._selected.hasClass('tinythumb')) {
                        url = event.response.tinythumb;
                        original_size = event.response.original;
                    } else if (event.response.hasOwnProperty('bigthumb') && this._selected.hasClass('bigthumb')) {
                        url = event.response.bigthumb;
                        original_size = event.response.original;
                    } else {
                        if (event.response.hasOwnProperty('full')) {
                            url = event.response.full;
                        }
                        if (event.response.hasOwnProperty('original')) {
                            url = url || event.response.original;
                            original_size = event.response.original;
                        }
                    }
                    break;
                }
                var loader = new Image();
                $(loader).load($.proxy(function (e) {
                    if (queueEl.attr('rel') == 'rm-css-main-banner') {
                        if ($('#banner-placeholder').data('active') || $('#banner-placeholder').is(':visible')) {
                            $('#banner-placeholder').data('active', false).fadeOut();
                            if ($('#rm-css-background-color').is(':hidden')) $('#rm-css-background-color').fadeIn();
                        }
                        var maxHeight = ($('#editor-main-banner').css('max-height')) ? parseInt($('#editor-main-banner').css('max-height')) : 500;
                        var newHeight = Math.min(loader.height, maxHeight);
                        this.cssEvent({
                            data: {
                                action: 'height',
                                height: newHeight,
                                element: queueEl
                            }
                        });
                    }
                    queueEl.css({
                        backgroundImage: 'url("' + url + '")',
                        backgroundPosition: '0px 0px',
                        backgroundRepeat: 'no-repeat'
                    }).data('original_size', original_size);
                    if (this._selected.index(queueEl.get(0)) >= 0) {
                        $('.progress-bar', '#rm-css-bgimage-control').removeClass('uploading').text('Add Custom Image');
                        this.setCSSPanelFields(this._selected);
                        $('#rm-css-bgimage-advanced, #rm-css-bgimage-remove').fadeIn();
                        $('#rm-css-bgrepeat-x, #rm-css-bgrepeat-y').removeClass('active');
                        var bgwidget = this.getWidget('BackgroundImageWidget', this._selected);
                        if (bgwidget) {
                            bgwidget.activate();
                        }
                    }
                    if (this._multi_widget.isActive()) {
                        dodebug('MULTI STYLE WIDGET ACTIVE, SAVING STYLES...');
                        this.save();
                    }
                }, this)).attr('src', url);
            }
            break;
        case 'bgposition':
            var current_pos = this._selected.css('backgroundPosition');
            current_pos = current_pos.split(' ');
            var bgwidget = this.getWidget('BackgroundImageWidget', this._selected);
            if (event.data.anchor) {
                if (bgwidget && bgwidget._active) {
                    if (!/multi/.test(bgwidget._name.toLowerCase())) {
                        bgwidget.deactivate();
                    }
                }
                var new_pos = [current_pos[0], current_pos[1]];
                if (current_pos[0].indexOf('px') > -1) {
                    new_pos[0] = '50%';
                }
                if (current_pos[1].indexOf('px') > -1) {
                    new_pos[1] = '50%';
                }
                $('#rm-css-bgposition-free').removeClass('active');
                switch (event.data.anchor) {
                case 'top':
                    if (current_pos[1] !== '0%') {
                        new_pos[1] = '0%';
                        $('#rm-css-bgposition-top').addClass('active');
                        if (current_pos[1] === '100%') $('#rm-css-bgposition-bottom').removeClass('active');
                    } else {
                        new_pos[1] = '50%';
                        $('#rm-css-bgposition-top').removeClass('active');
                    }
                    break;
                case 'right':
                    if (current_pos[0] !== '100%') {
                        new_pos[0] = '100%';
                        $('#rm-css-bgposition-right').addClass('active');
                        if (current_pos[0] === '0%') $('#rm-css-bgposition-left').removeClass('active');
                    } else {
                        new_pos[0] = '50%';
                        $('#rm-css-bgposition-right').removeClass('active');
                    }
                    break;
                case 'bottom':
                    if (current_pos[1] !== '100%') {
                        new_pos[1] = '100%';
                        $('#rm-css-bgposition-bottom').addClass('active');
                        if (current_pos[1] === '0%') $('#rm-css-bgposition-top').removeClass('active');
                    } else {
                        new_pos[1] = '50%';
                        $('#rm-css-bgposition-bottom').removeClass('active');
                    }
                    break;
                case 'left':
                    if (current_pos[0] !== '0%') {
                        new_pos[0] = '0%';
                        $('#rm-css-bgposition-left').addClass('active');
                        if (current_pos[0] === '100%') $('#rm-css-bgposition-right').removeClass('active');
                    } else {
                        new_pos[0] = '50%';
                        $('#rm-css-bgposition-left').removeClass('active');
                    }
                    break;
                default:
                    break;
                }
                this._selected.css({
                    backgroundPosition: new_pos[0] + ' ' + new_pos[1]
                });
                bgwidget.setPosition(new_pos[0], new_pos[1]);
            } else if (event.data.position) {
                dodebug('got update from bg widget! ' + event.data.position);
            } else {
                if (bgwidget && !bgwidget._active) {
                    $('#rm-css-background-anchors').children('a').removeClass('active');
                    $('#rm-css-bgposition-free').addClass('active');
                    bgwidget.activate();
                } else if (bgwidget) {
                    if (!/multi/.test(bgwidget._name.toLowerCase())) {
                        bgwidget.deactivate();
                    }
                }
            }
            break;
        case 'bgrepeat':
            var old_repeat = this._selected.css('backgroundRepeat');
            var new_repeat = 'no-repeat';
            switch (event.data.axis) {
            case 'x':
                switch (old_repeat) {
                case 'repeat-x':
                    new_repeat = 'no-repeat';
                    break;
                case 'repeat-y':
                    new_repeat = 'repeat';
                    break;
                case 'repeat':
                    new_repeat = 'repeat-y';
                    break;
                case 'no-repeat':
                    new_repeat = 'repeat-x';
                    break;
                default:
                    break;
                }
                $('#rm-css-bgrepeat-x').toggleClass('active');
                break;
            case 'y':
                switch (old_repeat) {
                case 'repeat-x':
                    new_repeat = 'repeat';
                    break;
                case 'repeat-y':
                    new_repeat = 'no-repeat';
                    break;
                case 'repeat':
                    new_repeat = 'repeat-x';
                    break;
                case 'no-repeat':
                    new_repeat = 'repeat-y';
                    break;
                default:
                    break;
                }
                $('#rm-css-bgrepeat-y').toggleClass('active');
                break;
            }
            this._selected.css({
                backgroundRepeat: new_repeat
            });
            break;
        case 'bordercolor':
            if (event.color) {
                this._selected.css({
                    outlineColor: event.color
                });
            } else {
                this._selected.css({
                    outlineColor: 'transparent'
                });
            }
            break;
        case 'borderstyle':
            var selectedStyle = $(event.currentTarget).children(':selected').val();
            switch (selectedStyle) {
            case 'solid':
            case 'dashed':
            case 'dotted':
                this._selected.css({
                    outlineStyle: selectedStyle,
                    outlineWidth: '1px'
                });
                break;
            default:
                this._selected.css({
                    outlineStyle: 'none',
                    outlineWidth: ''
                });
                break;
            }
            break;
        case 'height':
            var activeElement;
            var newHeight;
            if (event.data.height) {
                newHeight = event.data.height;
                if (event.data.element) {
                    activeElement = event.data.element;
                } else {
                    activeElement = event.data.widget._selected;
                }
                activeElement.height(newHeight).css({
                    height: newHeight + 'px'
                });
            } else {
                activeElement = $('#editor-main-banner');
                newHeight = activeElement.height();
            }
            if (activeElement.attr('id') == 'editor-main-banner') {
                dodebug(this._name + '::cssEvent(height): sending banner height to Page through Saver(bannerHeight:' + newHeight + ')');
                Saver.save('banner-height', newHeight, {
                    elem: activeElement
                });
            } else {
                dodebug(this._name + '::cssEvent(height): NOT sending banner height to Page through Saver(bannerHeight:' + newHeight + ')');
            }
            break;
        case 'playertheme':
            if (event.color) {
                this._selected.css({
                    backgroundColor: event.color
                });
            } else {
                this._selected.css({
                    backgroundColor: 'transparent'
                });
            }
            break;
        case 'playerprimary':
            if (event.color) {
                $('[rel="rm-css-playerprimary"], .rmplayer-primary-ui', this._selected).css({
                    backgroundColor: event.color
                });
                this._selected.data('rmplayer-primary-ui', event.color).data('rmplayer-primary-modified', true);
            }
            break;
        case 'playersecondary':
            if (event.color) {
                var _widget = this;
                $('[rel="rm-css-playersecondary"], .rmplayer-secondary-ui', this._selected).each(function (index) {
                    if ($(this).hasClass('rmplayer-icon')) {
                        _widget._selected.data('rmplayer-icon-fill', $(this).find('polygon, rect').attr('fill'));
                        $(this).find('polygon, rect').attr('fill', event.color);
                    } else {
                        $(this).css({
                            backgroundColor: event.color
                        });
                    }
                });
                this._selected.data('rmplayer-secondary-ui', event.color).data('rmplayer-secondary-modified', true);
            }
            break;
        case 'playertext':
            if (event.color) {
                this._selected.css({
                    color: event.color
                }).data('rmplayer-text-ui', event.color);
            }
            break;
        default:
            break;
        }
        this._selected.data('modified', true);
        if ($('#rm-css-control-cancel').is(':hidden')) {
            $('#rm-css-control-cancel').fadeIn();
        }
        this.refreshHighlightWindows();
        return false;
    },
    processUserEvent: function (event) {
        if (event.data === undefined) {
            event.data = {};
        }
        switch (event.type) {
        case 'mouseover':
            if (event.currentTarget != this._panel.get(0)) {
                var targetedElemRel = $(event.target).closest(".rm-css-edit").attr('rel') || 'no-rel';
                var fromHighlightWindow = false;
                if ($(event.target).hasClass('rm-css-highlight-window')) {
                    if ($(event.target).data('delegate')) {
                        targetedElemRel = $(event.target).data('delegate').attr('rel') || 'no-rel';
                        fromHighlightWindow = true;
                    } else targetedElemRel = 'no-rel';
                }
                var targetedElems = $('.rm-css-edit[rel="' + targetedElemRel + '"]').not(':hidden');
                if (targetedElems.length) {
                    if (this._highlighted && targetedElems.index(this._highlighted.get(0)) < 0) {
                        $('.rm-css-highlight-window').unbind('click').data('delegate', false).hide().remove();
                        if (!this._selected || this._selected.index(this._highlighted.get(0)) < 0) {
                            this._highlighted.css({
                                zIndex: '',
                                cursor: ''
                            }).unbind('click', this.processUserEvent);
                        }
                    }
                    if (!this._highlighted || targetedElems.index(this._highlighted.get(0)) < 0) {
                        if (!this._selected || targetedElems.index(this._selected.get(0)) < 0) {
                            var targetHighlight = false;
                            targetedElems.css({
                                zIndex: 1200,
                                cursor: 'pointer'
                            }).bind('click', $.proxy(this, 'processUserEvent')).each(function () {
                                if ($(this).css('position') == 'static') {
                                    $(this).data('static', true).css({
                                        position: 'relative'
                                    });
                                }
                                if ($(this).parent().css('position') == 'static') {
                                    $(this).parent().data('static', true).css({
                                        position: 'relative'
                                    });
                                }
                                var pos = {
                                    top: $(this).position().top + parseInt($(this).css('margin-top')) - 5,
                                    left: $(this).position().left + parseInt($(this).css('margin-left')) - 5
                                };
                                var css = {
                                    position: 'absolute',
                                    border: '1px dotted #000000',
                                    outline: '1px dotted #ffffff',
                                    padding: '5px',
                                    cursor: 'pointer',
                                    top: pos.top + 'px',
                                    left: pos.left + 'px',
                                    width: $(this).outerWidth() + 'px',
                                    height: $(this).outerHeight() + 'px',
                                    zIndex: parseInt($(this).css('zIndex')) - 100
                                };
                                if ($(this).css('text-align') == 'right') {
                                    if ($(this).css('right') != 'auto') {
                                        css.right = parseInt($(this).css('right')) - 5 + 'px';
                                        delete css.left;
                                    }
                                }
                                targetHighlight = $('<div></div>').css(css).addClass('rm-css-highlight-window').data('delegate', $(this)).hide();
                                targetHighlight.appendTo($(this).parent()).fadeIn();
                            });
                            if (fromHighlightWindow) {
                                $('.rm-css-highlight-window').bind('click', function (event) {
                                    $(event.currentTarget).data('delegate').trigger(event);
                                });
                            }
                        }
                        this._highlighted = targetedElems;
                    }
                } else if (!targetedElems.length && ($(event.target).closest("#rm-appearance-panel").length < 1) && !$(event.target).hasClass('rm-css-highlight-window')) {
                    $('.rm-css-highlight-window').data('delegate', false).fadeOut(function () {
                        $(this).remove();
                    });
                    if (this._highlighted && (!this._selected || this._highlighted.index(this._selected.get(0)) < 0)) {
                        this._highlighted.css({
                            zIndex: '',
                            cursor: ''
                        }).unbind('click', this.processUserEvent);
                    }
                    this._highlighted = false;
                }
                event.stopPropagation();
            }
            break;
        case 'click':
            if (event.data.cancel && this._active && !$(event.target).hasClass('rm-css-highlight-window')) {
                if ((event.currentTarget == this._domTarget.get(0) || $(event.currentTarget).attr('id') == 'rm-css-control-cancel' || $(event.currentTarget).attr('id') == 'rm-css-control-save') && ($(event.target).closest('.colorpicker').length < 1 && !$(event.target).hasClass('rm-css-highlight-window'))) {
                    if (this._selected) {
                        this._selected.removeClass('rm-css-selected');
                        $('.rm-css-selected-window').data('delegate', false).fadeOut(function () {
                            $(this).remove();
                        });
                        if (event.currentTarget.id == 'rm-css-control-cancel') {
                            this.cancel();
                        } else {
                            if (this._selected.data('modified')) {
                                this.save();
                            }
                        }
                        this.disableExtraWidgets();
                    }
                    this.close();
                }
                return false;
            } else if (!event.data.cancel) {
                if (!this._selected || (this._highlighted && this._selected.index(this._highlighted.get(0)) < 0)) {
                    $('.rm-css-selected-window').remove();
                    $('.rm-css-highlight-window').css({
                        borderStyle: 'solid',
                        outlineStyle: 'solid',
                        borderWidth: '2px',
                        outlineWidth: '2px'
                    }).removeClass('rm-css-highlight-window').addClass('rm-css-selected-window');
                    if (this._selected) {
                        if (this.needsUpdate()) {
                            this.save();
                        }
                    }
                    this.retarget();
                    if (!this.isActive()) {
                        this.activate();
                    }
                    this.shiftLocation({
                        x: event.pageX,
                        y: event.pageY
                    }, true);
                } else {
                    var bg_widget = this._selected.data('BackgroundImageWidget')
                    if (!bg_widget || !bg_widget.isActive()) {
                        this.shiftLocation({
                            x: event.pageX,
                            y: event.pageY
                        }, false);
                    }
                }
                event.stopPropagation();
            }
            break;
        default:
            break;
        }
    },
    needsUpdate: function () {
        if (this._selected) {
            return this._selected.data('modified');
        }
        return false;
    }
});
var SoundCloudSongUploader = RMUIWidget.extend({
    _domSelector: false,
    _uploadifyForm: false,
    _uploadifySelector: false,
    _name: 'SoundCloudSongUploader',
    _plid: false,
    _queues: false,
    _host: '',
    init: function (targetElement) {
        this._domSelector = targetElement.selector;
        this._uploadifySelector = this._domSelector + '-uploadify';
        var formDOM = '<div id="' + this._domSelector.substr(1) + '-form"><input id="' + this._uploadifySelector.substr(1) + '" type="file" name="sctracks[]" /></div>';
        this._uploadifyForm = $(formDOM);
        this._uploadifyForm.insertAfter(targetElement);
        this._uploadifyForm.css({
            width: '100%',
            height: '100%',
            position: 'absolute',
            top: '0px',
            left: '0px',
            visibility: 'hidden',
            zIndex: 1
        });
        this._queues = new Array();
        this._host = Environment.getHost();
        this._super(targetElement);
    },
    install: function (targetElement) {
        this._super(targetElement);
        this._uploadifyForm.bind('mouseenter', {
            widget: this
        }, function (event) {
            event.data.widget._domTarget.addClass('hover');
        }).bind('mouseleave', {
            widget: this
        }, function (event) {
            event.data.widget._domTarget.removeClass('hover');
        });
    },
    installUploadify: function () {
        dodebug('installing uploadify');
        var _songwidget = this;
        var scriptURL = this._host + '/soundcloud/uploadTrack';
        $(this._uploadifySelector).uploadify({
            uploader: '/flash/uploadify.swf',
            script: scriptURL,
            folder: '',
            cancelImg: 'http://a.ak.static-abc.com/images/soundcloud/cancel.png?v=2.70',
            buttonText: 'Upload song',
            hideButton: true,
            width: 156,
            height: 47,
            fileDesc: 'm4a, mp4, aac, aiff, flac, mp3, ogg, wav',
            fileExt: '*.m4a;*.mp4;*.aac;*,aiff;*.flac;*.mp3;*.ogg;*.wav',
            wmode: 'transparent',
            scriptAccess: 'always',
            multi: false,
            sizeLimit: (1024 * 1024 * 150),
            onSelect: function (event, queueID, fileObj) {
                var n = fileObj.name.toLowerCase();
                n = n.substr(n.lastIndexOf("."));
                if (n.indexOf(".aac") == -1 && n.indexOf(".aiff") == -1 && n.indexOf(".flac") == -1 && n.indexOf(".m4a") == -1 && n.indexOf(".mp4") == -1 && n.indexOf(".mp3") == -1 && n.indexOf(".ogg") == -1 && n.indexOf(".wav") == -1) {
                    alert("We support .mp3, .aiff, .wav, .flac, .aac, and .ogg files. Please select a different file.");
                    return false;
                } else {
                    _songwidget.triggerEvent('uploadselect', {
                        type: 'uploadselect',
                        queueID: queueID
                    });
                    _songwidget.upload(fileObj.name, false);
                    _songwidget.storeQueueID(queueID);
                }
                return true;
            },
            onOpen: function (event, queueID, fileObj) {
                dodebug('OPEN!');
                _songwidget.triggerEvent('uploadstart', {
                    type: 'uploadstart',
                    queueID: queueID,
                    data: {
                        filename: fileObj.name
                    }
                });
                return true;
            },
            onProgress: function (event, queueID, fileObj, data) {
                dodebug('PROGRESS!');
                _songwidget.triggerEvent('uploadprogress', {
                    type: 'uploadprogress',
                    queueID: queueID,
                    data: {
                        percentage: data.percentage
                    }
                });
                return false;
            },
            onComplete: function (event, queueID, fileObj, response, data) {
                dodebug('COMPLETE!');
                _songwidget.triggerEvent('uploadcomplete', {
                    type: 'uploadcomplete',
                    queueID: queueID,
                    data: {
                        response: response
                    }
                });
                return true;
            },
            onCancel: function (event, queueID, fileObj, data) {
                dodebug('CANCEL!');
                _songwidget.triggerEvent('uploadcancel', {
                    type: 'uploadcancel',
                    queueID: queueID
                });
                return true;
            },
            onError: function (event, queueID, fileObj, errorObj) {
                dodebug('ERROR!');
                if (errorObj.type == "File Size") {
                    alert("The file upload limit for songs is 150Mb");
                }
                _songwidget.triggerEvent('uploaderror', {
                    type: 'uploaderror',
                    queueID: queueID,
                    error: errorObj
                });
                return true;
            }
        });
    },
    upload: function (title, downloadable) {
        var args = {
            'title': escape(title),
            'downloadable': downloadable,
            'bandId': getGlobal('pageId'),
            'kid': getGlobal('kid'),
            'name': getGlobal('bandName')
        };
        $(this._uploadifySelector).uploadifySettings('scriptData', args);
        dodebug('starting uploadify upload with scriptData: ');
        dodebug(args);
        $(this._uploadifySelector).uploadifyUpload();
    },
    cancel: function (queueID) {
        if (this.hasQueueID(queueID)) {
            $(this._uploadifySelector).uploadifyCancel(queueID);
        } else {
            dodebug('Error: this uploadify instance doesn\'t have control of this queueID=' + queueID);
        }
    },
    storeQueueID: function (queueID) {
        if (!this.hasQueueID(queueID)) {
            this._queues.push(queueID);
        }
    },
    hasQueueID: function (queueID) {
        for (var i = 0; i < this._queues.length; i++) {
            if (this._queues[i] == queueID) {
                return true;
            }
        }
        return false;
    },
    enable: function () {
        this._uploadifyForm.css({
            height: '',
            overflow: ''
        });
    },
    disable: function () {
        this._uploadifyForm.css({
            height: 0,
            overflow: 'hidden'
        });
    }
});
var SoundCloudArtworkUploader = RMUIWidget.extend({
    _domSelector: false,
    _name: 'SoundCloudArtworkUploader',
    _scTrackId: false,
    _queues: false,
    _host: '',
    _loadIndicator: false,
    _progressBar: false,
    _uploadifyForm: false,
    _waiting: false,
    TRACK_SCRIPT_URL: '/soundcloud/uploadTrackArtwork',
    PLAYLIST_SCRIPT_URL: '/soundcloud/uploadArtwork',
    init: function (targetElement) {
        this._domSelector = targetElement.selector;
        this._uploadifySelector = this._domSelector + '-uploadify';
        var formDOM = '<div id="' + this._domSelector.substr(1) + '-form"><input id="' + this._uploadifySelector.substr(1) + '" type="file" name="scartwork" /><em class="artwork-help-overlay rc-m">Upload new image?</em></div>';
        this._uploadifyForm = $(formDOM);
        this._uploadifyForm.appendTo(targetElement);
        this._uploadifyForm.css({
            width: '100%',
            height: '100%',
            top: '0px',
            left: '0px',
            position: 'absolute',
            zIndex: 1
        });
        this._waitMessage = $('<em class="artwork-help-overlay rc-m loading">Please wait</em>');
        this._waitMessage.appendTo(this._uploadifyForm).css({
            zIndex: 1
        }).hide();
        this._waiting = false;
        this._queues = new Array();
        this._host = Environment.getHost();
        this._super(targetElement);
    },
    install: function (targetElement) {
        this._super(targetElement);
        $(this._domTarget).addClass('sc-artwork-upload');
        $('.artwork-help-overlay', this._uploadifyForm).hide();
        this._domTarget.bind('mouseenter mouseleave', {
            widget: this
        }, this.processUserEvent);
    },
    installUploadify: function () {
        var scriptURL = this._host + this.PLAYLIST_SCRIPT_URL;
        dodebug(this._name + '::installUploadify(): script destination = ' + scriptURL);
        var _artwidget = this;
        $(this._uploadifySelector).uploadify({
            uploader: '/flash/uploadify.swf',
            script: scriptURL,
            folder: '/var/www/cache/soundcloud',
            cancelImg: 'http://a.ak.static-abc.com/images/soundcloud/cancel.png?v=2.70',
            buttonText: 'Change',
            hideButton: true,
            fileDesc: 'jpg, jpeg, png, gif',
            fileExt: '*.jpg;*.jpeg;*.gif;*.png',
            wmode: 'transparent',
            scriptAccess: 'always',
            sizeLimit: (1024 * 1024 * 4),
            height: 100,
            width: 100,
            multi: false,
            onSelect: function (event, queueID, fileObj) {
                dodebug(fileObj);
                _artwidget.upload();
                _artwidget.storeQueueID(queueID);
                return false;
            },
            onOpen: function (event, queueID, fileObj) {
                _artwidget.triggerEvent('uploadstart', {
                    type: 'uploadstart',
                    queueID: queueID
                });
                return true;
            },
            onProgress: function (event, queueID, fileObj, data) {
				dodebug(data.percentage);
                _artwidget.triggerEvent('uploadprogress', {
                    type: 'uploadprogress',
                    queueID: queueID,
                    data: {
                        percentage: data.percentage
                    }
                });
                return false;
            },
            onComplete: function (event, queueID, fileObj, response, data) {
				if (response) {
					
                    dodebug(response);
                    var json = eval('(' + response + ')');
                    _artwidget.triggerEvent('uploadcomplete', {
                        type: 'uploadcomplete',
                        queueID: queueID,
                        data: {
                            response: json
                        }
                    });
                } else {
                    dodebug('Error detected with artwork upload. Check logs for more info.');
                }
                return true;
            },
            onCancel: function (event, queueID, fileObj, data) {
                _artwidget.triggerEvent('uploadcancel', {
                    type: 'uploadcancel',
                    queueID: queueID
                });
                return true;
            },
            onError: function (event, queueID, fileObj, errObj) {
				if (errorObj.type == "File Size") {
                    alert("The file upload limit for album artwork is 4Mb");
                }
                _artwidget.triggerEvent('uploaderror', {
                    type: 'uploaderror',
                    queueID: queueID,
                    error: errObj
                });
                return true;
            }
        });
    },
    setTargetTrack: function (trackObj) {
        if (trackObj.id) {
            this._rmTrackId = trackObj.id;
        }
        if (trackObj.sourceId) {
            this._scTrackId = trackObj.sourceId;
        }
        if (trackObj.artworkUrl) {
            this._artworkUrl = trackObj.artworkUrl;
        }
    },
    setWaiting: function (isWaiting) {
        this._waiting = isWaiting;
    },
    processUserEvent: function (event) {
        if (!event.data.widget._waiting) {
            switch (event.type) {
            case 'mouseenter':
                $('.artwork-help-overlay:not(.loading)', event.data.widget._domTarget).fadeIn('fast');
                break;
            case 'mouseleave':
                $('.artwork-help-overlay', event.data.widget._domTarget).hide();
                break;
            default:
                break;
            }
        }
        return false;
    },
    upload: function () {
        var scriptUrl = '';
        if (this._scTrackId && parseInt(this._scTrackId) > 0) {
            scriptUrl = this._host + this.TRACK_SCRIPT_URL;
        } else {
            scriptUrl = this._host + this.PLAYLIST_SCRIPT_URL;
        }
        $(this._uploadifySelector).uploadifySettings('script', scriptUrl);
        var args = {
            'bandid': getGlobal('pageId'),
            'rmtrackid': this._rmTrackId,
            'kid': getGlobal('kid'),
            'sctrackid': this._scTrackId
        };
        dodebug(this._name + '::upload(): starting upload with new script args =');
        dodebug(args);
        $(this._uploadifySelector).uploadifySettings('scriptData', args);
        $(this._uploadifySelector).uploadifyUpload();
    },
    cancel: function (queueID) {
        if (this.hasQueueID(queueID)) {
            $(this._uploadifySelector).uploadifyCancel(queueID);
        } else {
            dodebug('Error: this uploadify instance doesn\'t have control of this queueID=' + queueID);
        }
    },
    storeQueueID: function (queueID) {
        if (!this.hasQueueID(queueID)) {
            this._queues.push(queueID);
        }
    },
    hasQueueID: function (queueID) {
        for (var i = 0; i < this._queues.length; i++) {
            if (this._queues[i] == queueID) {
                return true;
            }
        }
        return false;
    },
    enable: function () {
        this._uploadifyForm.css({
            height: '',
            overflow: ''
        });
    },
    disable: function () {
        this._uploadifyForm.css({
            height: 0,
            overflow: 'hidden'
        });
    }
});
var SC = function () {
        return {
            Connect: {
                wrapped_callback: null,
                popup_window: null,
                prepareButton: function (link, options) {
                    SC.Connect.wrapped_callback = options.callback;
                    $(link).click(function (evt) {
                        evt.stopPropagation();
                        dodebug('opening pop-up...');
                        SC.Connect.popup_window = window.open(options.request_token_endpoint, 'sc_connect_popup', 'location=1,width=456,height=500,toolbar=no,scrollbars=yes');
                        return false;
                    });
                },
                callback: function (query_obj) {
                    SC.Connect.popup_window.close();
                    SC.Connect.wrapped_callback(query_obj);
                }
            },
            QueryToObject: function (query) {
                var obj = {};
                var splitted_url = document.URL.split("?");
                var query = splitted_url[1] ? splitted_url[1] : "";
                var vars = query.split("&");
                for (var i = 0; i < vars.length; i++) {
                    var pair = vars[i].split("=");
                    obj[pair[0]] = decodeURIComponent(pair[1]);
                }
                return (obj);
            }
        };
    }();
var TrackManagerWidget = RMUIWidget.extend({
    _shade: false,
    _trackEditor: false,
    _trackSelector: false,
    _scConnect: false,
    _ytConnect: false,
    _songUploader: false,
    _directSongUploader: false,
    _trackArtworkUploader: false,
    _playlistArtworkUploader: false,
    _ytInputter: false,
    _tracks: false,
    _selectedTrack: false,
    _artworkPollers: false,
    _songPollers: false,
    _needSCUpdate: false,
    _uploading: false,
    _postData: false,
    _scrollStartPos: false,
    STATE_SC_TRACKS: 1,
    STATE_SC_CONNECT: 2,
    STATE_YT_TRACKS: 3,
    STATE_TRACK_INFO: 4,
    _state: false,
    _lastState: false,
    MESSAGE_ERROR: 'error',
    MESSAGE_INFO: 'info',
    MESSAGE_WARNING: 'warning',
    _errDisplay: false,
    DEFAULT_ALBUM_ARTWORK: 'http://b.ak.static-abc.com/images/soundcloud/rm_default_artwork_sm.png?v=2.70',
    SERVICE_TYPE_SOUNDCLOUD: 1,
    SERVICE_TYPE_YOUTUBE: 2,
    init: function (targetElement, options) {
        if (options) {
            this._scConnect = (options.scConnect) ? options.scConnect : false;
            this._ytConnect = (options.ytConnect) ? options.ytConnect : false;
        }
        dodebug(this._scConnect + ' = using soundcloud connect for track manager');
        this._songUploader = new SoundCloudSongUploader($('#sc-track-upload-button'));
        this._songUploader.installUploadify();
        this._songUploader.addCallback('uploadcomplete', this, this.songUploadHandler);
        this._songUploader.addCallback('uploadstart', this, this.songUploadHandler);
        this._songUploader.addCallback('uploadprogress', this, this.songUploadHandler);
        this._songUploader.addCallback('uploadcancel', this, this.songUploadHandler);
        this._songUploader.addCallback('uploaderror', this, this.songUploadHandler);
        this._trackArtworkUploader = new SoundCloudArtworkUploader($('#sc-track-artwork-upload'));
        this._trackArtworkUploader.installUploadify();
        this._trackArtworkUploader.addCallback('uploadcomplete', this, this.artworkUploadHandler);
        this._trackArtworkUploader.addCallback('uploadstart', this, this.artworkUploadHandler);
        this._trackArtworkUploader.addCallback('uploadprogress', this, this.artworkUploadHandler);
        this._trackArtworkUploader.addCallback('uploadcancel', this, this.artworkUploadHandler);
        this._trackArtworkUploader.addCallback('uploaderror', this, this.artworkUploadHandler);
        this._directSongUploader = new SoundCloudSongUploader($('#add-file-track-button'));
        this._directSongUploader.installUploadify();
        this._directSongUploader.addCallback('uploadcomplete', this, this.songUploadHandler);
        this._directSongUploader.addCallback('uploadstart', this, this.songUploadHandler);
        this._directSongUploader.addCallback('uploadprogress', this, this.songUploadHandler);
        this._directSongUploader.addCallback('uploadcancel', this, this.songUploadHandler);
        this._directSongUploader.addCallback('uploaderror', this, this.songUploadHandler);
        this._directSongUploader.addCallback('uploadselect', this, this.songUploadHandler);
        if (!this._scConnect) {
            dodebug('disabling song uploads from my computer button');
            this._directSongUploader.disable();
        }
        this._tracks = new Array();
        this._artworkPollers = new Array();
        this._trackPollers = new Array();
        this._uploading = false;
        this._postData = {
            bandId: getGlobal('pageId'),
            rmPageId: getGlobal('fanPageId')
        };
        this._super(targetElement, options);
    },
    install: function (targetElement) {
        this._super(targetElement);
        $('#editor-pane-container').append(this._domTarget);
        this._trackSelector = $('#rm-track-selector');
        this._trackEditor = $('#rm-track-editor');
        if ($('#rm-track-manager-shade').length < 1) {
            dodebug('creating track manager shade...');
            var domStr = '<div id="rm-track-manager-shade" class="editor-modal-layer"></div>';
            this._shade = $(domStr);
            this._shade.appendTo($('#editor-pane-container')).hide();
        }
        this._errDisplay = $('.error-display', this._domTarget);
        $('#add-track-button').bind('click', {
            widget: this
        }, function (event) {
            $(event.currentTarget).safeHide().siblings().safeShow();
            event.stopPropagation();
            return false;
        });
        $('#rmplayer-upload-subactions').bind('click', function (event) {
            event.stopPropagation();
            return false;
        });
        $('body, #rmplayer-upload-subactions .close-button').bind('click', {
            widget: this
        }, function (event) {
            if ($(event.target).closest(event.data.widget._domTarget.selector).length == 0 && $('#rmplayer-upload-subactions').is(':visible')) {
                $('#rmplayer-upload-subactions').safeHide().siblings().safeShow();
            }
        });
        $('#add-file-track-button, #add-sc-track-button, #add-yt-track-button, #close-track-selector-button, #save-to-bandpage-button, #cancel-track-changes-button, #back-to-selector-button, #cancel-song-upload-button').bind('click', {
            widget: this
        }, this.buttonHandler);
        $('li[id|=rm-track] > a:not(.disabled)', this._domTarget).live('click', {
            widget: this
        }, function (event) {
            var idTokens = $(event.currentTarget).attr('id').split('-');
            var sourceId = idTokens[idTokens.length - 1];
            event.data.widget.openTrackInfo(event.data.widget.getTrack(sourceId));
            return false;
        });
        $('li[id|=bandpage-track]', $('#rmplayer-playlist')).live('click', {
            widget: this
        }, function (event) {
            var idTokens = $(event.currentTarget).attr('id').split('-');
            var trackId = idTokens[idTokens.length - 1];
            dodebug('opening track info for track id=' + trackId);
            dodebug(event.data.widget.getTrackByRMId(trackId));
            event.data.widget.openTrackInfo(event.data.widget.getTrackByRMId(trackId));
            return false;
        });
        $('.rm-remove-link', '#rmplayer-playlist').live('click', {
            widget: this
        }, this.buttonHandler);
        var _trackManager = this;
        if (!this._scConnect) {
            var scConnectOptions = {
                request_token_endpoint: '/soundcloud/oauth_request_token',
                access_token_endpoint: '/soundcloud/oauth_access_token',
                callback: function (query_obj) {
                    _trackManager._scConnect = true;
                    _trackManager._directSongUploader.enable();
                    _trackManager.openSoundCloudManager();
                }
            };
            dodebug('setting up button...');
            SC.Connect.prepareButton($('#sc-connect-init')[0], scConnectOptions);
        }
        var titleEditor = new TextInlineEditWidget($('#rm-track-title'), {
            autoSave: false
        });
        titleEditor.addCallback('update', this, function () {
            if (this._selectedTrack) {
                this._selectedTrack.title = titleEditor.getValue();
            }
        });
        var purchaseUrlEditor = new TextInlineEditWidget($('#rm-track-purchase-url'), {
            autoSave: false
        });
        purchaseUrlEditor.addCallback('update', this, function () {
            if (this._selectedTrack) {
                this._selectedTrack.purchaseUrl = purchaseUrlEditor.getValue();
            }
        });
        $('#rm-track-downloadable-checkbox').bind('click', {
            widget: this
        }, function (event) {
            $('#rm-track-downloadable-indicator').click();
            return true;
        });
        $('#rm-track-downloadable-indicator').bind('click', {
            widget: this
        }, function (event) {
            var selectedTrack = event.data.widget.getSelectedTrack();
            selectedTrack.downloadable = !selectedTrack.downloadable;
            event.data.widget.setSelectedTrack(selectedTrack);
            event.data.widget.updateTrackEditorUI();
            return false;
        });
        $('#rm-track-purchasable-checkbox').bind('click', {
            widget: this
        }, function (event) {
            $('#rm-track-purchasable-indicator').click();
            return true;
        });
        $('#rm-track-purchasable-indicator').bind('click mouseenter', {
            widget: this
        }, function (event) {
            var inputField = $(event.currentTarget).siblings('.rm-buy-link-input');
            var selectedTrack = event.data.widget.getSelectedTrack();
            dodebug(event.type);
            switch (event.type) {
            case 'click':
                selectedTrack.purchasable = !selectedTrack.purchasable;
                event.data.widget.setSelectedTrack(selectedTrack);
                event.data.widget.updateTrackEditorUI();
                if (selectedTrack.purchasable) {
                    $('body').bind('click', {
                        widget: _trackManager,
                        elem: inputField
                    }, _trackManager.handleBuyLinkEvent);
                    inputField.css({
                        display: 'block',
                        opacity: 0,
                        bottom: function (indx, val) {
                            return (parseInt(val) - 10);
                        }
                    }).animate({
                        opacity: 1,
                        bottom: '+=10px'
                    }, 250, function () {
                        $(this).css({
                            bottom: ''
                        });
                    });
                } else {
                    inputField.hide();
                    $('body').unbind('click', _trackManager.handleBuyLinkEvent);
                }
                break;
            case 'mouseenter':
                if (selectedTrack.purchasable) {
                    if (inputField.is(':hidden')) {
                        $('body').bind('click', {
                            widget: _trackManager,
                            elem: inputField
                        }, _trackManager.handleBuyLinkEvent);
                        inputField.css({
                            display: 'block',
                            opacity: 0,
                            bottom: function (indx, val) {
                                return (parseInt(val) - 10);
                            }
                        }).animate({
                            opacity: 1,
                            bottom: '+=10px'
                        }, 250, function () {
                            $(this).css({
                                bottom: ''
                            });
                        });
                    }
                }
                break;
            default:
                break;
            }
            return false;
        });
        $('.safe-hidden').removeClass('safe-hidden').safeHide();
        this.loadBandPagePlaylist();
        if ((this._domTarget.height() + 100) < $(window).height()) {
            $(window).bind('scroll', {
                widget: this
            }, this.handleScroll); /*this._scrollStartPos=this._domTarget.offset().top;*/
        }
    },
    activate: function () {
        this._super();
        dodebug('attaching cancel handler...');
        $('body').bind('click', {
            widget: this
        }, this.cancelHandler);
    },
    deactivate: function () {
        this._super();
        this.clearMessages();
        var _trackManager = this;
        if (this._trackSelector.css('visibility') != 'hidden') {
            dodebug('closing track SELECTOR...');
            this._trackSelector.safeSlideUp(function () {
                _trackManager._shade.fadeOut('fast');
            });
        } else if (this._trackEditor.css('visibility') != 'hidden') {
            dodebug('closing track EDITOR....');
            this._trackEditor.safeFadeOut(function () {
                _trackManager._shade.fadeOut('fast');
                $('#track-upload-notification').hide();
            });
        } else {
            dodebug('just closing shade.');
            this._shade.fadeOut();
        }
        this._lastState = false;
        dodebug('removing cancel handler...');
        $('body').unbind('click', this.cancelHandler);
        if ($('#rmplayer-upload-subactions').is(':visible')) {
            $('#rmplayer-upload-subactions').safeHide().siblings().safeShow();
        }
    },
    changeMode: function (mode) {
        this._super(mode);
        switch (mode) {
        case 'css':
            this.disable();
            break;
        case 'content':
            this.enable();
            break;
        default:
            break;
        }
    },
    enable: function () {
        this._super();
        $('#rmplayer-actions').safeShow();
        $('#rmplayer-playlist').sortable('enable');
        $('.rm-remove-link', '#rmplayer-playlist').show();
    },
    disable: function () {
        this._super();
        $('#rmplayer-actions').safeHide();
        $('#rmplayer-playlist').sortable('disable');
        $('.rm-remove-link', '#rmplayer-playlist').hide();
    },
    saveTrackToPlaylist: function (trackObj) {
        dodebug('updating track on bandpage playlist...');
        var trackDOM = $('#bandpage-track-' + trackObj.id);
        trackDOM.css({
            opacity: 0.6
        });
        $('.rm-remove-link', trackDOM).hide();
        $('.track-buttons', trackDOM).addClass('loading');
        var _trackManager = this;
        var saveData = {
            trackId: trackObj.id,
            title: trackObj.title,
            description: trackObj.description || '',
            artworkUrl: trackObj.artworkUrl,
            purchaseUrl: trackObj.purchaseUrl,
            downloadable: trackObj.downloadable,
            purchasable: trackObj.purchasable
        };
        Saver.save('track-update', saveData, {
            success: function () {
                _trackManager.storeTrack(trackObj);
                var addedTrackDOM = _trackManager.generateTrackDOM(trackObj);
                var originalTrackDOM = $('#bandpage-track-' + trackObj.id);
                addedTrackDOM.insertBefore(originalTrackDOM).hide();
                originalTrackDOM.remove();
                if (originalTrackDOM.hasClass('odd')) {
                    addedTrackDOM.addClass('odd');
                }
                addedTrackDOM.fadeIn(function () {
                    if (addedTrackDOM.index() == 0) {
                        _trackManager.refreshFirstTrackDisplay(trackObj);
                    }
                });
                trackDOM.css({
                    opacity: 1
                });
                $('.rm-remove-link', trackDOM).show();
                $('.track-buttons', trackDOM).removeClass('loading');
            },
            error: function () {
                trackDOM.css({
                    opacity: 1
                });
                $('.rm-remove-link', trackDOM).show();
                $('.track-buttons', trackDOM).removeClass('loading');
            }
        });
    },
    saveCurrentToPlaylist: function () {
        var selectedTrack = this.getSelectedTrack();
        dodebug('saving current track: ');
        dodebug(selectedTrack);
        if (selectedTrack && selectedTrack.onBandPage) {
            this.saveTrackToPlaylist(selectedTrack);
        } else if (selectedTrack) {
            var _trackManager = this;
            var saveData = {
                sourceType: selectedTrack.serviceType,
                sourceId: selectedTrack.sourceId,
                title: selectedTrack.title,
                description: selectedTrack.description || '',
                duration: selectedTrack.duration,
                genre: selectedTrack.genre,
                artworkUrl: selectedTrack.artworkUrl,
                downloadable: selectedTrack.downloadable,
                purchasable: selectedTrack.purchasable,
                downloadUrl: selectedTrack.downloadUrl,
                streamUrl: selectedTrack.streamUrl,
                purchaseUrl: selectedTrack.purchaseUrl
            };
            Saver.save('track-add', saveData, {
                callFirst: true,
                success: function (data) {
                    if (!data.hasOwnProperty('tracks')) {
                        Saver.triggerErrorCallbacks();
                        return;
                    }
                    var success = false;
                    for (var i = 0, track; track = data.tracks[i++];) {
                        dodebug('comparing response of ' + track.sourceId + ' to ' + selectedTrack.sourceId);
                        if (track.sourceId == selectedTrack.sourceId) {
                            selectedTrack.id = parseInt(track.id);
                            selectedTrack.onBandPage = true;
                            _trackManager.storeTrack(selectedTrack);
                            var addedTrackDOM = _trackManager.generateTrackDOM(selectedTrack);
                            $('#rmplayer-playlist').append(addedTrackDOM);
                            $('.empty-message', '#rmplayer-playlist').remove();
                            _trackManager.updatePlaylistUI(true);
                            success = true;
                            break;
                        }
                    }
                    if (success) {
                        Saver.triggerSuccessCallbacks();
                    } else {
                        Saver.triggerErrorCallbacks();
                    }
                }
            });
        }
    },
    removeTrackFromPlaylist: function (trackId) {
        dodebug('removing track with id=' + trackId);
        var track = this.getTrackByRMId(trackId);
        var trackDOM = $('#bandpage-track-' + trackId);
        var _trackManager = this;
        $('.rm-remove-link', trackDOM).hide();
        $('.track-buttons', trackDOM).addClass('loading');
        Saver.save('track-remove', trackId, {
            success: function (data) {
                trackDOM.fadeOut('fast', function () {
                    $(this).remove();
                    _trackManager.updatePlaylistUI(true);
                });
                track.onBandPage = false;
                _trackManager.storeTrack(track);
            },
            error: function () {
                $('.rm-remove-link', trackDOM).show();
                $('.track-buttons', trackDOM).removeClass('loading');
            }
        });
    },
    storeTrack: function (trackObj) {
        dodebug('storing track = ' + trackObj.sourceId);
        this._tracks.upsert(trackObj, 'sourceId');
    },
    getTrack: function (sourceId) {
        for (var i = 0, track; track = this._tracks[i++];) {
            if (track.sourceId == sourceId) {
                return $.extend({}, track);
            }
        }
        return false;
    },
    getTrackByRMId: function (id) {
        for (var i = 0, track; track = this._tracks[i++];) {
            if (track.id) {
                if (parseInt(track.id) == parseInt(id)) {
                    return $.extend({}, track);
                }
            }
        }
        return false;
    },
    setSelectedTrack: function (trackObj) {
        this._selectedTrack = trackObj;
    },
    getSelectedTrack: function () {
        return this._selectedTrack;
    },
    updateTrackEditorUI: function () {
        var selectedTrack = this.getSelectedTrack();
        switch (selectedTrack.serviceType) {
        case this.SERVICE_TYPE_YOUTUBE:
            this._trackArtworkUploader.disable();
            this._trackArtworkUploader.setWaiting(false);
            $('#rm-track-title').addClass('yt');
            $('#rm-track-downloadable-toggle').hide();
            break;
        case this.SERVICE_TYPE_SOUNDCLOUD:
        default:
            if (selectedTrack.uploadQueueID) {
                this._trackArtworkUploader.disable();
                this._trackArtworkUploader.setWaiting(true);
            } else {
                this._trackArtworkUploader.enable();
                this._trackArtworkUploader.setWaiting(false);
            }
            $('#rm-track-title').removeClass('yt');
            $('#rm-track-downloadable-toggle').show();
            break;
        }
        this._trackArtworkUploader.setTargetTrack(selectedTrack);
        if (this.isPollingArtwork(selectedTrack.sourceId)) {
            $('img', this._trackArtworkUploader._domTarget).fadeOut();
            $(this._trackArtworkUploader._domTarget).addClass('loading-artwork');
        } else {
            $(this._trackArtworkUploader._domTarget).removeClass('loading-artwork');
            $('img', this._trackArtworkUploader._domTarget).fadeIn();
            if (selectedTrack.artworkUrl && selectedTrack.artworkUrl != '') {
                $('img', '#sc-track-artwork-upload').attr('src', selectedTrack.artworkUrl);
            } else {
                $('img', '#sc-track-artwork-upload').attr('src', this.DEFAULT_ALBUM_ARTWORK);
                $('.artwork-help-overlay:not(.loading)', this._trackArtworkUploader._domTarget).fadeIn();
            }
        }
        this.getWidget('TextInlineEditWidget', $('#rm-track-title')).setValue(selectedTrack.title);
        if (selectedTrack.downloadable) {
            $('input[type=checkbox]', '#rm-track-downloadable-toggle').attr('checked', 'checked');
            $('.rm-ui-button', '#rm-track-downloadable-toggle').addClass('active');
            $('#rm-track-downloadable-toggle').data('active', true);
        } else {
            $('input[type=checkbox]', '#rm-track-downloadable-toggle').removeAttr('checked');
            $('.rm-ui-button', '#rm-track-downloadable-toggle').removeClass('active');
            $('#rm-track-downloadable-toggle').data('active', false);
        }
        if (selectedTrack.purchasable) {
            $('input[type=checkbox]', '#rm-track-purchasable-toggle').attr('checked', 'checked');
            $('.rm-ui-button', '#rm-track-purchasable-toggle').addClass('active');
            $('#rm-track-purchasable-toggle').data('active', true);
        } else {
            $('input[type=checkbox]', '#rm-track-purchasable-toggle').removeAttr('checked');
            $('.rm-ui-button', '#rm-track-purchasable-toggle').removeClass('active');
            $('#rm-track-purchasable-toggle').data('active', false);
        }
        var purchaseUrlInputter = this.getWidget('TextInlineEditWidget', $('#rm-track-purchase-url'));
        if (purchaseUrlInputter) {
            if (this._selectedTrack.purchaseUrl) {
                purchaseUrlInputter.setValue(this._selectedTrack.purchaseUrl);
            } else {
                purchaseUrlInputter.clear();
            }
        }
        if (selectedTrack.fanOnly) {
            $('#rm-track-fan-only').attr('checked', 'checked');
        } else {
            $('#rm-track-fan-only').removeAttr('checked');
        }
        if (selectedTrack.uploadQueueID) {
            if ($('#track-upload-notification').is(':hidden')) {
                $('#track-editor-actions').fadeOut(function () {
                    $('#track-upload-notification').fadeIn('fast');
                    $('.progress', '#track-upload-notification').removeClass('cancelled').css({
                        width: 0
                    });
                    $('.progress-notification', '#track-upload-notification').text('Uploading...');
                });
            }
            $('.progress-notification', '#track-upload-notification').removeClass('loading');
        } else if ($('#track-upload-notification').is(':visible')) {
            $('#track-upload-notification').hide();
            $('#track-editor-actions').show();
        }
    },
    updatePlaylistUI: function (resetSortable) {
        if (resetSortable !== true) {
            resetSortable = false;
        }
        dodebug('updating playlist ui...');
        var playlistTracks = $('#rmplayer-playlist').children('li');
        if (playlistTracks.length > 0) {
            playlistTracks.removeClass('odd').filter(':odd').addClass('odd');
            var firstTrackIdTokens = playlistTracks.filter(':first').attr('id').split('-');
            var firstTrackId = firstTrackIdTokens[firstTrackIdTokens.length - 1];
            dodebug('first track id = ' + firstTrackId + ', stored value = ' + $('#rmplayer-playlist').data('first_track_id'));
            if ($('#rmplayer-playlist').data('first_track_id') != firstTrackId) {
                dodebug(this.getTrackByRMId(firstTrackId));
                this.refreshFirstTrackDisplay(this.getTrackByRMId(firstTrackId));
            }
            if (resetSortable) {
                var _trackManager = this;
                $('#rmplayer-playlist').sortable({
                    cursor: "move",
                    items: "li:not(.empty-message)",
                    containment: 'parent',
                    revert: 100,
                    scroll: false,
                    update: function (event, ui) {
                        var order = [];
                        var idTokens = [];
                        $('#rmplayer-playlist').children('li').each(function () {
                            dodebug($(this).attr('id'));
                            idTokens = $(this).attr('id').split('-');
                            order[order.length] = idTokens[idTokens.length - 1];
                        });
                        dodebug(order);
                        Saver.save('playlist-update-order', order, {

                            success: function () {
                                if (firstTrackId != order[0]) {
                                    _trackManager.refreshFirstTrackDisplay(_trackManager.getTrackByRMId(order[0]));
                                } else {
                                    dodebug('first track remained the same... order[0] = ' + order[0] + ', firsttrack=' + firstTrackId);
                                }
                                _trackManager.updatePlaylistUI();
                            }
                        });
                    },
                    change: function (event, ui) {
                        playlistTracks.filter(':not(.sorting)').removeClass('odd').filter(':even').addClass('odd');
                    },
                    stop: function (event, ui) {
                        ui.item.removeClass('sorting');
                        playlistTracks.filter(':not(.sorting)').removeClass('odd').filter(':even').addClass('odd');
                        $('#rmplayer-playlist').css({
                            overflow: ''
                        }).animate({
                            height: $('#rmplayer-playlist').data('height') + 'px'
                        }, 250, function () {
                            $(this).css({
                                height: ''
                            });
                        });
                    },
                    start: function (event, ui) {
                        ui.item.addClass('sorting');
                        var needed_height = 0;
                        $('#rmplayer-playlist').children('li').each(function () {
                            needed_height += $(this).outerHeight();
                        });
                        needed_height -= 8;
                        $('#rmplayer-playlist').data('height', $('#rmplayer-playlist').height()).css({
                            overflow: 'visible'
                        }).animate({
                            height: needed_height + 'px'
                        }, 250);
                    }
                });
            }
        } else {
            this.refreshFirstTrackDisplay(false);
        }
    },
    refreshFirstTrackDisplay: function (trackObj) {
        if (trackObj) {
            if (this.isPollingArtwork(trackObj.sourceId)) {
                $('img', '#rmplayer-artwork').hide();
                $('.artwork-container', '#rmplayer-artwork').addClass('loading-artwork');
            } else {
                var imgLoader = new Image();
                $('.artwork-container', '#rmplayer-artwork').addClass('loading-artwork');
                $(imgLoader).load(function (event) {
                    $('img', '#rmplayer-artwork').attr('src', $(event.currentTarget).attr('src')).fadeIn('fast');
                    $('.artwork-container', '#rmplayer-artwork').removeClass('loading-artwork');
                });
                imgLoader.src = (trackObj.artworkUrl != '') ? trackObj.artworkUrl : this.DEFAULT_ALBUM_ARTWORK;
            }
            $('#track-title').hide().text(trackObj.title);
            $('#track-title').fadeIn();
            var seconds = Math.round(trackObj.duration / 1000);
            var minutes = Math.floor(seconds / 60);
            seconds -= (minutes * 60);
            var timecode = '';
            if (minutes < 10) {
                timecode += '0';
            }
            timecode += minutes + ':';
            if (seconds < 10) {
                timecode += '0';
            }
            timecode += seconds;
            $('#timecodes').text('00:00 / ' + timecode).hide().fadeIn();
            $('#rmplayer-playlist').data('first_track_id', trackObj.id);
        } else {
            $('img', '#rmplayer-artwork').hide().attr('src', this.DEFAULT_ALBUM_ARTWORK).fadeIn();
            $('#track-title').hide().text('No tracks (yet.)');
            $('#track-title').fadeIn();
            $('#timecodes').hide();
            $('#rmplayer-playlist').removeData('first_track_id');
        }
    },
    generateTrackDOM: function (trackObj) {
        var trackNode = $('<li></li>');
        trackNode.addClass('bandpage-track').attr('id', 'bandpage-track-' + trackObj.id);
        var trackActions = $('<div class="track-buttons"></div>');
        if (trackObj.purchasable && trackObj.purchasable === true) {
            trackActions.append('<a class="buy-track-button rmplayer-primary-ui rc-xs" title="Buy track button" rel="rm-css-playerprimary">Buy</a>');
        }
        if (trackObj.downloadable && trackObj.downloadable === true) {
            trackActions.append('<a class="get-track-button rmplayer-primary-ui rc-xs" title="Download track button" rel="rm-css-playerprimary">Download</a>');
        }
        trackActions.append('<a class="rmplayer-primary-ui rc-xs disabled" title="Share track button" rel="rm-css-playerprimary">Share</a>');
        trackActions.append('<a class="rm-remove-link" id="remove-track-' + trackObj.id + '" title="Remove this track?" href="#remove-track">Remove</a>');
        trackNode.append(trackActions);
        trackNode.append('<h4 class="rm-inline-edit" name="rm-track-title">' + trackObj.title + '</h4>');
        return trackNode;
    },
    switchState: function (state) {
        switch (state) {
        case this.STATE_SC_TRACKS:
            this._domTarget.find('.rm-track-selector-view').safeHide();
            $('#soundcloud-track-selector').children('.track-selector-state').hide().filter('#soundcloud-default-state').show();
            $('#soundcloud-track-selector').safeFadeIn();
            this.loadSoundCloudTracks();
            this.loadSoundCloudPlaylists();
            this.updateAvailableTrackList();
            this.openTrackSelector();
            break;
        case this.STATE_SC_CONNECT:
            this._domTarget.find('.rm-track-selector-view').safeHide();
            $('#soundcloud-track-selector').children('.track-selector-state').hide().filter('#soundcloud-connect-state').show();
            $('#soundcloud-track-selector').safeFadeIn();
            this.openTrackSelector();
            break;
        case this.STATE_YT_TRACKS:
            this._domTarget.find('.rm-track-selector-view').safeHide();
            $('#youtube-track-selector').safeFadeIn();
            this.openTrackSelector();
            break;
        case this.STATE_TRACK_INFO:
            this.openTrackEditor();
            break;
        default:
            break;
        }
        if (this._state != state) {
            this._lastState = this._state;
            this._state = state;
        }
    },
    previousState: function () {
        if (this._lastState) {
            this.switchState(this._lastState);
        }
    },
    openTrackSelector: function () {
        var _trackManager = this;
        if (this._trackEditor.css('visibility') != 'hidden') {
            this._trackEditor.safeFadeOut(function () {
                _trackManager._trackSelector.safeSlideDown();
            });
        } else if (this._trackSelector.css('visibility') == 'hidden') {
            this._trackSelector.safeSlideDown();
        } else {}
        if (this._shade.is(':hidden')) {
            this._shade.fadeIn('fast');
        }
        if (!this._active) {
            this.activate();
        }
        this.setSelectedTrack(false);
    },
    openTrackEditor: function () {
        var _trackManager = this;
        if (this._trackSelector.css('visibility') != 'hidden') {
            $('#back-to-selector-button').show();
            this._trackSelector.safeFadeOut(function () {
                _trackManager._trackEditor.safeFadeIn();
            });
        } else if (this._trackEditor.css('visibility') == 'hidden') {
            $('#back-to-selector-button').hide();
            this._trackEditor.safeFadeIn();
        } else {}
        if (this._shade.is(':hidden')) {
            this._shade.fadeIn('fast');
        }
        if (!this._active) {
            this.activate();
        }
    },
    lockTrackEditor: function () {
        dodebug('removing cancel handler...');
        $('body').unbind('click', this.cancelHandler);
    },
    unlockTrackEditor: function () {
        dodebug('adding cancel handler...');
        $('body').bind('click', {
            widget: this
        }, this.cancelHandler);
    },
    openYouTubeManager: function () {
        this.switchState(this.STATE_YT_TRACKS);
        if (this._ytInputter) {
            this._ytInputter.clear();
        } else {
            this._ytInputter = new TextInlineEditWidget($('.rm-inline-edit', '#yt-track-input'), {
                autoSave: false
            });
            this._ytInputter.addCallback('update', this, this.youTubeInputHandler);
            this._ytInputter._inputField.bind('keyup', function (event) {
                var instructions = $('#yt-track-input').find('.instr');
                if ($(event.currentTarget).val() != '' && event.keyCode != 13) {
                    if (instructions.is(':hidden')) {
                        instructions.fadeIn();
                    }
                } else if (instructions.is(':visible')) {
                    instructions.hide();
                }
            });
        }
        if (this._ytConnect) {
            $('#yt-default-state').siblings('.track-selector-state').hide().show();
        } else {
            $('#yt-connect-state').show();
        }
    },
    openSoundCloudManager: function () {
        if (this._scConnect) {
            this.switchState(this.STATE_SC_TRACKS);
        } else {
            this.switchState(this.STATE_SC_CONNECT);
        }
    },
    openTrackInfo: function (track) {
        this.switchState(this.STATE_TRACK_INFO);
        if (track) {
            this.setSelectedTrack(track);
        }
        this.updateTrackEditorUI();
    },
    loadBandPagePlaylist: function () {
        var _trackManager = this;
        $('#rmplayer-playlist').empty();
        var loadingNode = $('<li class="loading">Loading ' + getGlobal('brand') + ' tracks...</li>');
        loadingNode.appendTo($('#rmplayer-playlist'));
        $.ajax({
            url: '/getajax/getPlaylist',
            type: 'post',
            dataType: 'json',
            data: {
                bandId: _trackManager._postData.bandId
            },
            success: function (data, response) {
                if (data) {
                    dodebug(data);
                    $('.loading', '#rmplayer-playlist').remove();
                    if (data.tracks && data.tracks.length) {
                        $('#rmplayer-playlist').hide();
                        var track;
                        for (var i = 0; i < data.tracks.length; i++) {
                            track = {
                                id: parseInt(data.tracks[i].id),
                                serviceType: parseInt(data.tracks[i].source),
                                sourceId: data.tracks[i].sourceId,
                                title: data.tracks[i].title,
                                description: data.tracks[i].description,
                                duration: data.tracks[i].duration,
                                downloadable: data.tracks[i].downloadable,
                                purchasable: data.tracks[i].purchaseable,
                                artworkUrl: data.tracks[i].artworkUrl,
                                purchaseUrl: data.tracks[i].purchaseUrl,
                                streamUrl: data.tracks[i].streamUrl,
                                onBandPage: true
                            };
                            _trackManager.storeTrack(track);
                            $('#rmplayer-playlist').append(_trackManager.generateTrackDOM(track));
                        }
                        $('#rmplayer-playlist').fadeIn();
                        dodebug(_trackManager._tracks);
                        _trackManager.updatePlaylistUI(true);
                    } else {
                        var emptyNode = $('<li class="empty-message"><p>It looks like you haven&rsquo;t added any tracks to your playlist yet.<br /><a href="http://www.abc.com/help" title="' + getGlobal('vendor') + ' Help & Feedback" target="_blank">Do you need some help?</a></p></li>');
                        emptyNode.appendTo($('#rmplayer-playlist'));
                        $('#track-title').text('No tracks (yet).');
                    }
                } else {}
            }
        });
    },
    loadSoundCloudPlaylists: function () {
        var playlistSelector = $('#sc-existing-playlists');
        if (playlistSelector.length < 1) {
            var loadingDOM = '<span class="loading">Loading...</span>';
            $('#sc-playlist-filter').append($(loadingDOM));
            var _trackManager = this;
            $.ajax({
                url: '/soundcloud/getPlaylists',
                type: 'post',
                dataType: 'json',
                data: {
                    rmPageId: _trackManager._postData.rmPageId,
                    bandId: _trackManager._postData.bandId
                },
                success: function (data, response) {
                    var selectorDOM = '<select id="sc-existing-playlists" name="scplaylist"><option name="All Tracks" value="">All Tracks</option></select>';
                    playlistSelector = $(selectorDOM);
                    playlistSelector.appendTo($('#sc-playlist-filter'));
                    playlistSelector.siblings('.loading').remove();
                    if (data && data.length) {
                        var playlist = false;
                        for (var i = 0; i < data.length; i++) {
                            playlist = data[i];
                            playlistSelector.append('<option value="' + playlist.scId + '" name="' + escape(playlist.title) + '">' + playlist.title + '</option>');
                        }
                    } else {
                        dodebug('something went wrong... or you have no playlists. data=');
                        dodebug(data);
                    }
                    playlistSelector.bind('change', {
                        widget: _trackManager
                    }, _trackManager.playlistFilterHandler);
                }
            });
        }
    },
    loadSoundCloudTracks: function () {
        dodebug('loading track list...');
        var trackList = $('.rm-track-selector-tracks', '#soundcloud-default-state');
        if (this._needSCUpdate || trackList.children('li').length < 1) {
            trackList.append('<li><span class="loading">Loading SoundCloud tracks...</span></li>').animate({
                opacity: 0.5
            }, 250);
            var _trackManager = this;
            $.ajax({
                url: '/soundcloud/getTracks',
                type: 'post',
                dataType: 'json',
                data: {
                    rmPageId: _trackManager._postData.rmPageId,
                    bandId: _trackManager._postData.bandId
                },
                success: function (data, response) {
                    dodebug('load soundcloud tracks success');
                    $('.rm-track-selector-tracks', '#soundcloud-default-state').empty();
                    if (data) {
                        if (data.length > 0) {
                            if ($('#sc-track-chooser').is(':hidden')) {
                                $('.no-sc-tracks', '#soundcloud-default-state').remove();
                                $('#sc-track-chooser').fadeIn();
                            }
                            var track = false;
                            var trackDOM = false;
                            for (var i = 0; i < data.length; i++) {
                                track = _trackManager.getTrack(data[i].scId);
                                var rmId = false;
                                if (track) {
                                    rmId = track.id;
                                }
                                track = {
                                    id: rmId,
                                    serviceType: _trackManager.SERVICE_TYPE_SOUNDCLOUD,
                                    sourceId: data[i].scId,
                                    title: data[i].title,
                                    description: data[i].description,
                                    duration: data[i].duration,
                                    downloadable: data[i].downloadable,
                                    purchasable: (data[i].purchaseUrl != ''),
                                    downloadUrl: data[i].downloadUrl,
                                    artworkUrl: data[i].artworkUrl,
                                    purchaseUrl: data[i].purchaseUrl,
                                    streamUrl: data[i].streamUrl,
                                    onBandPage: data[i].onBandPage,
                                    public: data[i].public
                                };
                                trackDOM = $('<a href="#add-track"></a>');
                                trackDOM.text(track.title).attr('id', 'sc-track-' + track.sourceId);
                                trackDOM.wrap('<li id="rm-track-' + track.sourceId + '"></li>').parent().appendTo(trackList);
                                if (!track.onBandPage) {
                                    trackDOM.append('<em class="hover-help">Add to ' + getGlobal('brand') + '</em>');
                                } else {
                                    trackDOM.addClass('disabled').append('<em>Currently on ' + getGlobal('brand') + '</em>').removeAttr('href');
                                }
                                _trackManager.storeTrack(track);
                            }
                        } else {
                            if ($('.no-sc-tracks', '#soundcloud-default-state').length < 1) {
                                $('#sc-track-chooser').hide();
                                $('<p class="message warning no-sc-tracks">No SoundCloud tracks are currently linked to your account.<br />Please upload some tracks from your computer first.</p>').insertAfter($('#sc-track-chooser'));
                            }
                        }
                        trackList.stop().animate({
                            opacity: 1
                        }, 250);
                    } else {
                        dodebug('something went wrong... or you have no tracks. data=');
                        dodebug(data);
                    }
                }
            });
        }
    },
    updateAvailableTrackList: function () {
        var trackIdTokens;
        var trackId;
        var track;
        var _trackManager = this;
        $('.rm-track-selector-tracks', '#soundcloud-default-state').children('li').each(function () {
            trackIdTokens = $(this).attr('id').split('-');
            trackId = trackIdTokens[trackIdTokens.length - 1];
            track = _trackManager.getTrack(trackId);
            if (track && track.onBandPage) {
                $(this).children('a').addClass('disabled').find('em').removeClass('hover-help').text('Currently on ' + getGlobal('brand'));
            } else {
                $(this).children('a').removeClass('disabled').find('em').addClass('hover-help').text('Add to ' + getGlobal('brand'));
            }
            dodebug('updated track ' + trackId);
        });
    },
    cancelHandler: function (event) {
        if ($(event.target).closest(event.data.widget._trackEditor.selector).length == 0 && $(event.target).closest(event.data.widget._trackSelector.selector).length == 0) {
            event.data.widget.saveCurrentToPlaylist();
            event.data.widget.deactivate();
        }
        dodebug('in cancel handler.');
    },
    playlistFilterHandler: function (event) {
        var trackItems = $('.rm-track-selector-tracks', '#soundcloud-default-state').children('li');
        var scId = $(event.currentTarget).val();
        if (scId) {
            $('#sc-playlist-filter').addClass('loading');
            $.ajax({
                url: '/soundcloud/getTracksByPlaylist',
                type: 'post',
                dataType: 'json',
                data: {
                    rmPageId: event.data.widget._postData.rmPageId,
                    bandId: event.data.widget._postData.bandId,
                    scPlaylistId: scId
                },
                success: function (data, response) {
                    trackItems.hide();
                    if (data && data.length) {
                        var track = false;
                        for (var i = 0; i < data.length; i++) {
                            track = data[i];
                            trackItems.filter('[id$=' + track.scId + ']').show();
                        }
                    } else {
                        if ($('.empty-message', trackItems.parent()).length) {
                            $('.empty-message', trackItems.parent()).show();
                        } else {
                            $('<li class="empty-message">No SoundCloud tracks available.<br />Try uploading a new one by clicking the button above!</li>').appendTo(trackItems.parent());
                        }
                    }
                    $('#sc-playlist-filter').removeClass('loading');
                }
            });
        } else {
            trackItems.show();
            if (trackItems.not('.empty-message').length) {
                $('.empty-message', trackItems.parent()).hide();
            }
        }
    },
    songUploadHandler: function (event) {
        switch (event.type) {
        case 'uploadselect':
            this._uploading = true;
            break;
        case 'uploadstart':
            dodebug('START');
            var track = {
                serviceType: this.SERVICE_TYPE_SOUNDCLOUD,
                title: event.data.filename,
                downloadable: false,
                purchasable: false,
                duration: 0,
                artworkUrl: '',
                downloadUrl: '',
                purchaseUrl: '',
                streamUrl: '',
                onBandPage: false,
                uploadQueueID: event.queueID
            };
            this.storeTrack(track);
            this.openTrackInfo(track);
            dodebug('locking track editor...');
            this.lockTrackEditor();
            break;
        case 'uploadprogress':
            dodebug('PROGRESS, percentage=' + event.data.percentage + ', queueID=' + event.queueID);
            if (this.getSelectedTrack().uploadQueueID == event.queueID) {
                $('.progress', '#track-upload-notification').css({
                    width: Math.round(event.data.percentage) + '%'
                });
                if (event.data.percentage > 99) {
                    $('.progress-notification', '#track-upload-notification').text('Sending to SoundCloud...').addClass('loading');
                } else {
                    $('.progress-notification', '#track-upload-notification').text('Uploading... ' + event.data.percentage + '%');
                }
            } else {
                var updatedTrack = this.getTrackByUploadID(event.queueID);
                if (updatedTrack) {
                    dodebug('updatedTrack is ' + updatedTrack.queueID);
                } else {
                    dodebug('The queue ID could not be found ' + event.queueID);
                }
            }
            break;
        case 'uploadcomplete':
            dodebug('COMPLETE');
            var selected = this.getSelectedTrack();
            dodebug(event.data.response);
            var responseData = eval('(' + event.data.response + ')');
            dodebug(responseData);
            var scId = 0;
            if (selected.uploadQueueID == event.queueID) {
                selected.sourceId = responseData.scId;
                selected.duration = responseData.duration;
                selected.downloadUrl = responseData.downloadUrl;
                selected.streamUrl = responseData.streamUrl;
                selected.uploadQueueID = false;
                this.storeTrack(selected);
                $('#track-upload-notification').fadeOut(function () {
                    $('#track-editor-actions').fadeIn('fast');
                });
                this.updateTrackEditorUI();
                scId = selected.sourceId;
            } else {
                dodebug('not currently editing this track...')
                var updatedTrack = this.getTrackByUploadID(event.queueID);
                if (updatedTrack) {
                    updatedTrack.sourceId = responseData.scId;
                    updatedTrack.duration = responseData.duration;
                    updatedTrack.downloadUrl = responseData.downloadUrl;
                    updatedTrack.streamUrl = reseponseData.streamUrl;
                    updatedTrack.uploadQueueID = false;
                    this.storeTrack(updatedTrack);
                    scId = updatedTrack.sourceId;
                }
            }
            this.startSongUploadPoller(scId);
            this.unlockTrackEditor();
            this._needSCUpdate = true;
            this._uploading = false;
            break;
        case 'uploadcancel':
            this.unlockTrackEditor();
            $('.progress-notification', '#track-upload-notification').text('Song upload cancelled.');
            $('.progress', '#track-upload-notification').addClass('cancelled').css({
                width: '100%'
            }).text('Song upload cancelled.');
            var _trackManager = this;
            setTimeout(function () {
                if (_trackManager.lastState) {
                    _trackManager.previousState();
                } else {
                    _trackManager.deactivate();
                }
            }, 1500);
            break;
        case 'uploaderror':
            dodebug(event.error);
            this.unlockTrackEditor();
            break;
        default:
            dodebug('songUploadHandler: got weird event type: ' + event.type);
            break;
        }
    },
    artworkUploadHandler: function (event) {
        dodebug('in artwork handler.');
        switch (event.type) {
        case 'uploadstart':
            dodebug('artwork upload started.');
            if ($('.artwork-upload-progress', this._trackArtworkUploader._domTarget).length) {
                $('.artwork-upload-progress', this._trackArtworkUploader._domTarget).children('.progress-bar').css({
                    width: 0
                }).end().fadeIn('fast');
            } else {
                dodebug('adding progress indicator...');
                $('<div class="artwork-upload-progress"><div class="progress-bar">&nbsp;</div></div>').appendTo(this._trackArtworkUploader._domTarget).children('.progress-bar').css({
                    width: 0
                });
            }
            break;
        case 'uploadprogress':
            $('.progress-bar', this._trackArtworkUploader._domTarget).css({
                width: event.data.percentage + '%'
            });
            break;
        case 'uploadcomplete':
            $('.artwork-upload-progress', this._trackArtworkUploader._domTarget).fadeOut();
            dodebug('got complete event');
            var targetTrack = this.getTrack(this._trackArtworkUploader._scTrackId);
            if (event.data.response.artworkUrl && event.data.response.artworkUrl != targetTrack.artworkUrl) {
                var newArtwork = event.data.response.artworkUrl;
                dodebug('got new artwork url, old = ' + targetTrack.artworkUrl + ', new=' + newArtwork);
                dodebug('not so fast! image might not be available... >:(((((');
                $('img', this._trackArtworkUploader._domTarget).hide();
                $(this._trackArtworkUploader._domTarget).addClass('loading-artwork');
                var _trackManager = this;
                var pollRate = 2000;
                var pollLimit = 60;
                var pollCount = 0;
                var artworkLoadInterval = setInterval(function () {
                    var testImage = new Image();
                    $(testImage).load(function () {
                        $('img', _trackManager._trackArtworkUploader._domTarget).attr('src', newArtwork).fadeIn();
                        $(_trackManager._trackArtworkUploader._domTarget).removeClass('loading-artwork');
                        clearInterval(artworkLoadInterval);
                    }).attr('src', newArtwork);
                    pollCount++;
                    if (pollCount > pollLimit) {
                        clearInterval(artworkLoadInterval);
                        dodebug('Unable to load the new Artwork. Try a page reload to see if the image you just uploaded is now available.');
                    }
                }, 2000);
                var currentTrack = this.getSelectedTrack();
                currentTrack.artworkUrl = newArtwork;
                if (currentTrack.onBandPage) {
                    this.saveTrackToPlaylist(currentTrack);
                } else {
                    this.storeTrack(currentTrack);
                }
                this.setSelectedTrack(currentTrack);
            } else {
                dodebug('wheres the artwork url? soundcloud... :(');
                $('img', this._trackArtworkUploader._domTarget).hide();
                this.startTrackArtworkPoller(this._trackArtworkUploader._scTrackId);
            }
            break;
        case 'uploadcancel':
            break;
        case 'uploaderror':
            dodebug(event.error);
            break;
        default:
            dodebug('artworkUploadHandler: got weird event type: ' + event.type);
            break;
        }
    },
    startTrackArtworkPoller: function (scTrackId) {
        if (!this.isPollingArtwork(scTrackId)) {
            var _trackManager = this;
            var intervalId = setInterval(function () {
                $.ajax({
                    url: '/soundcloud/getTrack',
                    type: 'post',
                    dataType: 'json',
                    data: {
                        bandId: _trackManager._postData.bandId,
                        scTrackId: scTrackId
                    },
                    success: function (data, response) {
                        dodebug(data);
                        if (data && data['artwork-url']) {
                            var track = _trackManager.getTrack(scTrackId);
                            if (track) {
                                if (track.artworkUrl != data['artwork-url'] && (typeof (data['artwork-url']) == 'string')) {
                                    track.artworkUrl = data['artwork-url'];
                                    if (track.onBandPage && scTrackId != _trackManager.getSelectedTrack().sourceId) {
                                        _trackManager.saveTrackToPlaylist(track);
                                    } else {
                                        _trackManager.storeTrack(track);
                                    }
                                    if (scTrackId == _trackManager.getSelectedTrack().sourceId) {
                                        dodebug('refreshing artwork preview...');
                                        if (typeof (track.artworkUrl) != 'string') {
                                            dodebug('not so fast! image might not be available... >:(((((');
                                        }
                                        var pollRate = 2000;
                                        var pollLimit = 60;
                                        var pollCount = 0;
                                        var artworkLoadInterval = setInterval(function () {
                                            var testImage = new Image();
                                            if (typeof (track.artworkUrl) == 'string') {
                                                $(testImage).load(function () {
                                                    if (typeof (track.artworkUrl) == 'string') {
                                                        $('img', _trackManager._trackArtworkUploader._domTarget).attr('src', track.artworkUrl).fadeIn();
                                                    }
                                                    clearInterval(artworkLoadInterval);
                                                }).attr('src', track.artworkUrl);
                                            } else {
                                                pollCount++;
                                                if (pollCount > pollLimit) {
                                                    clearInterval(artworkLoadInterval);
                                                    dodebug('SoundCloud api will not update the Artwork. Try a page reload to see if the image you just uploaded is now available.');
                                                }
                                            }
                                        }, pollRate);
                                        _trackManager.setSelectedTrack(track);
                                    }
                                    _trackManager.removeTrackArtworkPoller(scTrackId);
                                } else {
                                    dodebug('artworkPoller[' + scTrackId + ']:: artwork cache not updated, trying again...');
                                }
                            } else {
                                dodebug('artworkPoller[' + scTrackId + ']:: invalid (null) response from SoundCloud, trying again...');
                            }
                        }
                    },
                    error: function (error) {}
                });
            }, 7500);
            this._artworkPollers.push({
                scTrackId: scTrackId,
                intervalId: intervalId
            });
        }
    },
    isPollingArtwork: function (scTrackId) {
        for (var i = 0; i < this._artworkPollers.length; i++) {
            if (this._artworkPollers[i].scTrackId == scTrackId) {
                return true;
            }
        }
        return false;
    },
    removeTrackArtworkPoller: function (scTrackId) {
        for (var i = 0; i < this._artworkPollers.length; i++) {
            if (this._artworkPollers[i].scTrackId == scTrackId) {
                clearInterval(this._artworkPollers[i].intervalId);
                this._artworkPollers.splice(i, 1);
                return true;
            }
        }
        return false;
    },
    startSongUploadPoller: function (scTrackId) {
        if (!this.isPollingSong(scTrackId)) {
            var _trackManager = this;
            var intervalId = setInterval(function () {
                $.ajax({
                    url: '/soundcloud/getTrack',
                    type: 'post',
                    dataType: 'json',
                    data: {
                        bandId: _trackManager._postData.bandId,
                        scTrackId: scTrackId
                    },
                    success: function (data, response) {
                        dodebug(data);
                        if (data && data['duration']) {
                            var track = _trackManager.getTrack(scTrackId);
                            if (track) {
                                if (track.duration != data['duration']) {
                                    track.duration = data['duration'];
                                    if (track.onBandPage) {
                                        _trackManager.saveTrackToPlaylist(track);
                                    } else {
                                        _trackManager.storeTrack(track);
                                    }
                                    _trackManager.removeSongUploadPoller(scTrackId);
                                } else {
                                    dodebug('songPoller[' + scTrackId + ']:: track cache not updated, trying again...');
                                }
                            } else {
                                dodebug('songPoller[' + scTrackId + ']:: invalid (null) response from SoundCloud, trying again...');
                            }
                        }
                    },
                    error: function (error) {}
                });
            }, 7500);
            this._trackPollers.push({
                scTrackId: scTrackId,
                intervalId: intervalId
            });
        }
    },
    isPollingSong: function (scTrackId) {
        for (var i = 0; i < this._trackPollers.length; i++) {
            if (this._trackPollers[i].scTrackId == scTrackId) {
                return true;
            }
        }
        return false;
    },
    removeSongUploadPoller: function (scTrackId) {
        for (var i = 0; i < this._trackPollers.length; i++) {
            if (this._trackPollers[i].scTrackId == scTrackId) {
                clearInterval(this._trackPollers[i].intervalId);
                this._trackPollers.splice(i, 1);
                return true;
            }
        }
        return false;
    },
    youTubeInputHandler: function () {
        var videoLink = this._ytInputter._inputField.val();
        var statusMsg = $('.instr', '#yt-track-input');
        statusMsg.data('old_text', statusMsg.text());
        if (statusMsg.is(':hidden')) {
            statusMsg.fadeIn();
        }
        statusMsg.text('Getting YouTube info...').addClass('loading');
        var _trackManager = this;
        $.ajax({
            url: '/getajax/getYouTube',
            type: 'post',
            dataType: 'json',
            data: {
                link: videoLink
            },
            success: function (data, response) {
                if (data && !data.error) {
                    if (data.embed) {
                        dodebug(data);
                        track = {
                            serviceType: _trackManager.SERVICE_TYPE_YOUTUBE,
                            sourceId: data.id,
                            streamUrl: data.streamUrl,
                            title: data.title,
                            description: data.description,
                            duration: data.duration,
                            downloadable: false,
                            purchasable: false,
                            artworkUrl: data.image,
                            purchaseUrl: '',
                            onBandPage: false,
                            public: true
                        };
                        dodebug(track);
                        _trackManager.storeTrack(track);
                        _trackManager.openTrackInfo(track);
                    } else {
                        _trackManager.displayVideoEmbedError();
                    }
                } else {
                    _trackManager.displayVideoInvalidError();
                }
                _trackManager._ytInputter.clear();
                statusMsg.removeClass('loading').hide().text(statusMsg.data('old_text'));
            }
        });
    },
    buttonHandler: function (event) {
        var targetId = $(event.currentTarget).attr('id');
        dodebug(targetId);
        switch (targetId) {
        case 'add-file-track-button':
            $('.default-message').hide().siblings('.intro-message').show();
            event.data.widget.openSoundCloudManager();
            break;
        case 'add-sc-track-button':
            $('.intro-message').hide().siblings('.default-message').show();
            event.data.widget.openSoundCloudManager();
            break;
        case 'add-yt-track-button':
            event.data.widget.openYouTubeManager();
            break;
        case 'save-to-bandpage-button':
            event.data.widget.saveCurrentToPlaylist();
            event.data.widget.deactivate();
            break;
        case 'back-to-selector-button':
            event.data.widget.previousState();
            break;
        case 'close-track-selector-button':
        case 'cancel-track-changes-button':
            event.data.widget.deactivate();
            break;
        case 'cancel-song-upload-button':
            if (event.data.widget.getSelectedTrack().uploadQueueID) {
                event.data.widget._songUploader.cancel(event.data.widget.getSelectedTrack().uploadQueueID);
                event.data.widget._directSongUploader.cancel(event.data.widget.getSelectedTrack().uploadQueueID);
            } else {
                dodebug('Selected song isn\'t uploading! Can\'t cancel.');
            }
            break;
        default:
            if (targetId.search(/remove-track/) > -1) {
                if (confirm('Are you sure you want to remove the track from your playlist? You may have to re-enter its information if you want to add it again...')) {
                    var idTokens = targetId.split('-');
                    event.data.widget.removeTrackFromPlaylist(idTokens[idTokens.length - 1]);
                }
            }
            break;
        }
        event.stopPropagation();
        return false;
    },
    handleBuyLinkEvent: function (event) {
        if ($(event.target).closest('.rm-buy-link-input').length) {
            event.stopPropagation();
        } else {
            event.data.elem.fadeOut();
        }
    },
    displayVideoInvalidError: function () {
        var message = "<strong>Invalid link:</strong> Hmm... this video link doesn't seem valid. YouTube links generally look like this: http://www.youtube.com/watch?v=_______<br /><a class=\"close-button\">Click to close</a>";
        this.displayMessage(message);
        this._ytInputter.clear();
    },
    displayVideoEmbedError: function () {
        var message = "<strong>Video not embeddable:</strong> This video doesn't seem to be embeddable. In order to get the video to play on BandPage, it needs to be public and embeddable.<br /><a class=\"close-button\">Click to close</a>";
        this.displayMessage(message);
        this._ytInputter.clear();
    },
    displayMessage: function (message) {
        var dialog = $('.error-dialog', '#yt-track-input');
        dialog.html(message).show().css({
            opacity: 0
        }).animate({
            bottom: '+=20px',
            opacity: 1
        }, 250);
        dialog.one('click', function () {
            dialog.fadeOut(function () {
                $(this).css({
                    opacity: '',
                    bottom: ''
                });
            });
        });
    },
    clearMessages: function () {
        this._errDisplay.removeClass(this.MESSAGE_ERROR).removeClass(this.MESSAGE_INFO).removeClass(this.MESSAGE_WARNING);
        this._errDisplay.hide();
    },
    scrollToView: function () {
        var scrollPos = $(window).scrollTop();
        if (scrollPos > ($('#content').height() - this._domTarget.height())) {
            scrollPos = $('#content').height() - this._domTarget.height();
        }
        if (scrollPos > this._scrollStartPos) {
            this._domTarget.stop().animate({
                top: (scrollPos - this._scrollStartPos) + 'px'
            }, 250);
        } else if (this._domTarget.position() != null && this._domTarget.position().top > 0) {
            this._domTarget.stop().animate({
                top: 0
            }, 250);
        }
    },
    handleScroll: function (event) {
        event.data.widget.scrollToView();
        return false;
    }
});
var InlineDateWidget = InlineEditWidget.extend({
    _name: "InlineDateWidget",
    _date: false,
    _display: {
        day: null,
        time: null
    },
    _numericDate: false,
    _granularity: 0,
    _uiPanel: false,
    _autoSave: true,
    _prompt: 'Please enter a date',
    _granularities: ['year', 'month', 'day', 'hour', 'minute'],
    init: function (targetElement, options) {
        this._dom.input = "<input type='hidden' name='show-date' />";
        this._time = {};
        this._display = {
            day: null,
            time: null
        };
        this._granularity = this._granularities.length - 1;
        this._date = false;
        this._autoSave = true;
        this._prompt = 'Please enter a date';
        this._format = 'D, M d';
        if (options) {
            if (options.hasOwnProperty('date')) {
                if (options.date && typeof (options.date) === 'object') {
                    try {
                        var timestamp = options.date.getTime();
                        this._date = this.UTCToLocal(new Date(timestamp));
                    } catch (err) {
                        dodebug(this._name + '::install, failed to parse input date: ' + options.date);
                    }
                }
            } else if (options.hasOwnProperty('timestamp')) {
                var timestamp = parseInt(options.timestamp);
                if (!isNaN(timestamp) && timestamp > 0) {
                    this._date = this.UTCToLocal(new Date(timestamp));
                }
            }
            if (options.hasOwnProperty('granularity')) {
                this._granularity = this._granularities.indexOf(options.granularity);
            }
            if (options.hasOwnProperty('autoSave')) {
                this._autoSave = options.autoSave;
            }
            if (options.hasOwnProperty('format')) {
                this._format = options.format;
            }
            if (options.hasOwnProperty('prompt')) {
                this._prompt = options.prompt;
            }
        }
        dodebug('granularity: ' + this._granularity);
        this._super(targetElement, options);
    },
    formatTime: function (date) {
        var ampm = (date.getHours() >= 12) ? "pm" : "am";
        var min = (date.getMinutes() < 10) ? "0" + date.getMinutes() : date.getMinutes();
        var hour = (date.getHours() % 12 == 0) ? 12 : date.getHours() % 12;
        return hour + ":" + min + " " + ampm;
    },
    hasGranularity: function (name) {
        var index = this._granularities.indexOf(name);
        return (index >= 0 && this._granularity >= index);
    },
    UTCToLocal: function (date) {
        return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), 0, 0);
    },
    localToUTC: function (date) {
        var utc_date = new Date(date);
        utc_date.setUTCFullYear(date.getFullYear());
        utc_date.setUTCMonth(date.getMonth(), date.getDate());
        utc_date.setUTCHours(date.getHours(), date.getMinutes(), 0, 0);
        return utc_date;
    },
    install: function () {
        dodebug('installing InlineDateWidget');
        this._super();
        this._inputField = this._inputArea.children('input');
        this._contentArea.empty().unbind('blur focus');
        if (this._date) {
            this._inputField.val(this._date.getTime());
        }
        this._display.day = $('<div class="day"></div>').appendTo(this._contentArea);
        this._display.day.text(this._date ? $.datepicker.formatDate(this._format, this._date) : this._prompt);
        if (this.hasGranularity('hour')) {
            this._display.time = $('<div class="time"></div>').appendTo(this._contentArea);
            this._display.time.text(this._date ? this.formatTime(this._date) : '');
        }
        if ((this._uiPanel = $("#rm-inline-datepicker")).length < 1) {
            this._uiPanel = $("<div id='rm-inline-datepicker'></div>").data('InlineDateWidget', this);
            this._uiPanel.datepicker({
                dateFormat: this._format,
                showAnim: 'fold',
                minDate: new Date()
            });
            this._uiPanel.prepend("<h3>Choose date</h3>");
            this._uiPanel.append("<h3>Choose time</h3>");
            this._uiPanel.append("<select name='h' id='rm-datepicker-time-h'>" + "<option selected value=1>1</option>" + "<option value=2>2</option>" + "<option value=3>3</option>" + "<option value=4>4</option>" + "<option value=5>5</option>" + "<option value=6>6</option>" + "<option value=7>7</option>" + "<option value=8>8</option>" + "<option value=9>9</option>" + "<option value=10>10</option>" + "<option value=11>11</option>" + "<option value=12>12</option>" + "</select>");
            this._uiPanel.append("<select name='m' id='rm-datepicker-time-m'>" + "<option selected label='00' value='0'>00</option>" + "<option label='15' value='15'>15</option>" + "<option label='30' value='30'>30</option>" + "<option label='45' value='45'>45</option>" + "</select>");
            this._uiPanel.append("<select name='pm' id='rm-datepicker-time-pm'>" + "<option selected label='pm' value='1'>pm</option>" + "<option label='am' value='0'>am</option>" + "</select>");
            $("#ui-datepicker-div").remove();
            $("<a href='#close-datepicker' id='rm-datepicker-close-button'>X</a>").appendTo(this._uiPanel);
            $("body").append(this._uiPanel);
            this._uiPanel.bind('click', function (e) {
                e.stopPropagation();
            });
        }
    },
    activate: function () {
        if (!this._super()) return false;
        var offset = this._domTarget.offset();
        this._uiPanel.data('InlineDateWidget', this).css({
            top: offset.top,
            left: offset.left
        }).show('fold');
        var datepicker_date = this._date ? this._date : new Date();
        this._uiPanel.datepicker('setDate', new Date(datepicker_date)).datepicker('option', 'onSelect', function (dateText, datepicker) {
            $(this).data('InlineDateWidget')._uiPanel.children('#rm-datepicker-time-h').focus();
            $('#rm-inline-datepicker').datepicker('hide', 750);
        });
        var hours = (datepicker_date.getHours() !== 12) ? (datepicker_date.getHours() % 12) : 12;
        this._uiPanel.children('#rm-datepicker-time-h').val(hours);
        this._uiPanel.children('#rm-datepicker-time-m').val(datepicker_date.getMinutes());
        var pm = (datepicker_date.getHours() >= 12) ? 1 : 0;
        this._uiPanel.children('#rm-datepicker-time-pm').val(pm).data('original', pm);
        $('#rm-datepicker-close-button', this._uiPanel).bind('click', {
            widget: this
        }, this.processUserEvent);
        return true;
    },
    deactivate: function () {
        if (!this._super()) {
            return false;
        }
        $('#rm-datepicker-close-button', this._uiPanel).unbind('click', this.processUserEvent);
        this._uiPanel.hide('fold');
        return true;
    },
    enable: function () {
        this._super();
        this._contentArea.unbind('blur focus');
    },
    changeMode: function (mode) {
        this._super(mode);
        switch (mode) {
        case 'css':
            this.disable();
            break;
        case 'content':
            this.enable();
            break;
        default:
            break;
        }
    },
    commit: function () {
        var day_ms = this._uiPanel.datepicker('getDate').getTime();
        var time_ms = 0;
        if (this.hasGranularity('hour')) {
            if (this._uiPanel.children("#rm-datepicker-time-h").val() != 12) {
                time_ms += parseInt(this._uiPanel.children("#rm-datepicker-time-h").val()) * (60 * 60 * 1000);
            }
            time_ms += parseInt(this._uiPanel.children("#rm-datepicker-time-pm").val()) * (12 * 60 * 60 * 1000);
            if (this.hasGranularity('minute')) {
                time_ms += parseInt(this._uiPanel.children("#rm-datepicker-time-m").val()) * (60 * 1000);
            }
        }
        this._date = new Date(day_ms + time_ms);
        this._inputField.val(this._date.getTime());
        this._display.day.text($.datepicker.formatDate(this._format, this._date));
        if (this.hasGranularity('hour')) {
            this._display.time.text(this.formatTime(this._date));
        }
        this._super();
        dodebug(this._date);
        if (this._autoSave) {
            Saver.save(this._inputField.attr('name'), this.getDate(), {
                elem: this._inputField
            });
        }
    },
    getDate: function (formatted) {
        dodebug('getting date, original = ' + this._date);
        if (!this._date) {
            return 0;
        }
        var utc_date = this.localToUTC(this._date);
        return formatted ? $.datepicker.formatDate(this._format, utc_date) : utc_date.getTime();
    },
    needsUpdate: function () {
        var day_ms = this._uiPanel.datepicker('getDate').getTime();
        var time = {
            hour_ms: parseInt(this._uiPanel.children("#rm-datepicker-time-h").val()) * (60 * 60 * 1000),
            min_ms: parseInt(this._uiPanel.children("#rm-datepicker-time-m").val()) * (60 * 1000),
            ampm_ms: parseInt(this._uiPanel.children("#rm-datepicker-time-pm").val()) * (12 * 60 * 60 * 1000)
        };
        var time_ms = time.hour_ms + time.min_ms + time.ampm_ms;
        var time_difference = (!this._date || (this._date.getTime() !== (new Date(day_ms + time_ms)).getTime()));
        var $ampm = this._uiPanel.children('#rm-datepicker-time-pm');
        var ampm_shift = ($ampm.val() != $ampm.data('original'));
        return (time_difference || ampm_shift);
    },
    processUserEvent: function (event, doSuper) {
        if (doSuper) return this._super(event);
        switch (event.type) {
        case 'focus':
            event.stopPropagation();
            return false;
            break;
        case 'blur':
            event.stopPropagation();
            return false;
            break;
        case 'click':
            if (event.currentTarget == $('#rm-datepicker-close-button').get(0)) {
                dodebug('clicked on close button.');
                event.data.widget.deactivate();
                event.stopPropagation();
                return false;
            }
            break;
        default:
            break;
        }
        event.stopPropagation();
        if (event.data && event.data.widget) return event.data.widget.processUserEvent(event, true);
    }
});
var AutocompleteWidget = TextInlineEditWidget.extend({
    _autoFilled: false,
    init: function (targetElement, options) {
        this._apiID = options.api;
        this._super(targetElement, options);
        this._autoSave = false;
        this._autoFilled = false;
    },
    commit: function (usingAutocomplete) {
        this._super();
        var _widget = this;
        var autocomplete = _widget._inputField.autocomplete('widget');
        dodebug(autocomplete.position().top);
        if (parseInt(autocomplete.position().top) == 0) {
            autocomplete.hide();
            dodebug('hid autocomplete window...');
        } else {
            autocomplete.slideUp('fast');
        }
        setTimeout(function () {
            if (!usingAutocomplete || _widget._autoFilled) {
                var showId = $(_widget._inputField).closest('li').attr("id");
                showId = showId.substr(showId.lastIndexOf("-") + 1);
                var venue = _widget.getValue();
                dodebug('AutoCompleteWidget.commit:: no autocomplete, saving: ' + venue + ', for showId: ' + showId);
                var venueData = {
                    value: venue,
                    showId: showId
                };
                Saver.save('show-venue', venueData, {
                    elem: _widget._inputField
                });
                if (!venue || venue == '' || venue.length < 1) {
                    dodebug('AutoCompleteWidget::commit: clearing the venue also erases the city');
                    var _cityWidget = _widget._domTarget.siblings('[name="show-city"]').data('TextInlineEditWidget');
                    var cityData = {
                        value: '',
                        showId: showId
                    };
                    Saver.save('show-city', cityData, {
                        elem: _cityWidget._inputField
                    });
                }
            }
        }, 750);
    },
    install: function (targetElement) {
        this._super(targetElement);
        switch (this._apiID) {
        case 'sonicliving':
            var _widget = this;
            if (getGlobal('vendor').toLowerCase() == 'rootmusic') {
                this._inputField.autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '/sonicliving/venue/' + request.term,
                            dataType: 'json',
                            data: {},
                            success: function (data) {
                                if (!_widget._active) {
                                    return false;
                                }
                                response($.map(data.results, function (item) {
                                    return {
                                        label: item.venueName + ', ' + item.location,
                                        value: item.venueName,
                                        venueName: item.venueName,
                                        sonicLivingId: item.sonicLivingId,
                                        address: item.address,
                                        phone: item.phone,
                                        latitude: item.latitude,
                                        longitude: item.longitude,
                                        location: item.location
                                    };
                                }));
                            },
                            error: function (data) {
                                return false;
                            }
                        })
                    },
                    minLength: 1,
                    open: function (event, ui) {
                        _widget._inputField.parent().removeClass('loading');
                        var autocomplete_window = _widget._inputField.autocomplete('widget');
                        autocomplete_window.append('<a class="sonicliving-backlink" href="http://www.sonicliving.com/" title="SonicLiving" target="_blank">SonicLiving</a>');
                    },
                    search: function (event, ui) {
                        _widget._inputField.parent().addClass('loading');
                    },
                    select: function (event, ui) {
                        _widget._autoFilled = true;
                        _widget._inputField.val(ui.item.venueName);
                        _widget.commit(true);
                        var _cityWidget = _widget.getWidget('TextInlineEditWidget', _widget._domTarget.siblings('[name="show-city"]'));
                        if (_cityWidget) {
                            _cityWidget._inputField.val(ui.item.location);
                            _cityWidget._contentArea.text(ui.item.location);
                        } else {
                            dodebug(_widget._name + '::autocomplete:focus: couldn\'t find city field');
                        }
                        var showId = $(_widget._inputField).closest('li').attr("id");
                        showId = showId.substr(showId.lastIndexOf("-") + 1);
                        dodebug('AutoCompleteWidget.select:: saving for showId = ' + showId);
                        var cityData = {
                            value: ui.item.location,
                            showId: showId
                        }
                        var venueData = $.extend({
                            showId: showId
                        }, ui.item);
                        dodebug(venueData);
                        Saver.save('show-city', cityData, {
                            elem: _cityWidget._inputField
                        });
                        Saver.save('show-venue-sonicliving', venueData, {
                            elem: _widget._inputField
                        });
                        return false;
                    },
                    change: function (event, ui) {
                        _widget._autoFilled = false;
                    }
                });
            }
            break;
        default:
            break;
        }
    },
    closeAutocomplete: function () {
        this._inputField.autocomplete('close');
    }
});
var TouringScheduleWidget = RMUIWidget.extend({
    _name: "TouringScheduleWidget",
    _table: false,
    _rows: false,
    _adConnect: false,
    _editors: false,
    _prompts: {},
    _EXAMPLE_TABLE_ROW: $('<li class="rm-css-example-row rm-css-edit bg bgtrans fg fgtype">' + '<div class="tour-sched-when ts-col">' + '<div name="show-date"><span class="day">Mon, Jan 01</span><br/><span class="time">12:00 am</span></div>' + '</div>' + '<div class="tour-sched-where ts-col">' + '<div name="show-venue">[Example] Venue</div><div name="show-city">[Example] City</div>' + '</div>' + '<div class="tour-sched-price ts-col"><div name="show-price">free</div></div>' + '<div class="tour-sched-actions ts-col"></div>' + '<div class="tour-sched-more-info ts-col"><div class="tour-sched-who"><div name="show-supporting">[Example] {{ example-supporting }}</div></div></div>' + '</li>'),
    init: function (targetElement, options) {
        this._currentTime = (new Date()).getTime();
        this._prompts = {
            add: 'Add Show',
            'example-supporting': 'Band Name 1, Band Name 2'
        };
        if (options) {
            if (options.hasOwnProperty('date')) {
                this._currentTime = options.date;
            }
            if (options.hasOwnProperty('prompts')) {
                $.extend(this._prompts, options.prompts);
            }
            this._EXAMPLE_TABLE_ROW.html(this._EXAMPLE_TABLE_ROW.html().replace(/\{\{ example-supporting \}\}/g, this._prompts['example-supporting']));
        }
        this._super(targetElement, options);
    },
    install: function () {
        this._super();
        this._table = this._domTarget;
        this._rows = this._table.children('li:not(#rm-tour-sched-header)');
        this._editors = new Array();
        var _tourSched = this;
        this._rows.each(function () {
            _tourSched.installRow(this);
        });
        $('#action-add-show').bind('click', $.proxy(function (e) {
            this.addShow();
            return false;
        }, this));
        if (this._prompts.hasOwnProperty('add')) {
            $('#action-add-show').text(this._prompts.add);
        }
        $('.rm-buy-link', this._domTarget).live('click', function (ce) {
            var inputField = $(ce.currentTarget).siblings('.rm-buy-link-input');
            if (inputField.is(':hidden')) {
                $('.rm-buy-link', _tourSched._domTarget).siblings('.rm-buy-link-input').hide();
                inputField.css({
                    display: 'block',
                    opacity: 0,
                    bottom: function (indx, val) {
                        return (parseInt(val) - 10);
                    }
                }).animate({
                    opacity: 1,
                    bottom: '+=10px'
                }, 250, function () {
                    $(this).css({
                        bottom: ''
                    });
                });
                $('body').bind('click', {
                    widget: _tourSched,
                    elem: inputField
                }, _tourSched.handleBuyLinkEvent);
            } else {
                inputField.fadeOut();
            }
            return false;
        });
        this.sortRows();
        this._adConnect = this._domTarget.hasClass('artistdata-connect');
        RMUIWidgetRelay.addCallback('artistdata-connect', this, this.handleArtistData);
        if (this._adConnect) {
            for (var i = 0; i < this._editors.length; i++) {
                this._editors[i].disable();
            }
            this._rows.find('.delete-show, .rm-buy-link').hide();
            $('#artistdata-overlay').fadeIn();
        }
    },
    installRow: function (row) {
        var showId = $(row).attr('id').split('-').pop();
        $('.hidden', row).removeClass('hidden').hide();
        var _tourSched = this;
        $('.rm-inline-edit', row).each(function () {
            var $this = $(this);
            var widget;
            var options = {
                enableGlobalCallbacks: false
            };
            if (_tourSched._prompts.hasOwnProperty($this.attr('name'))) {
                $.extend(options, {
                    prompt: _tourSched._prompts[$this.attr('name')]
                });
            }
            if ($this.hasClass('autocomplete')) {
                if ($this.hasClass('sonicliving')) {
                    options = $.extend(options, {
                        api: 'sonicliving'
                    });
                }
                widget = new AutocompleteWidget($(this), options);
            } else if ($this.hasClass('date')) {
                var timestamp = parseInt($this.text());
                widget = new InlineDateWidget($this, $.extend(options, {
                    timestamp: timestamp,
                    autoSave: false
                }));
                widget.addCallback('update', _tourSched, _tourSched.handleDateUpdated, showId);
            } else {
                widget = new TextInlineEditWidget($this, $.extend(options, {
                    autoSave: false
                }));
                widget.addCallback('update', _tourSched, _tourSched.handleSave, showId);
            }
            if (widget) {
                _tourSched._editors.push(widget);
            }
        });
        $('.delete-show', row).each(function () {
            $(this).bind('click', {
                widget: _tourSched,
                showId: showId
            }, _tourSched.deleteShow);
        });
    },
    changeMode: function (mode) {
        switch (mode) {
        case 'css':
            this.disable();
            break;
        case 'content':
            this.enable();
            break;
        default:
            break;
        }
    },
    enable: function () {
        this._super();
        if (this._adConnect) {
            $('#action-artistdata-add-show, #artistdata-overlay').fadeIn();
            this._domTarget.css({
                opacity: ''
            });
        } else {
            $('#action-add-show').fadeIn();
            for (var i = 0; i < this._editors.length; i++) {
                this._editors[i].enable();
            }
            this._rows.find('.delete-show, .rm-buy-link').fadeIn();
        }
        $('.rm-css-example-row', '#rm-tour-sched').fadeOut(function () {
            $(this).remove();
        });
    },
    disable: function (fadeOut) {
        this._super();
        for (var i = 0; i < this._editors.length; i++) {
            this._editors[i].disable();
        }
        this._rows.find('.delete-show, .rm-buy-link').fadeOut();
        if (this._adConnect) {
            $('#action-artistdata-add-show, #artistdata-overlay').fadeOut();
            this._domTarget.animate({
                opacity: 1
            }, 250);
        } else {
            $('#action-add-show').fadeOut();
        }
        var tourSchedRows = $('li', '#rm-tour-sched').not('#rm-tour-sched-header');
        switch (tourSchedRows.length) {
        case 0:
            var cloneEl = $(this._EXAMPLE_TABLE_ROW).clone();
            $('#rm-tour-sched').append(cloneEl.addClass('even').attr('rel', 'rm-css-ts-even'));
            cloneEl.data('css', {
                'font-family': cloneEl.css('fontFamily'),
                'font-size': cloneEl.css('fontSize'),
                'font-style': cloneEl.css('fontStyle'),
                'font-weight': cloneEl.css('fontWeight'),
                'letter-spacing': cloneEl.css('letterSpacing'),
                'text-transform': cloneEl.css('textTransform'),
                'background-color': cloneEl.css('backgroundColor')
            });
        case 1:
            var cloneEl = $(this._EXAMPLE_TABLE_ROW).clone();
            $('#rm-tour-sched').append(cloneEl.addClass('odd').attr('rel', 'rm-css-ts-odd'));
            cloneEl.data('css', {
                'font-family': cloneEl.css('fontFamily'),
                'font-size': cloneEl.css('fontSize'),
                'font-style': cloneEl.css('fontStyle'),
                'font-weight': cloneEl.css('fontWeight'),
                'letter-spacing': cloneEl.css('letterSpacing'),
                'text-transform': cloneEl.css('textTransform'),
                'background-color': cloneEl.css('backgroundColor')
            });
            break;
        default:
            break;
        }
        if (fadeOut) {
            this._domTarget.animate({
                opacity: 0.2
            }, 250);
        }
    },
    addShow: function (show) {
        var _tourSched = this;
        var showData = {
            name: '',
            date: -1,
            price: '',
            venue: '',
            city: ''
        };
        Saver.save('show-add', showData, {
            success: function (data) {
                if (!data.hasOwnProperty('shows') || data.shows.length < 1) {
                    dodebug(_tourSched._name + '::addShow, got empty show response.');
                    return false;
                }
                var showId = data.shows[0].id;
                var showRow = _tourSched.createShowDom(showId);
                showRow.insertAfter($('#rm-tour-sched-header'));
                _tourSched._rows = _tourSched._table.children('li:not(#rm-tour-sched-header)');
                _tourSched.installRow(showRow);
                _tourSched.activateRow(showId);
                _tourSched.sortRows();
            }
        });
    },
    createShowDom: function (showId) {
        var showRow = '<li id="rm-show-' + showId + '" class="added rm-css-edit fg fgtype bg bgtrans">';
        showRow += '<div class="tour-sched-when ts-col"><div name="show-date" class="rm-inline-edit date"></div></div>';
        showRow += '<div class="tour-sched-where ts-col"><div name="show-venue" class="rm-inline-edit autocomplete sonicliving"></div><div name="show-city" class="rm-inline-edit"></div></div>';
        showRow += '<div class="tour-sched-price ts-col"><div name="show-price" class="rm-inline-edit"></div></div>';
        showRow += '<div class="tour-sched-actions ts-col"><a href="#delete-show" title="delete this show?" class="delete-show" name="' + showId + '">remove</a><a id="edit-ticket-link-' + showId + '" class="rm-buy-link" href="#show-buy-' + showId + '" title="Change or add a ticket purchase link">Edit purchase url</a><em class="rm-buy-link-input hidden">URL: <span class="rm-inline-edit" name="show-purchase-url"></span></em></div>';
        showRow += '<div class="tour-sched-more-info ts-col"><div class="tour-sched-who"><div name="show-supporting" class="rm-inline-edit"></div></div></div>';
        showRow += '</li>';
        return $(showRow);
    },
    deleteShow: function (e) {
        if (confirm("Are you sure you want to remove this show?")) {
            var _tourSched = e.data.widget;
            var showId = e.data.showId;
            var targetRow = $('#rm-show-' + showId);
            Saver.save('show-remove', showId, {
                error: function (err) {
                    targetRow.addClass('error').fadeIn();
                }
            });
            targetRow.fadeOut(400, function () {
                targetRow = $(this).detach();
                _tourSched._rows = _tourSched._table.children('li:not(#rm-tour-sched-header)');
                _tourSched.sortRows();
            });
        }
        return false;
    },
    sortRows: function () {
        var rowSelector = 'li:not(#rm-tour-sched-header)';
        if (!this._table) {
            this._table = $('#rm-tour-sched');
            this._rows = this._table.children(rowSelector);
        }
        var _tourSched = this;
        var sortedRows = this._rows.detach().get().sort($.proxy(function (a, b) {
            var date_a = this.getWidget('InlineDateWidget', $(a).find('.rm-inline-edit.date')).getDate();
            var date_b = this.getWidget('InlineDateWidget', $(b).find('.rm-inline-edit.date')).getDate();
            dodebug('comparing ' + date_a + ' to ' + date_b);
            if (date_a < date_b) return -1;
            else if (date_a > date_b) return 1;
            else return 0;
        }, this));
        dodebug(sortedRows);
        this._table.append(sortedRows);
        this._rows = this._table.children(rowSelector);
        this._rows.removeClass('odd').attr('rel', 'rm-css-ts-even').filter(':odd').addClass('odd').attr('rel', 'rm-css-ts-odd');
        setTimeout($.proxy(function () {
            this._rows.filter('.active').each(function () {
                var $this = $(this);
                $this.css({
                    zIndex: 1
                }).children().animate({
                    opacity: 0.2
                }, 500).animate({
                    opacity: 1
                }, 500, function () {
                    $this.removeClass('active');
                    setTimeout(function () {
                        $this.css({
                            zIndex: ''
                        });
                    }, 500);
                });
            });
        }, this), 500);
    },
    handleDateUpdated: function (showId, dateWidget) {
        this.activateRow(showId);
        this.sortRows();
        Saver.save(dateWidget._inputField.attr('name'), {
            showId: showId,
            date: dateWidget.getDate()
        });
    },
    activateRow: function (showId) {
        $('#rm-show-' + showId).addClass('active');
    },
    handleArtistData: function (artistdata_key) {
        if (this._domTarget.height() < 200) {
            this._domTarget.data('old_height', this._domTarget.height()).animate({
                height: '200px'
            }, 350);
        }
        var infoDom = $('.artistdata-key-info', '#artistdata-overlay');
        $('.key-display', infoDom).text(artistdata_key);
        infoDom.siblings('h3').removeClass('loading').text('Your ArtistData key is:');
        for (var i = 0; i < this._editors.length; i++) {
            this._editors[i].disable();
        }
        this._rows.find('.delete-show, .rm-buy-link').hide();
        $('#artistdata-overlay').fadeIn();
        this._domTarget.addClass('artistdata-connect');
        this._adConnect = true;
        $('#action-add-show').text('Add show on ArtistData').unbind('click').attr({
            href: 'http://www.artistdata.com/dashboard/tour/shows/add',
            id: 'action-artistdata-add-show',
            target: '_blank'
        });
    },
    handleBuyLinkEvent: function (event) {
        if ($(event.target).closest('.rm-buy-link-input').length && !$(event.target).hasClass('rm-buy-link')) {
            event.stopPropagation();
        } else {
            event.data.elem.fadeOut();
            $('body').unbind('click', event.data.widget.handleBuyLinkEvent);
        }
    },
    handleSave: function (showId, widget) {
        var data = {};
        var fieldName = widget._inputField.attr('name');
        data.showId = showId;
        data.value = widget.getValue();
        var options = {
            elem: widget._inputField
        };
        switch (fieldName) {
        case 'show-purchase-url':
            options.success = function (data) {
                if (!data.hasOwnProperty('shows') || data.shows.length < 1) {
                    dodebug(this._name + '::handleSave, got empty response');
                    return false;
                }
                var purchaseUrl = data.shows[0].ticketPurchaseUrl;
                if (purchaseUrl.length > 0) {
                    $('#edit-ticket-link-' + showId).addClass('active');
                } else {
                    $('#edit-ticket-link-' + showId).removeClass('active');
                }
            };
            break;
        }
        dodebug('TouringScheduleWidget.handleSave:: ' + fieldName + ' => ' + data.value);
        Saver.save(fieldName, data, options);
    }
});

function INIT_DATA() {
    REQUEST_DATA = {
        host: 'http://www.mysocialmediaagency.com/tsms_beta/',
        shost: 'http://www.mysocialmediaagency.com/tsms_beta/',
        pageId: 0
    };
}
function dodebug(str) {
    if (false) debug(str);
}